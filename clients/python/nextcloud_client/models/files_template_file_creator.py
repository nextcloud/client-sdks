# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class FilesTemplateFileCreator(BaseModel):
    """
    FilesTemplateFileCreator
    """
    app: StrictStr = Field(...)
    label: StrictStr = Field(...)
    extension: StrictStr = Field(...)
    icon_class: Optional[StrictStr] = Field(..., alias="iconClass")
    mimetypes: conlist(StrictStr) = Field(...)
    ratio: Optional[Union[StrictFloat, StrictInt]] = Field(...)
    action_label: StrictStr = Field(..., alias="actionLabel")
    additional_properties: Dict[str, Any] = {}
    __properties = ["app", "label", "extension", "iconClass", "mimetypes", "ratio", "actionLabel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesTemplateFileCreator:
        """Create an instance of FilesTemplateFileCreator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if icon_class (nullable) is None
        # and __fields_set__ contains the field
        if self.icon_class is None and "icon_class" in self.__fields_set__:
            _dict['iconClass'] = None

        # set to None if ratio (nullable) is None
        # and __fields_set__ contains the field
        if self.ratio is None and "ratio" in self.__fields_set__:
            _dict['ratio'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesTemplateFileCreator:
        """Create an instance of FilesTemplateFileCreator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesTemplateFileCreator.parse_obj(obj)

        _obj = FilesTemplateFileCreator.parse_obj({
            "app": obj.get("app"),
            "label": obj.get("label"),
            "extension": obj.get("extension"),
            "icon_class": obj.get("iconClass"),
            "mimetypes": obj.get("mimetypes"),
            "ratio": obj.get("ratio"),
            "action_label": obj.get("actionLabel")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


