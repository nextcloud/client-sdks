# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from nextcloud_client.models.comments_capabilities import CommentsCapabilities
from nextcloud_client.models.dav_capabilities import DavCapabilities
from nextcloud_client.models.files_capabilities import FilesCapabilities
from nextcloud_client.models.files_sharing_capabilities import FilesSharingCapabilities
from nextcloud_client.models.files_trashbin_capabilities import FilesTrashbinCapabilities
from nextcloud_client.models.files_versions_capabilities import FilesVersionsCapabilities
from nextcloud_client.models.provisioning_api_capabilities import ProvisioningApiCapabilities
from nextcloud_client.models.sharebymail_capabilities import SharebymailCapabilities
from nextcloud_client.models.theming_public_capabilities import ThemingPublicCapabilities
from nextcloud_client.models.user_status_capabilities import UserStatusCapabilities
from nextcloud_client.models.weather_status_capabilities import WeatherStatusCapabilities
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

COREOCSGETCAPABILITIES200RESPONSEOCSDATACAPABILITIES_ANY_OF_SCHEMAS = ["CommentsCapabilities", "DavCapabilities", "FilesCapabilities", "FilesSharingCapabilities", "FilesTrashbinCapabilities", "FilesVersionsCapabilities", "ProvisioningApiCapabilities", "SharebymailCapabilities", "ThemingPublicCapabilities", "UserStatusCapabilities", "WeatherStatusCapabilities"]

class CoreOcsGetCapabilities200ResponseOcsDataCapabilities(BaseModel):
    """
    CoreOcsGetCapabilities200ResponseOcsDataCapabilities
    """

    # data type: CommentsCapabilities
    anyof_schema_1_validator: Optional[CommentsCapabilities] = None
    # data type: DavCapabilities
    anyof_schema_2_validator: Optional[DavCapabilities] = None
    # data type: FilesCapabilities
    anyof_schema_3_validator: Optional[FilesCapabilities] = None
    # data type: FilesSharingCapabilities
    anyof_schema_4_validator: Optional[FilesSharingCapabilities] = None
    # data type: FilesTrashbinCapabilities
    anyof_schema_5_validator: Optional[FilesTrashbinCapabilities] = None
    # data type: FilesVersionsCapabilities
    anyof_schema_6_validator: Optional[FilesVersionsCapabilities] = None
    # data type: ProvisioningApiCapabilities
    anyof_schema_7_validator: Optional[ProvisioningApiCapabilities] = None
    # data type: SharebymailCapabilities
    anyof_schema_8_validator: Optional[SharebymailCapabilities] = None
    # data type: ThemingPublicCapabilities
    anyof_schema_9_validator: Optional[ThemingPublicCapabilities] = None
    # data type: UserStatusCapabilities
    anyof_schema_10_validator: Optional[UserStatusCapabilities] = None
    # data type: WeatherStatusCapabilities
    anyof_schema_11_validator: Optional[WeatherStatusCapabilities] = None
    if TYPE_CHECKING:
        actual_instance: Union[CommentsCapabilities, DavCapabilities, FilesCapabilities, FilesSharingCapabilities, FilesTrashbinCapabilities, FilesVersionsCapabilities, ProvisioningApiCapabilities, SharebymailCapabilities, ThemingPublicCapabilities, UserStatusCapabilities, WeatherStatusCapabilities]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(COREOCSGETCAPABILITIES200RESPONSEOCSDATACAPABILITIES_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = CoreOcsGetCapabilities200ResponseOcsDataCapabilities.construct()
        error_messages = []
        # validate data type: CommentsCapabilities
        if not isinstance(v, CommentsCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CommentsCapabilities`")
        else:
            return v

        # validate data type: DavCapabilities
        if not isinstance(v, DavCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DavCapabilities`")
        else:
            return v

        # validate data type: FilesCapabilities
        if not isinstance(v, FilesCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FilesCapabilities`")
        else:
            return v

        # validate data type: FilesSharingCapabilities
        if not isinstance(v, FilesSharingCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FilesSharingCapabilities`")
        else:
            return v

        # validate data type: FilesTrashbinCapabilities
        if not isinstance(v, FilesTrashbinCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FilesTrashbinCapabilities`")
        else:
            return v

        # validate data type: FilesVersionsCapabilities
        if not isinstance(v, FilesVersionsCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FilesVersionsCapabilities`")
        else:
            return v

        # validate data type: ProvisioningApiCapabilities
        if not isinstance(v, ProvisioningApiCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProvisioningApiCapabilities`")
        else:
            return v

        # validate data type: SharebymailCapabilities
        if not isinstance(v, SharebymailCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SharebymailCapabilities`")
        else:
            return v

        # validate data type: ThemingPublicCapabilities
        if not isinstance(v, ThemingPublicCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ThemingPublicCapabilities`")
        else:
            return v

        # validate data type: UserStatusCapabilities
        if not isinstance(v, UserStatusCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserStatusCapabilities`")
        else:
            return v

        # validate data type: WeatherStatusCapabilities
        if not isinstance(v, WeatherStatusCapabilities):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WeatherStatusCapabilities`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in CoreOcsGetCapabilities200ResponseOcsDataCapabilities with anyOf schemas: CommentsCapabilities, DavCapabilities, FilesCapabilities, FilesSharingCapabilities, FilesTrashbinCapabilities, FilesVersionsCapabilities, ProvisioningApiCapabilities, SharebymailCapabilities, ThemingPublicCapabilities, UserStatusCapabilities, WeatherStatusCapabilities. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilities:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilities:
        """Returns the object represented by the json string"""
        instance = CoreOcsGetCapabilities200ResponseOcsDataCapabilities.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[CommentsCapabilities] = None
        try:
            instance.actual_instance = CommentsCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[DavCapabilities] = None
        try:
            instance.actual_instance = DavCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[FilesCapabilities] = None
        try:
            instance.actual_instance = FilesCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[FilesSharingCapabilities] = None
        try:
            instance.actual_instance = FilesSharingCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[FilesTrashbinCapabilities] = None
        try:
            instance.actual_instance = FilesTrashbinCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[FilesVersionsCapabilities] = None
        try:
            instance.actual_instance = FilesVersionsCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[ProvisioningApiCapabilities] = None
        try:
            instance.actual_instance = ProvisioningApiCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[SharebymailCapabilities] = None
        try:
            instance.actual_instance = SharebymailCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[ThemingPublicCapabilities] = None
        try:
            instance.actual_instance = ThemingPublicCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[UserStatusCapabilities] = None
        try:
            instance.actual_instance = UserStatusCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[WeatherStatusCapabilities] = None
        try:
            instance.actual_instance = WeatherStatusCapabilities.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CoreOcsGetCapabilities200ResponseOcsDataCapabilities with anyOf schemas: CommentsCapabilities, DavCapabilities, FilesCapabilities, FilesSharingCapabilities, FilesTrashbinCapabilities, FilesVersionsCapabilities, ProvisioningApiCapabilities, SharebymailCapabilities, ThemingPublicCapabilities, UserStatusCapabilities, WeatherStatusCapabilities. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


