# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool
from nextcloud_client.models.files_sharing_capabilities_files_sharing_public_expire_date import FilesSharingCapabilitiesFilesSharingPublicExpireDate
from nextcloud_client.models.files_sharing_capabilities_files_sharing_public_password import FilesSharingCapabilitiesFilesSharingPublicPassword

class FilesSharingCapabilitiesFilesSharingPublic(BaseModel):
    """
    FilesSharingCapabilitiesFilesSharingPublic
    """
    enabled: StrictBool = Field(...)
    password: Optional[FilesSharingCapabilitiesFilesSharingPublicPassword] = None
    multiple_links: Optional[StrictBool] = None
    expire_date: Optional[FilesSharingCapabilitiesFilesSharingPublicExpireDate] = None
    expire_date_internal: Optional[FilesSharingCapabilitiesFilesSharingPublicExpireDate] = None
    expire_date_remote: Optional[FilesSharingCapabilitiesFilesSharingPublicExpireDate] = None
    send_mail: Optional[StrictBool] = None
    upload: Optional[StrictBool] = None
    upload_files_drop: Optional[StrictBool] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["enabled", "password", "multiple_links", "expire_date", "expire_date_internal", "expire_date_remote", "send_mail", "upload", "upload_files_drop"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesSharingCapabilitiesFilesSharingPublic:
        """Create an instance of FilesSharingCapabilitiesFilesSharingPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of password
        if self.password:
            _dict['password'] = self.password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expire_date
        if self.expire_date:
            _dict['expire_date'] = self.expire_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expire_date_internal
        if self.expire_date_internal:
            _dict['expire_date_internal'] = self.expire_date_internal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expire_date_remote
        if self.expire_date_remote:
            _dict['expire_date_remote'] = self.expire_date_remote.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesSharingCapabilitiesFilesSharingPublic:
        """Create an instance of FilesSharingCapabilitiesFilesSharingPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesSharingCapabilitiesFilesSharingPublic.parse_obj(obj)

        _obj = FilesSharingCapabilitiesFilesSharingPublic.parse_obj({
            "enabled": obj.get("enabled"),
            "password": FilesSharingCapabilitiesFilesSharingPublicPassword.from_dict(obj.get("password")) if obj.get("password") is not None else None,
            "multiple_links": obj.get("multiple_links"),
            "expire_date": FilesSharingCapabilitiesFilesSharingPublicExpireDate.from_dict(obj.get("expire_date")) if obj.get("expire_date") is not None else None,
            "expire_date_internal": FilesSharingCapabilitiesFilesSharingPublicExpireDate.from_dict(obj.get("expire_date_internal")) if obj.get("expire_date_internal") is not None else None,
            "expire_date_remote": FilesSharingCapabilitiesFilesSharingPublicExpireDate.from_dict(obj.get("expire_date_remote")) if obj.get("expire_date_remote") is not None else None,
            "send_mail": obj.get("send_mail"),
            "upload": obj.get("upload"),
            "upload_files_drop": obj.get("upload_files_drop")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


