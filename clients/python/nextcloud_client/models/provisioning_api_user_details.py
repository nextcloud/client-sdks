# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from nextcloud_client.models.provisioning_api_user_details_backend_capabilities import ProvisioningApiUserDetailsBackendCapabilities
from nextcloud_client.models.provisioning_api_user_details_quota import ProvisioningApiUserDetailsQuota

class ProvisioningApiUserDetails(BaseModel):
    """
    ProvisioningApiUserDetails
    """
    additional_mail: conlist(StrictStr) = Field(...)
    additional_mail_scope: Optional[conlist(StrictStr)] = Field(None, alias="additional_mailScope")
    address: StrictStr = Field(...)
    address_scope: Optional[StrictStr] = Field(None, alias="addressScope")
    avatar_scope: Optional[StrictStr] = Field(None, alias="avatarScope")
    backend: StrictStr = Field(...)
    backend_capabilities: ProvisioningApiUserDetailsBackendCapabilities = Field(..., alias="backendCapabilities")
    biography: StrictStr = Field(...)
    biography_scope: Optional[StrictStr] = Field(None, alias="biographyScope")
    display_name: StrictStr = Field(..., alias="display-name")
    displayname: StrictStr = Field(...)
    displayname_scope: Optional[StrictStr] = Field(None, alias="displaynameScope")
    email: Optional[StrictStr] = Field(...)
    email_scope: Optional[StrictStr] = Field(None, alias="emailScope")
    enabled: Optional[StrictBool] = None
    fediverse: StrictStr = Field(...)
    fediverse_scope: Optional[StrictStr] = Field(None, alias="fediverseScope")
    groups: conlist(StrictStr) = Field(...)
    headline: StrictStr = Field(...)
    headline_scope: Optional[StrictStr] = Field(None, alias="headlineScope")
    id: StrictStr = Field(...)
    language: StrictStr = Field(...)
    last_login: StrictInt = Field(..., alias="lastLogin")
    locale: StrictStr = Field(...)
    manager: StrictStr = Field(...)
    notify_email: Optional[StrictStr] = Field(...)
    organisation: StrictStr = Field(...)
    organisation_scope: Optional[StrictStr] = Field(None, alias="organisationScope")
    phone: StrictStr = Field(...)
    phone_scope: Optional[StrictStr] = Field(None, alias="phoneScope")
    profile_enabled: StrictStr = Field(...)
    profile_enabled_scope: Optional[StrictStr] = Field(None, alias="profile_enabledScope")
    quota: ProvisioningApiUserDetailsQuota = Field(...)
    role: StrictStr = Field(...)
    role_scope: Optional[StrictStr] = Field(None, alias="roleScope")
    storage_location: Optional[StrictStr] = Field(None, alias="storageLocation")
    subadmin: conlist(StrictStr) = Field(...)
    twitter: StrictStr = Field(...)
    twitter_scope: Optional[StrictStr] = Field(None, alias="twitterScope")
    website: StrictStr = Field(...)
    website_scope: Optional[StrictStr] = Field(None, alias="websiteScope")
    additional_properties: Dict[str, Any] = {}
    __properties = ["additional_mail", "additional_mailScope", "address", "addressScope", "avatarScope", "backend", "backendCapabilities", "biography", "biographyScope", "display-name", "displayname", "displaynameScope", "email", "emailScope", "enabled", "fediverse", "fediverseScope", "groups", "headline", "headlineScope", "id", "language", "lastLogin", "locale", "manager", "notify_email", "organisation", "organisationScope", "phone", "phoneScope", "profile_enabled", "profile_enabledScope", "quota", "role", "roleScope", "storageLocation", "subadmin", "twitter", "twitterScope", "website", "websiteScope"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProvisioningApiUserDetails:
        """Create an instance of ProvisioningApiUserDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of backend_capabilities
        if self.backend_capabilities:
            _dict['backendCapabilities'] = self.backend_capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quota
        if self.quota:
            _dict['quota'] = self.quota.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if notify_email (nullable) is None
        # and __fields_set__ contains the field
        if self.notify_email is None and "notify_email" in self.__fields_set__:
            _dict['notify_email'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProvisioningApiUserDetails:
        """Create an instance of ProvisioningApiUserDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProvisioningApiUserDetails.parse_obj(obj)

        _obj = ProvisioningApiUserDetails.parse_obj({
            "additional_mail": obj.get("additional_mail"),
            "additional_mail_scope": obj.get("additional_mailScope"),
            "address": obj.get("address"),
            "address_scope": obj.get("addressScope"),
            "avatar_scope": obj.get("avatarScope"),
            "backend": obj.get("backend"),
            "backend_capabilities": ProvisioningApiUserDetailsBackendCapabilities.from_dict(obj.get("backendCapabilities")) if obj.get("backendCapabilities") is not None else None,
            "biography": obj.get("biography"),
            "biography_scope": obj.get("biographyScope"),
            "display_name": obj.get("display-name"),
            "displayname": obj.get("displayname"),
            "displayname_scope": obj.get("displaynameScope"),
            "email": obj.get("email"),
            "email_scope": obj.get("emailScope"),
            "enabled": obj.get("enabled"),
            "fediverse": obj.get("fediverse"),
            "fediverse_scope": obj.get("fediverseScope"),
            "groups": obj.get("groups"),
            "headline": obj.get("headline"),
            "headline_scope": obj.get("headlineScope"),
            "id": obj.get("id"),
            "language": obj.get("language"),
            "last_login": obj.get("lastLogin"),
            "locale": obj.get("locale"),
            "manager": obj.get("manager"),
            "notify_email": obj.get("notify_email"),
            "organisation": obj.get("organisation"),
            "organisation_scope": obj.get("organisationScope"),
            "phone": obj.get("phone"),
            "phone_scope": obj.get("phoneScope"),
            "profile_enabled": obj.get("profile_enabled"),
            "profile_enabled_scope": obj.get("profile_enabledScope"),
            "quota": ProvisioningApiUserDetailsQuota.from_dict(obj.get("quota")) if obj.get("quota") is not None else None,
            "role": obj.get("role"),
            "role_scope": obj.get("roleScope"),
            "storage_location": obj.get("storageLocation"),
            "subadmin": obj.get("subadmin"),
            "twitter": obj.get("twitter"),
            "twitter_scope": obj.get("twitterScope"),
            "website": obj.get("website"),
            "website_scope": obj.get("websiteScope")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


