# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator

class FilesExternalStorageConfig(BaseModel):
    """
    FilesExternalStorageConfig
    """
    applicable_groups: Optional[conlist(StrictStr)] = Field(None, alias="applicableGroups")
    applicable_users: Optional[conlist(StrictStr)] = Field(None, alias="applicableUsers")
    auth_mechanism: StrictStr = Field(..., alias="authMechanism")
    backend: StrictStr = Field(...)
    backend_options: Dict[str, Dict[str, Any]] = Field(..., alias="backendOptions")
    id: Optional[StrictInt] = None
    mount_options: Optional[Dict[str, Dict[str, Any]]] = Field(None, alias="mountOptions")
    mount_point: StrictStr = Field(..., alias="mountPoint")
    priority: Optional[StrictInt] = None
    status: Optional[StrictInt] = None
    status_message: Optional[StrictStr] = Field(None, alias="statusMessage")
    type: StrictStr = Field(...)
    user_provided: StrictBool = Field(..., alias="userProvided")
    additional_properties: Dict[str, Any] = {}
    __properties = ["applicableGroups", "applicableUsers", "authMechanism", "backend", "backendOptions", "id", "mountOptions", "mountPoint", "priority", "status", "statusMessage", "type", "userProvided"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('personal', 'system'):
            raise ValueError("must be one of enum values ('personal', 'system')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesExternalStorageConfig:
        """Create an instance of FilesExternalStorageConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesExternalStorageConfig:
        """Create an instance of FilesExternalStorageConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesExternalStorageConfig.parse_obj(obj)

        _obj = FilesExternalStorageConfig.parse_obj({
            "applicable_groups": obj.get("applicableGroups"),
            "applicable_users": obj.get("applicableUsers"),
            "auth_mechanism": obj.get("authMechanism"),
            "backend": obj.get("backend"),
            "backend_options": obj.get("backendOptions"),
            "id": obj.get("id"),
            "mount_options": obj.get("mountOptions"),
            "mount_point": obj.get("mountPoint"),
            "priority": obj.get("priority"),
            "status": obj.get("status"),
            "status_message": obj.get("statusMessage"),
            "type": obj.get("type"),
            "user_provided": obj.get("userProvided")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


