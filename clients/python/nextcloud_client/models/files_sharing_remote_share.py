# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class FilesSharingRemoteShare(BaseModel):
    """
    FilesSharingRemoteShare
    """
    accepted: StrictBool = Field(...)
    file_id: Optional[StrictInt] = Field(...)
    id: StrictInt = Field(...)
    mimetype: Optional[StrictStr] = Field(...)
    mountpoint: StrictStr = Field(...)
    mtime: Optional[StrictInt] = Field(...)
    name: StrictStr = Field(...)
    owner: StrictStr = Field(...)
    parent: Optional[StrictInt] = Field(...)
    permissions: Optional[StrictInt] = Field(...)
    remote: StrictStr = Field(...)
    remote_id: StrictStr = Field(...)
    share_token: StrictStr = Field(...)
    share_type: StrictInt = Field(...)
    type: Optional[StrictStr] = Field(...)
    user: StrictStr = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["accepted", "file_id", "id", "mimetype", "mountpoint", "mtime", "name", "owner", "parent", "permissions", "remote", "remote_id", "share_token", "share_type", "type", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesSharingRemoteShare:
        """Create an instance of FilesSharingRemoteShare from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if file_id (nullable) is None
        # and __fields_set__ contains the field
        if self.file_id is None and "file_id" in self.__fields_set__:
            _dict['file_id'] = None

        # set to None if mimetype (nullable) is None
        # and __fields_set__ contains the field
        if self.mimetype is None and "mimetype" in self.__fields_set__:
            _dict['mimetype'] = None

        # set to None if mtime (nullable) is None
        # and __fields_set__ contains the field
        if self.mtime is None and "mtime" in self.__fields_set__:
            _dict['mtime'] = None

        # set to None if parent (nullable) is None
        # and __fields_set__ contains the field
        if self.parent is None and "parent" in self.__fields_set__:
            _dict['parent'] = None

        # set to None if permissions (nullable) is None
        # and __fields_set__ contains the field
        if self.permissions is None and "permissions" in self.__fields_set__:
            _dict['permissions'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesSharingRemoteShare:
        """Create an instance of FilesSharingRemoteShare from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesSharingRemoteShare.parse_obj(obj)

        _obj = FilesSharingRemoteShare.parse_obj({
            "accepted": obj.get("accepted"),
            "file_id": obj.get("file_id"),
            "id": obj.get("id"),
            "mimetype": obj.get("mimetype"),
            "mountpoint": obj.get("mountpoint"),
            "mtime": obj.get("mtime"),
            "name": obj.get("name"),
            "owner": obj.get("owner"),
            "parent": obj.get("parent"),
            "permissions": obj.get("permissions"),
            "remote": obj.get("remote"),
            "remote_id": obj.get("remote_id"),
            "share_token": obj.get("share_token"),
            "share_type": obj.get("share_type"),
            "type": obj.get("type"),
            "user": obj.get("user")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


