# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class WeatherStatusForecastDataInstantDetails(BaseModel):
    """
    WeatherStatusForecastDataInstantDetails
    """
    air_pressure_at_sea_level: Union[StrictFloat, StrictInt] = Field(...)
    air_temperature: Union[StrictFloat, StrictInt] = Field(...)
    cloud_area_fraction: Union[StrictFloat, StrictInt] = Field(...)
    cloud_area_fraction_high: Union[StrictFloat, StrictInt] = Field(...)
    cloud_area_fraction_low: Union[StrictFloat, StrictInt] = Field(...)
    cloud_area_fraction_medium: Union[StrictFloat, StrictInt] = Field(...)
    dew_point_temperature: Union[StrictFloat, StrictInt] = Field(...)
    fog_area_fraction: Union[StrictFloat, StrictInt] = Field(...)
    relative_humidity: Union[StrictFloat, StrictInt] = Field(...)
    ultraviolet_index_clear_sky: Union[StrictFloat, StrictInt] = Field(...)
    wind_from_direction: Union[StrictFloat, StrictInt] = Field(...)
    wind_speed: Union[StrictFloat, StrictInt] = Field(...)
    wind_speed_of_gust: Union[StrictFloat, StrictInt] = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["air_pressure_at_sea_level", "air_temperature", "cloud_area_fraction", "cloud_area_fraction_high", "cloud_area_fraction_low", "cloud_area_fraction_medium", "dew_point_temperature", "fog_area_fraction", "relative_humidity", "ultraviolet_index_clear_sky", "wind_from_direction", "wind_speed", "wind_speed_of_gust"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WeatherStatusForecastDataInstantDetails:
        """Create an instance of WeatherStatusForecastDataInstantDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WeatherStatusForecastDataInstantDetails:
        """Create an instance of WeatherStatusForecastDataInstantDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WeatherStatusForecastDataInstantDetails.parse_obj(obj)

        _obj = WeatherStatusForecastDataInstantDetails.parse_obj({
            "air_pressure_at_sea_level": obj.get("air_pressure_at_sea_level"),
            "air_temperature": obj.get("air_temperature"),
            "cloud_area_fraction": obj.get("cloud_area_fraction"),
            "cloud_area_fraction_high": obj.get("cloud_area_fraction_high"),
            "cloud_area_fraction_low": obj.get("cloud_area_fraction_low"),
            "cloud_area_fraction_medium": obj.get("cloud_area_fraction_medium"),
            "dew_point_temperature": obj.get("dew_point_temperature"),
            "fog_area_fraction": obj.get("fog_area_fraction"),
            "relative_humidity": obj.get("relative_humidity"),
            "ultraviolet_index_clear_sky": obj.get("ultraviolet_index_clear_sky"),
            "wind_from_direction": obj.get("wind_from_direction"),
            "wind_speed": obj.get("wind_speed"),
            "wind_speed_of_gust": obj.get("wind_speed_of_gust")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


