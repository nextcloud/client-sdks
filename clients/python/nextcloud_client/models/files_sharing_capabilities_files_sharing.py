# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from nextcloud_client.models.files_sharing_capabilities_files_sharing_federation import FilesSharingCapabilitiesFilesSharingFederation
from nextcloud_client.models.files_sharing_capabilities_files_sharing_group import FilesSharingCapabilitiesFilesSharingGroup
from nextcloud_client.models.files_sharing_capabilities_files_sharing_public import FilesSharingCapabilitiesFilesSharingPublic
from nextcloud_client.models.files_sharing_capabilities_files_sharing_sharee import FilesSharingCapabilitiesFilesSharingSharee
from nextcloud_client.models.files_sharing_capabilities_files_sharing_user import FilesSharingCapabilitiesFilesSharingUser

class FilesSharingCapabilitiesFilesSharing(BaseModel):
    """
    FilesSharingCapabilitiesFilesSharing
    """
    api_enabled: StrictBool = Field(...)
    public: FilesSharingCapabilitiesFilesSharingPublic = Field(...)
    user: FilesSharingCapabilitiesFilesSharingUser = Field(...)
    resharing: StrictBool = Field(...)
    group_sharing: Optional[StrictBool] = None
    group: Optional[FilesSharingCapabilitiesFilesSharingGroup] = None
    default_permissions: Optional[StrictInt] = None
    federation: FilesSharingCapabilitiesFilesSharingFederation = Field(...)
    sharee: FilesSharingCapabilitiesFilesSharingSharee = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["api_enabled", "public", "user", "resharing", "group_sharing", "group", "default_permissions", "federation", "sharee"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesSharingCapabilitiesFilesSharing:
        """Create an instance of FilesSharingCapabilitiesFilesSharing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of public
        if self.public:
            _dict['public'] = self.public.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of federation
        if self.federation:
            _dict['federation'] = self.federation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sharee
        if self.sharee:
            _dict['sharee'] = self.sharee.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesSharingCapabilitiesFilesSharing:
        """Create an instance of FilesSharingCapabilitiesFilesSharing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesSharingCapabilitiesFilesSharing.parse_obj(obj)

        _obj = FilesSharingCapabilitiesFilesSharing.parse_obj({
            "api_enabled": obj.get("api_enabled"),
            "public": FilesSharingCapabilitiesFilesSharingPublic.from_dict(obj.get("public")) if obj.get("public") is not None else None,
            "user": FilesSharingCapabilitiesFilesSharingUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "resharing": obj.get("resharing"),
            "group_sharing": obj.get("group_sharing"),
            "group": FilesSharingCapabilitiesFilesSharingGroup.from_dict(obj.get("group")) if obj.get("group") is not None else None,
            "default_permissions": obj.get("default_permissions"),
            "federation": FilesSharingCapabilitiesFilesSharingFederation.from_dict(obj.get("federation")) if obj.get("federation") is not None else None,
            "sharee": FilesSharingCapabilitiesFilesSharingSharee.from_dict(obj.get("sharee")) if obj.get("sharee") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


