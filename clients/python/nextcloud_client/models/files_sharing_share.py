# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator
from nextcloud_client.models.files_sharing_share_item_size import FilesSharingShareItemSize
from nextcloud_client.models.files_sharing_share_status import FilesSharingShareStatus

class FilesSharingShare(BaseModel):
    """
    FilesSharingShare
    """
    attributes: Optional[StrictStr] = Field(...)
    can_delete: StrictBool = Field(...)
    can_edit: StrictBool = Field(...)
    displayname_file_owner: StrictStr = Field(...)
    displayname_owner: StrictStr = Field(...)
    expiration: Optional[StrictStr] = Field(...)
    file_parent: StrictInt = Field(...)
    file_source: StrictInt = Field(...)
    file_target: StrictStr = Field(...)
    has_preview: StrictBool = Field(...)
    hide_download: StrictInt = Field(...)
    id: StrictStr = Field(...)
    item_mtime: StrictInt = Field(...)
    item_permissions: Optional[StrictInt] = None
    item_size: FilesSharingShareItemSize = Field(...)
    item_source: StrictInt = Field(...)
    item_type: StrictStr = Field(...)
    label: StrictStr = Field(...)
    mail_send: StrictInt = Field(...)
    mimetype: StrictStr = Field(...)
    note: StrictStr = Field(...)
    parent: Optional[Any] = Field(...)
    password: Optional[StrictStr] = None
    password_expiration_time: Optional[StrictStr] = None
    path: Optional[StrictStr] = Field(...)
    permissions: StrictInt = Field(...)
    send_password_by_talk: Optional[StrictBool] = None
    share_type: StrictInt = Field(...)
    share_with: Optional[StrictStr] = None
    share_with_avatar: Optional[StrictStr] = None
    share_with_displayname: Optional[StrictStr] = None
    share_with_displayname_unique: Optional[StrictStr] = None
    share_with_link: Optional[StrictStr] = None
    status: Optional[FilesSharingShareStatus] = None
    stime: StrictInt = Field(...)
    storage: StrictInt = Field(...)
    storage_id: StrictStr = Field(...)
    token: Optional[StrictStr] = Field(...)
    uid_file_owner: StrictStr = Field(...)
    uid_owner: StrictStr = Field(...)
    url: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["attributes", "can_delete", "can_edit", "displayname_file_owner", "displayname_owner", "expiration", "file_parent", "file_source", "file_target", "has_preview", "hide_download", "id", "item_mtime", "item_permissions", "item_size", "item_source", "item_type", "label", "mail_send", "mimetype", "note", "parent", "password", "password_expiration_time", "path", "permissions", "send_password_by_talk", "share_type", "share_with", "share_with_avatar", "share_with_displayname", "share_with_displayname_unique", "share_with_link", "status", "stime", "storage", "storage_id", "token", "uid_file_owner", "uid_owner", "url"]

    @validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('file', 'folder'):
            raise ValueError("must be one of enum values ('file', 'folder')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesSharingShare:
        """Create an instance of FilesSharingShare from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of item_size
        if self.item_size:
            _dict['item_size'] = self.item_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if attributes (nullable) is None
        # and __fields_set__ contains the field
        if self.attributes is None and "attributes" in self.__fields_set__:
            _dict['attributes'] = None

        # set to None if expiration (nullable) is None
        # and __fields_set__ contains the field
        if self.expiration is None and "expiration" in self.__fields_set__:
            _dict['expiration'] = None

        # set to None if parent (nullable) is None
        # and __fields_set__ contains the field
        if self.parent is None and "parent" in self.__fields_set__:
            _dict['parent'] = None

        # set to None if password_expiration_time (nullable) is None
        # and __fields_set__ contains the field
        if self.password_expiration_time is None and "password_expiration_time" in self.__fields_set__:
            _dict['password_expiration_time'] = None

        # set to None if path (nullable) is None
        # and __fields_set__ contains the field
        if self.path is None and "path" in self.__fields_set__:
            _dict['path'] = None

        # set to None if share_with_displayname_unique (nullable) is None
        # and __fields_set__ contains the field
        if self.share_with_displayname_unique is None and "share_with_displayname_unique" in self.__fields_set__:
            _dict['share_with_displayname_unique'] = None

        # set to None if token (nullable) is None
        # and __fields_set__ contains the field
        if self.token is None and "token" in self.__fields_set__:
            _dict['token'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesSharingShare:
        """Create an instance of FilesSharingShare from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesSharingShare.parse_obj(obj)

        _obj = FilesSharingShare.parse_obj({
            "attributes": obj.get("attributes"),
            "can_delete": obj.get("can_delete"),
            "can_edit": obj.get("can_edit"),
            "displayname_file_owner": obj.get("displayname_file_owner"),
            "displayname_owner": obj.get("displayname_owner"),
            "expiration": obj.get("expiration"),
            "file_parent": obj.get("file_parent"),
            "file_source": obj.get("file_source"),
            "file_target": obj.get("file_target"),
            "has_preview": obj.get("has_preview"),
            "hide_download": obj.get("hide_download"),
            "id": obj.get("id"),
            "item_mtime": obj.get("item_mtime"),
            "item_permissions": obj.get("item_permissions"),
            "item_size": FilesSharingShareItemSize.from_dict(obj.get("item_size")) if obj.get("item_size") is not None else None,
            "item_source": obj.get("item_source"),
            "item_type": obj.get("item_type"),
            "label": obj.get("label"),
            "mail_send": obj.get("mail_send"),
            "mimetype": obj.get("mimetype"),
            "note": obj.get("note"),
            "parent": obj.get("parent"),
            "password": obj.get("password"),
            "password_expiration_time": obj.get("password_expiration_time"),
            "path": obj.get("path"),
            "permissions": obj.get("permissions"),
            "send_password_by_talk": obj.get("send_password_by_talk"),
            "share_type": obj.get("share_type"),
            "share_with": obj.get("share_with"),
            "share_with_avatar": obj.get("share_with_avatar"),
            "share_with_displayname": obj.get("share_with_displayname"),
            "share_with_displayname_unique": obj.get("share_with_displayname_unique"),
            "share_with_link": obj.get("share_with_link"),
            "status": FilesSharingShareStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "stime": obj.get("stime"),
            "storage": obj.get("storage"),
            "storage_id": obj.get("storage_id"),
            "token": obj.get("token"),
            "uid_file_owner": obj.get("uid_file_owner"),
            "uid_owner": obj.get("uid_owner"),
            "url": obj.get("url")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


