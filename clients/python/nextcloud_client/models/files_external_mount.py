# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from nextcloud_client.models.files_external_storage_config import FilesExternalStorageConfig

class FilesExternalMount(BaseModel):
    """
    FilesExternalMount
    """
    name: StrictStr = Field(...)
    path: StrictStr = Field(...)
    type: StrictStr = Field(...)
    backend: StrictStr = Field(...)
    scope: StrictStr = Field(...)
    permissions: StrictInt = Field(...)
    id: StrictInt = Field(...)
    var_class: StrictStr = Field(..., alias="class")
    config: FilesExternalStorageConfig = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["name", "path", "type", "backend", "scope", "permissions", "id", "class", "config"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('dir'):
            raise ValueError("must be one of enum values ('dir')")
        return value

    @validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('system', 'personal'):
            raise ValueError("must be one of enum values ('system', 'personal')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesExternalMount:
        """Create an instance of FilesExternalMount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesExternalMount:
        """Create an instance of FilesExternalMount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesExternalMount.parse_obj(obj)

        _obj = FilesExternalMount.parse_obj({
            "name": obj.get("name"),
            "path": obj.get("path"),
            "type": obj.get("type"),
            "backend": obj.get("backend"),
            "scope": obj.get("scope"),
            "permissions": obj.get("permissions"),
            "id": obj.get("id"),
            "var_class": obj.get("class"),
            "config": FilesExternalStorageConfig.from_dict(obj.get("config")) if obj.get("config") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


