# coding: utf-8

"""
    nextcloud

    Nextcloud APIs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic import BaseModel, Field, StrictBool
from nextcloud_client.models.files_sharing_capabilities_files_sharing_user_expire_date import FilesSharingCapabilitiesFilesSharingUserExpireDate

class FilesSharingCapabilitiesFilesSharingFederation(BaseModel):
    """
    FilesSharingCapabilitiesFilesSharingFederation
    """
    outgoing: StrictBool = Field(...)
    incoming: StrictBool = Field(...)
    expire_date: FilesSharingCapabilitiesFilesSharingUserExpireDate = Field(...)
    expire_date_supported: FilesSharingCapabilitiesFilesSharingUserExpireDate = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["outgoing", "incoming", "expire_date", "expire_date_supported"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesSharingCapabilitiesFilesSharingFederation:
        """Create an instance of FilesSharingCapabilitiesFilesSharingFederation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of expire_date
        if self.expire_date:
            _dict['expire_date'] = self.expire_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expire_date_supported
        if self.expire_date_supported:
            _dict['expire_date_supported'] = self.expire_date_supported.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesSharingCapabilitiesFilesSharingFederation:
        """Create an instance of FilesSharingCapabilitiesFilesSharingFederation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesSharingCapabilitiesFilesSharingFederation.parse_obj(obj)

        _obj = FilesSharingCapabilitiesFilesSharingFederation.parse_obj({
            "outgoing": obj.get("outgoing"),
            "incoming": obj.get("incoming"),
            "expire_date": FilesSharingCapabilitiesFilesSharingUserExpireDate.from_dict(obj.get("expire_date")) if obj.get("expire_date") is not None else None,
            "expire_date_supported": FilesSharingCapabilitiesFilesSharingUserExpireDate.from_dict(obj.get("expire_date_supported")) if obj.get("expire_date_supported") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


