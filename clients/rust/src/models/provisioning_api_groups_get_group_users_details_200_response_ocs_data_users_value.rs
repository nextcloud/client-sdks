/*
 * nextcloud
 *
 * Nextcloud APIs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue {
    #[serde(rename = "additional_mail")]
    pub additional_mail: Vec<String>,
    #[serde(rename = "additional_mailScope", skip_serializing_if = "Option::is_none")]
    pub additional_mail_scope: Option<Vec<String>>,
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "addressScope", skip_serializing_if = "Option::is_none")]
    pub address_scope: Option<String>,
    #[serde(rename = "avatarScope", skip_serializing_if = "Option::is_none")]
    pub avatar_scope: Option<String>,
    #[serde(rename = "backend")]
    pub backend: String,
    #[serde(rename = "backendCapabilities")]
    pub backend_capabilities: Box<crate::models::ProvisioningApiUserDetailsBackendCapabilities>,
    #[serde(rename = "biography")]
    pub biography: String,
    #[serde(rename = "biographyScope", skip_serializing_if = "Option::is_none")]
    pub biography_scope: Option<String>,
    #[serde(rename = "display-name")]
    pub display_name: String,
    #[serde(rename = "displayname")]
    pub displayname: String,
    #[serde(rename = "displaynameScope", skip_serializing_if = "Option::is_none")]
    pub displayname_scope: Option<String>,
    #[serde(rename = "email", deserialize_with = "Option::deserialize")]
    pub email: Option<String>,
    #[serde(rename = "emailScope", skip_serializing_if = "Option::is_none")]
    pub email_scope: Option<String>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "fediverse")]
    pub fediverse: String,
    #[serde(rename = "fediverseScope", skip_serializing_if = "Option::is_none")]
    pub fediverse_scope: Option<String>,
    #[serde(rename = "groups")]
    pub groups: Vec<String>,
    #[serde(rename = "headline")]
    pub headline: String,
    #[serde(rename = "headlineScope", skip_serializing_if = "Option::is_none")]
    pub headline_scope: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "language")]
    pub language: String,
    #[serde(rename = "lastLogin")]
    pub last_login: i64,
    #[serde(rename = "locale")]
    pub locale: String,
    #[serde(rename = "manager")]
    pub manager: String,
    #[serde(rename = "notify_email", deserialize_with = "Option::deserialize")]
    pub notify_email: Option<String>,
    #[serde(rename = "organisation")]
    pub organisation: String,
    #[serde(rename = "organisationScope", skip_serializing_if = "Option::is_none")]
    pub organisation_scope: Option<String>,
    #[serde(rename = "phone")]
    pub phone: String,
    #[serde(rename = "phoneScope", skip_serializing_if = "Option::is_none")]
    pub phone_scope: Option<String>,
    #[serde(rename = "profile_enabled")]
    pub profile_enabled: String,
    #[serde(rename = "profile_enabledScope", skip_serializing_if = "Option::is_none")]
    pub profile_enabled_scope: Option<String>,
    #[serde(rename = "quota")]
    pub quota: Box<crate::models::ProvisioningApiUserDetailsQuota>,
    #[serde(rename = "role")]
    pub role: String,
    #[serde(rename = "roleScope", skip_serializing_if = "Option::is_none")]
    pub role_scope: Option<String>,
    #[serde(rename = "storageLocation", skip_serializing_if = "Option::is_none")]
    pub storage_location: Option<String>,
    #[serde(rename = "subadmin")]
    pub subadmin: Vec<String>,
    #[serde(rename = "twitter")]
    pub twitter: String,
    #[serde(rename = "twitterScope", skip_serializing_if = "Option::is_none")]
    pub twitter_scope: Option<String>,
    #[serde(rename = "website")]
    pub website: String,
    #[serde(rename = "websiteScope", skip_serializing_if = "Option::is_none")]
    pub website_scope: Option<String>,
}

impl ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue {
    pub fn new(additional_mail: Vec<String>, address: String, backend: String, backend_capabilities: crate::models::ProvisioningApiUserDetailsBackendCapabilities, biography: String, display_name: String, displayname: String, email: Option<String>, fediverse: String, groups: Vec<String>, headline: String, id: String, language: String, last_login: i64, locale: String, manager: String, notify_email: Option<String>, organisation: String, phone: String, profile_enabled: String, quota: crate::models::ProvisioningApiUserDetailsQuota, role: String, subadmin: Vec<String>, twitter: String, website: String) -> ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue {
        ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue {
            additional_mail,
            additional_mail_scope: None,
            address,
            address_scope: None,
            avatar_scope: None,
            backend,
            backend_capabilities: Box::new(backend_capabilities),
            biography,
            biography_scope: None,
            display_name,
            displayname,
            displayname_scope: None,
            email,
            email_scope: None,
            enabled: None,
            fediverse,
            fediverse_scope: None,
            groups,
            headline,
            headline_scope: None,
            id,
            language,
            last_login,
            locale,
            manager,
            notify_email,
            organisation,
            organisation_scope: None,
            phone,
            phone_scope: None,
            profile_enabled,
            profile_enabled_scope: None,
            quota: Box::new(quota),
            role,
            role_scope: None,
            storage_location: None,
            subadmin,
            twitter,
            twitter_scope: None,
            website,
            website_scope: None,
        }
    }
}


