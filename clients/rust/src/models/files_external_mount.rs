/*
 * nextcloud
 *
 * Nextcloud APIs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilesExternalMount {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "type")]
    pub r#type: TypeEnum,
    #[serde(rename = "backend")]
    pub backend: String,
    #[serde(rename = "scope")]
    pub scope: ScopeEnum,
    #[serde(rename = "permissions")]
    pub permissions: i64,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "class")]
    pub class: String,
    #[serde(rename = "config")]
    pub config: Box<crate::models::FilesExternalStorageConfig>,
}

impl FilesExternalMount {
    pub fn new(name: String, path: String, r#type: TypeEnum, backend: String, scope: ScopeEnum, permissions: i64, id: i64, class: String, config: crate::models::FilesExternalStorageConfig) -> FilesExternalMount {
        FilesExternalMount {
            name,
            path,
            r#type,
            backend,
            scope,
            permissions,
            id,
            class,
            config: Box::new(config),
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "dir")]
    Dir,
}

impl Default for TypeEnum {
    fn default() -> TypeEnum {
        Self::Dir
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScopeEnum {
    #[serde(rename = "system")]
    System,
    #[serde(rename = "personal")]
    Personal,
}

impl Default for ScopeEnum {
    fn default() -> ScopeEnum {
        Self::System
    }
}

