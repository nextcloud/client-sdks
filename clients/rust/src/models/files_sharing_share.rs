/*
 * nextcloud
 *
 * Nextcloud APIs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilesSharingShare {
    #[serde(rename = "attributes", deserialize_with = "Option::deserialize")]
    pub attributes: Option<String>,
    #[serde(rename = "can_delete")]
    pub can_delete: bool,
    #[serde(rename = "can_edit")]
    pub can_edit: bool,
    #[serde(rename = "displayname_file_owner")]
    pub displayname_file_owner: String,
    #[serde(rename = "displayname_owner")]
    pub displayname_owner: String,
    #[serde(rename = "expiration", deserialize_with = "Option::deserialize")]
    pub expiration: Option<String>,
    #[serde(rename = "file_parent")]
    pub file_parent: i64,
    #[serde(rename = "file_source")]
    pub file_source: i64,
    #[serde(rename = "file_target")]
    pub file_target: String,
    #[serde(rename = "has_preview")]
    pub has_preview: bool,
    #[serde(rename = "hide_download")]
    pub hide_download: i64,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "item_mtime")]
    pub item_mtime: i64,
    #[serde(rename = "item_permissions", skip_serializing_if = "Option::is_none")]
    pub item_permissions: Option<i64>,
    #[serde(rename = "item_size")]
    pub item_size: Box<crate::models::FilesSharingShareItemSize>,
    #[serde(rename = "item_source")]
    pub item_source: i64,
    #[serde(rename = "item_type")]
    pub item_type: ItemTypeEnum,
    #[serde(rename = "label")]
    pub label: String,
    #[serde(rename = "mail_send")]
    pub mail_send: i64,
    #[serde(rename = "mimetype")]
    pub mimetype: String,
    #[serde(rename = "note")]
    pub note: String,
    #[serde(rename = "parent", deserialize_with = "Option::deserialize")]
    pub parent: Option<serde_json::Value>,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "password_expiration_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub password_expiration_time: Option<Option<String>>,
    #[serde(rename = "path", deserialize_with = "Option::deserialize")]
    pub path: Option<String>,
    #[serde(rename = "permissions")]
    pub permissions: i64,
    #[serde(rename = "send_password_by_talk", skip_serializing_if = "Option::is_none")]
    pub send_password_by_talk: Option<bool>,
    #[serde(rename = "share_type")]
    pub share_type: i64,
    #[serde(rename = "share_with", skip_serializing_if = "Option::is_none")]
    pub share_with: Option<String>,
    #[serde(rename = "share_with_avatar", skip_serializing_if = "Option::is_none")]
    pub share_with_avatar: Option<String>,
    #[serde(rename = "share_with_displayname", skip_serializing_if = "Option::is_none")]
    pub share_with_displayname: Option<String>,
    #[serde(rename = "share_with_displayname_unique", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub share_with_displayname_unique: Option<Option<String>>,
    #[serde(rename = "share_with_link", skip_serializing_if = "Option::is_none")]
    pub share_with_link: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::FilesSharingShareStatus>>,
    #[serde(rename = "stime")]
    pub stime: i64,
    #[serde(rename = "storage")]
    pub storage: i64,
    #[serde(rename = "storage_id")]
    pub storage_id: String,
    #[serde(rename = "token", deserialize_with = "Option::deserialize")]
    pub token: Option<String>,
    #[serde(rename = "uid_file_owner")]
    pub uid_file_owner: String,
    #[serde(rename = "uid_owner")]
    pub uid_owner: String,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl FilesSharingShare {
    pub fn new(attributes: Option<String>, can_delete: bool, can_edit: bool, displayname_file_owner: String, displayname_owner: String, expiration: Option<String>, file_parent: i64, file_source: i64, file_target: String, has_preview: bool, hide_download: i64, id: String, item_mtime: i64, item_size: crate::models::FilesSharingShareItemSize, item_source: i64, item_type: ItemTypeEnum, label: String, mail_send: i64, mimetype: String, note: String, parent: Option<serde_json::Value>, path: Option<String>, permissions: i64, share_type: i64, stime: i64, storage: i64, storage_id: String, token: Option<String>, uid_file_owner: String, uid_owner: String) -> FilesSharingShare {
        FilesSharingShare {
            attributes,
            can_delete,
            can_edit,
            displayname_file_owner,
            displayname_owner,
            expiration,
            file_parent,
            file_source,
            file_target,
            has_preview,
            hide_download,
            id,
            item_mtime,
            item_permissions: None,
            item_size: Box::new(item_size),
            item_source,
            item_type,
            label,
            mail_send,
            mimetype,
            note,
            parent,
            password: None,
            password_expiration_time: None,
            path,
            permissions,
            send_password_by_talk: None,
            share_type,
            share_with: None,
            share_with_avatar: None,
            share_with_displayname: None,
            share_with_displayname_unique: None,
            share_with_link: None,
            status: None,
            stime,
            storage,
            storage_id,
            token,
            uid_file_owner,
            uid_owner,
            url: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ItemTypeEnum {
    #[serde(rename = "file")]
    File,
    #[serde(rename = "folder")]
    Folder,
}

impl Default for ItemTypeEnum {
    fn default() -> ItemTypeEnum {
        Self::File
    }
}

