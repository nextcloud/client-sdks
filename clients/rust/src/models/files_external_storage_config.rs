/*
 * nextcloud
 *
 * Nextcloud APIs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilesExternalStorageConfig {
    #[serde(rename = "applicableGroups", skip_serializing_if = "Option::is_none")]
    pub applicable_groups: Option<Vec<String>>,
    #[serde(rename = "applicableUsers", skip_serializing_if = "Option::is_none")]
    pub applicable_users: Option<Vec<String>>,
    #[serde(rename = "authMechanism")]
    pub auth_mechanism: String,
    #[serde(rename = "backend")]
    pub backend: String,
    #[serde(rename = "backendOptions")]
    pub backend_options: ::std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "mountOptions", skip_serializing_if = "Option::is_none")]
    pub mount_options: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "mountPoint")]
    pub mount_point: String,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i64>,
    #[serde(rename = "statusMessage", skip_serializing_if = "Option::is_none")]
    pub status_message: Option<String>,
    #[serde(rename = "type")]
    pub r#type: TypeEnum,
    #[serde(rename = "userProvided")]
    pub user_provided: bool,
}

impl FilesExternalStorageConfig {
    pub fn new(auth_mechanism: String, backend: String, backend_options: ::std::collections::HashMap<String, serde_json::Value>, mount_point: String, r#type: TypeEnum, user_provided: bool) -> FilesExternalStorageConfig {
        FilesExternalStorageConfig {
            applicable_groups: None,
            applicable_users: None,
            auth_mechanism,
            backend,
            backend_options,
            id: None,
            mount_options: None,
            mount_point,
            priority: None,
            status: None,
            status_message: None,
            r#type,
            user_provided,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "personal")]
    Personal,
    #[serde(rename = "system")]
    System,
}

impl Default for TypeEnum {
    fn default() -> TypeEnum {
        Self::Personal
    }
}

