/* tslint:disable */
/* eslint-disable */
/**
 * nextcloud
 * Nextcloud APIs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CommentsCapabilities
 */
export interface CommentsCapabilities {
    /**
     * 
     * @type {CommentsCapabilitiesFiles}
     * @memberof CommentsCapabilities
     */
    'files': CommentsCapabilitiesFiles;
}
/**
 * 
 * @export
 * @interface CommentsCapabilitiesFiles
 */
export interface CommentsCapabilitiesFiles {
    /**
     * 
     * @type {boolean}
     * @memberof CommentsCapabilitiesFiles
     */
    'comments': boolean;
}
/**
 * 
 * @export
 * @interface CoreAppPasswordGetAppPassword200Response
 */
export interface CoreAppPasswordGetAppPassword200Response {
    /**
     * 
     * @type {CoreAppPasswordGetAppPassword200ResponseOcs}
     * @memberof CoreAppPasswordGetAppPassword200Response
     */
    'ocs': CoreAppPasswordGetAppPassword200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreAppPasswordGetAppPassword200ResponseOcs
 */
export interface CoreAppPasswordGetAppPassword200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreAppPasswordGetAppPassword200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreAppPasswordGetAppPassword200ResponseOcsData}
     * @memberof CoreAppPasswordGetAppPassword200ResponseOcs
     */
    'data': CoreAppPasswordGetAppPassword200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreAppPasswordGetAppPassword200ResponseOcsData
 */
export interface CoreAppPasswordGetAppPassword200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof CoreAppPasswordGetAppPassword200ResponseOcsData
     */
    'apppassword': string;
}
/**
 * 
 * @export
 * @interface CoreAutoCompleteGet200Response
 */
export interface CoreAutoCompleteGet200Response {
    /**
     * 
     * @type {CoreAutoCompleteGet200ResponseOcs}
     * @memberof CoreAutoCompleteGet200Response
     */
    'ocs': CoreAutoCompleteGet200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreAutoCompleteGet200ResponseOcs
 */
export interface CoreAutoCompleteGet200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreAutoCompleteGet200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreAutocompleteResult>}
     * @memberof CoreAutoCompleteGet200ResponseOcs
     */
    'data': Array<CoreAutocompleteResult>;
}
/**
 * 
 * @export
 * @interface CoreAutocompleteResult
 */
export interface CoreAutocompleteResult {
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'subline': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'shareWithDisplayNameUnique': string;
}
/**
 * 
 * @export
 * @interface CoreCollaborationResourcesListCollection200Response
 */
export interface CoreCollaborationResourcesListCollection200Response {
    /**
     * 
     * @type {CoreCollaborationResourcesListCollection200ResponseOcs}
     * @memberof CoreCollaborationResourcesListCollection200Response
     */
    'ocs': CoreCollaborationResourcesListCollection200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreCollaborationResourcesListCollection200ResponseOcs
 */
export interface CoreCollaborationResourcesListCollection200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreCollaborationResourcesListCollection200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreCollection}
     * @memberof CoreCollaborationResourcesListCollection200ResponseOcs
     */
    'data': CoreCollection;
}
/**
 * 
 * @export
 * @interface CoreCollaborationResourcesSearchCollections200Response
 */
export interface CoreCollaborationResourcesSearchCollections200Response {
    /**
     * 
     * @type {CoreCollaborationResourcesSearchCollections200ResponseOcs}
     * @memberof CoreCollaborationResourcesSearchCollections200Response
     */
    'ocs': CoreCollaborationResourcesSearchCollections200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreCollaborationResourcesSearchCollections200ResponseOcs
 */
export interface CoreCollaborationResourcesSearchCollections200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreCollaborationResourcesSearchCollections200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreCollection>}
     * @memberof CoreCollaborationResourcesSearchCollections200ResponseOcs
     */
    'data': Array<CoreCollection>;
}
/**
 * 
 * @export
 * @interface CoreCollection
 */
export interface CoreCollection {
    /**
     * 
     * @type {number}
     * @memberof CoreCollection
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CoreCollection
     */
    'name': string;
    /**
     * 
     * @type {Array<CoreResource>}
     * @memberof CoreCollection
     */
    'resources': Array<CoreResource>;
}
/**
 * 
 * @export
 * @interface CoreContactsAction
 */
export interface CoreContactsAction {
    /**
     * 
     * @type {string}
     * @memberof CoreContactsAction
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CoreContactsAction
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof CoreContactsAction
     */
    'hyperlink': string;
    /**
     * 
     * @type {string}
     * @memberof CoreContactsAction
     */
    'appId': string;
}
/**
 * 
 * @export
 * @interface CoreHoverCardGetUser200Response
 */
export interface CoreHoverCardGetUser200Response {
    /**
     * 
     * @type {CoreHoverCardGetUser200ResponseOcs}
     * @memberof CoreHoverCardGetUser200Response
     */
    'ocs': CoreHoverCardGetUser200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreHoverCardGetUser200ResponseOcs
 */
export interface CoreHoverCardGetUser200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreHoverCardGetUser200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreHoverCardGetUser200ResponseOcsData}
     * @memberof CoreHoverCardGetUser200ResponseOcs
     */
    'data': CoreHoverCardGetUser200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreHoverCardGetUser200ResponseOcsData
 */
export interface CoreHoverCardGetUser200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof CoreHoverCardGetUser200ResponseOcsData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof CoreHoverCardGetUser200ResponseOcsData
     */
    'displayName': string;
    /**
     * 
     * @type {Array<CoreContactsAction>}
     * @memberof CoreHoverCardGetUser200ResponseOcsData
     */
    'actions': Array<CoreContactsAction>;
}
/**
 * 
 * @export
 * @interface CoreLoginFlowV2
 */
export interface CoreLoginFlowV2 {
    /**
     * 
     * @type {CoreLoginFlowV2Poll}
     * @memberof CoreLoginFlowV2
     */
    'poll': CoreLoginFlowV2Poll;
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface CoreLoginFlowV2Credentials
 */
export interface CoreLoginFlowV2Credentials {
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Credentials
     */
    'server': string;
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Credentials
     */
    'loginName': string;
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Credentials
     */
    'appPassword': string;
}
/**
 * 
 * @export
 * @interface CoreLoginFlowV2Poll
 */
export interface CoreLoginFlowV2Poll {
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Poll
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Poll
     */
    'endpoint': string;
}
/**
 * 
 * @export
 * @interface CoreNavigationEntry
 */
export interface CoreNavigationEntry {
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'id': string;
    /**
     * 
     * @type {CoreNavigationEntryOrder}
     * @memberof CoreNavigationEntry
     */
    'order': CoreNavigationEntryOrder;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'href': string;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreNavigationEntry
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'classes': string;
    /**
     * 
     * @type {number}
     * @memberof CoreNavigationEntry
     */
    'unread': number;
}
/**
 * @type CoreNavigationEntryOrder
 * @export
 */
export type CoreNavigationEntryOrder = number | string;

/**
 * 
 * @export
 * @interface CoreNavigationGetAppsNavigation200Response
 */
export interface CoreNavigationGetAppsNavigation200Response {
    /**
     * 
     * @type {CoreNavigationGetAppsNavigation200ResponseOcs}
     * @memberof CoreNavigationGetAppsNavigation200Response
     */
    'ocs': CoreNavigationGetAppsNavigation200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreNavigationGetAppsNavigation200ResponseOcs
 */
export interface CoreNavigationGetAppsNavigation200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreNavigationGetAppsNavigation200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreNavigationEntry>}
     * @memberof CoreNavigationGetAppsNavigation200ResponseOcs
     */
    'data': Array<CoreNavigationEntry>;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200Response
 */
export interface CoreOcsGetCapabilities200Response {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcs}
     * @memberof CoreOcsGetCapabilities200Response
     */
    'ocs': CoreOcsGetCapabilities200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcs
 */
export interface CoreOcsGetCapabilities200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreOcsGetCapabilities200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsData}
     * @memberof CoreOcsGetCapabilities200ResponseOcs
     */
    'data': CoreOcsGetCapabilities200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsData
 */
export interface CoreOcsGetCapabilities200ResponseOcsData {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataVersion}
     * @memberof CoreOcsGetCapabilities200ResponseOcsData
     */
    'version': CoreOcsGetCapabilities200ResponseOcsDataVersion;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilities}
     * @memberof CoreOcsGetCapabilities200ResponseOcsData
     */
    'capabilities': CoreOcsGetCapabilities200ResponseOcsDataCapabilities;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilities
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilities {
    [key: string]: object;

    /**
     * 
     * @type {FilesVersionsCapabilitiesFiles}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'files': FilesVersionsCapabilitiesFiles;
    /**
     * 
     * @type {DavCapabilitiesDav}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'dav': DavCapabilitiesDav;
    /**
     * 
     * @type {SharebymailCapabilitiesFilesSharing}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'files_sharing': SharebymailCapabilitiesFilesSharing;
    /**
     * 
     * @type {ProvisioningApiCapabilitiesProvisioningApi}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'provisioning_api': ProvisioningApiCapabilitiesProvisioningApi;
    /**
     * 
     * @type {ThemingPublicCapabilitiesTheming}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'theming': ThemingPublicCapabilitiesTheming;
    /**
     * 
     * @type {UserStatusCapabilitiesUserStatus}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'user_status': UserStatusCapabilitiesUserStatus;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingUserExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'weather_status': FilesSharingCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataVersion
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataVersion {
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'major': number;
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'minor': number;
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'micro': number;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'string': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'edition': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'extendedSupport': boolean;
}
/**
 * 
 * @export
 * @interface CoreOpenGraphObject
 */
export interface CoreOpenGraphObject {
    /**
     * 
     * @type {string}
     * @memberof CoreOpenGraphObject
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOpenGraphObject
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOpenGraphObject
     */
    'description': string | null;
    /**
     * 
     * @type {string}
     * @memberof CoreOpenGraphObject
     */
    'thumb': string | null;
    /**
     * 
     * @type {string}
     * @memberof CoreOpenGraphObject
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface CoreReference
 */
export interface CoreReference {
    /**
     * 
     * @type {string}
     * @memberof CoreReference
     */
    'richObjectType': string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CoreReference
     */
    'richObject': { [key: string]: object; };
    /**
     * 
     * @type {CoreOpenGraphObject}
     * @memberof CoreReference
     */
    'openGraphObject': CoreOpenGraphObject;
    /**
     * 
     * @type {boolean}
     * @memberof CoreReference
     */
    'accessible': boolean;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiGetProvidersInfo200Response
 */
export interface CoreReferenceApiGetProvidersInfo200Response {
    /**
     * 
     * @type {CoreReferenceApiGetProvidersInfo200ResponseOcs}
     * @memberof CoreReferenceApiGetProvidersInfo200Response
     */
    'ocs': CoreReferenceApiGetProvidersInfo200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiGetProvidersInfo200ResponseOcs
 */
export interface CoreReferenceApiGetProvidersInfo200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreReferenceApiGetProvidersInfo200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreReferenceProvider>}
     * @memberof CoreReferenceApiGetProvidersInfo200ResponseOcs
     */
    'data': Array<CoreReferenceProvider>;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiResolveOne200Response
 */
export interface CoreReferenceApiResolveOne200Response {
    /**
     * 
     * @type {CoreReferenceApiResolveOne200ResponseOcs}
     * @memberof CoreReferenceApiResolveOne200Response
     */
    'ocs': CoreReferenceApiResolveOne200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiResolveOne200ResponseOcs
 */
export interface CoreReferenceApiResolveOne200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreReferenceApiResolveOne200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreReferenceApiResolveOne200ResponseOcsData}
     * @memberof CoreReferenceApiResolveOne200ResponseOcs
     */
    'data': CoreReferenceApiResolveOne200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiResolveOne200ResponseOcsData
 */
export interface CoreReferenceApiResolveOne200ResponseOcsData {
    /**
     * 
     * @type {{ [key: string]: CoreReference; }}
     * @memberof CoreReferenceApiResolveOne200ResponseOcsData
     */
    'references': { [key: string]: CoreReference; };
}
/**
 * 
 * @export
 * @interface CoreReferenceApiTouchProvider200Response
 */
export interface CoreReferenceApiTouchProvider200Response {
    /**
     * 
     * @type {CoreReferenceApiTouchProvider200ResponseOcs}
     * @memberof CoreReferenceApiTouchProvider200Response
     */
    'ocs': CoreReferenceApiTouchProvider200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiTouchProvider200ResponseOcs
 */
export interface CoreReferenceApiTouchProvider200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreReferenceApiTouchProvider200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreReferenceApiTouchProvider200ResponseOcsData}
     * @memberof CoreReferenceApiTouchProvider200ResponseOcs
     */
    'data': CoreReferenceApiTouchProvider200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiTouchProvider200ResponseOcsData
 */
export interface CoreReferenceApiTouchProvider200ResponseOcsData {
    /**
     * 
     * @type {boolean}
     * @memberof CoreReferenceApiTouchProvider200ResponseOcsData
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface CoreReferenceProvider
 */
export interface CoreReferenceProvider {
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceProvider
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceProvider
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceProvider
     */
    'icon_url': string;
    /**
     * 
     * @type {number}
     * @memberof CoreReferenceProvider
     */
    'order': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreReferenceProvider
     */
    'search_providers_ids': Array<string> | null;
}
/**
 * 
 * @export
 * @interface CoreResource
 */
export interface CoreResource {
    /**
     * 
     * @type {string}
     * @memberof CoreResource
     */
    'richObjectType': string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CoreResource
     */
    'richObject': { [key: string]: object; };
    /**
     * 
     * @type {CoreOpenGraphObject}
     * @memberof CoreResource
     */
    'openGraphObject': CoreOpenGraphObject;
    /**
     * 
     * @type {boolean}
     * @memberof CoreResource
     */
    'accessible': boolean;
}
/**
 * 
 * @export
 * @interface CoreStatus
 */
export interface CoreStatus {
    /**
     * 
     * @type {boolean}
     * @memberof CoreStatus
     */
    'installed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreStatus
     */
    'maintenance': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreStatus
     */
    'needsDbUpgrade': boolean;
    /**
     * 
     * @type {string}
     * @memberof CoreStatus
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof CoreStatus
     */
    'versionstring': string;
    /**
     * 
     * @type {string}
     * @memberof CoreStatus
     */
    'edition': string;
    /**
     * 
     * @type {string}
     * @memberof CoreStatus
     */
    'productname': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreStatus
     */
    'extendedSupport': boolean;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiListTasksByApp200Response
 */
export interface CoreTextProcessingApiListTasksByApp200Response {
    /**
     * 
     * @type {CoreTextProcessingApiListTasksByApp200ResponseOcs}
     * @memberof CoreTextProcessingApiListTasksByApp200Response
     */
    'ocs': CoreTextProcessingApiListTasksByApp200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiListTasksByApp200ResponseOcs
 */
export interface CoreTextProcessingApiListTasksByApp200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreTextProcessingApiListTasksByApp200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreTextProcessingApiListTasksByApp200ResponseOcsData}
     * @memberof CoreTextProcessingApiListTasksByApp200ResponseOcs
     */
    'data': CoreTextProcessingApiListTasksByApp200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiListTasksByApp200ResponseOcsData
 */
export interface CoreTextProcessingApiListTasksByApp200ResponseOcsData {
    /**
     * 
     * @type {Array<CoreTextProcessingTask>}
     * @memberof CoreTextProcessingApiListTasksByApp200ResponseOcsData
     */
    'tasks': Array<CoreTextProcessingTask>;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiSchedule200Response
 */
export interface CoreTextProcessingApiSchedule200Response {
    /**
     * 
     * @type {CoreTextProcessingApiSchedule200ResponseOcs}
     * @memberof CoreTextProcessingApiSchedule200Response
     */
    'ocs': CoreTextProcessingApiSchedule200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiSchedule200ResponseOcs
 */
export interface CoreTextProcessingApiSchedule200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreTextProcessingApiSchedule200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreTextProcessingApiSchedule200ResponseOcsData}
     * @memberof CoreTextProcessingApiSchedule200ResponseOcs
     */
    'data': CoreTextProcessingApiSchedule200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiSchedule200ResponseOcsData
 */
export interface CoreTextProcessingApiSchedule200ResponseOcsData {
    /**
     * 
     * @type {CoreTextProcessingTask}
     * @memberof CoreTextProcessingApiSchedule200ResponseOcsData
     */
    'task': CoreTextProcessingTask;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiTaskTypes200Response
 */
export interface CoreTextProcessingApiTaskTypes200Response {
    /**
     * 
     * @type {CoreTextProcessingApiTaskTypes200ResponseOcs}
     * @memberof CoreTextProcessingApiTaskTypes200Response
     */
    'ocs': CoreTextProcessingApiTaskTypes200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiTaskTypes200ResponseOcs
 */
export interface CoreTextProcessingApiTaskTypes200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreTextProcessingApiTaskTypes200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreTextProcessingApiTaskTypes200ResponseOcsData}
     * @memberof CoreTextProcessingApiTaskTypes200ResponseOcs
     */
    'data': CoreTextProcessingApiTaskTypes200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiTaskTypes200ResponseOcsData
 */
export interface CoreTextProcessingApiTaskTypes200ResponseOcsData {
    /**
     * 
     * @type {Array<CoreTextProcessingApiTaskTypes200ResponseOcsDataTypesInner>}
     * @memberof CoreTextProcessingApiTaskTypes200ResponseOcsData
     */
    'types': Array<CoreTextProcessingApiTaskTypes200ResponseOcsDataTypesInner>;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingApiTaskTypes200ResponseOcsDataTypesInner
 */
export interface CoreTextProcessingApiTaskTypes200ResponseOcsDataTypesInner {
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingApiTaskTypes200ResponseOcsDataTypesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingApiTaskTypes200ResponseOcsDataTypesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingApiTaskTypes200ResponseOcsDataTypesInner
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CoreTextProcessingTask
 */
export interface CoreTextProcessingTask {
    /**
     * 
     * @type {number}
     * @memberof CoreTextProcessingTask
     */
    'id': number | null;
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingTask
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof CoreTextProcessingTask
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingTask
     */
    'userId': string | null;
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingTask
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingTask
     */
    'input': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingTask
     */
    'output': string | null;
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingTask
     */
    'identifier': string;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiLanguages200Response
 */
export interface CoreTranslationApiLanguages200Response {
    /**
     * 
     * @type {CoreTranslationApiLanguages200ResponseOcs}
     * @memberof CoreTranslationApiLanguages200Response
     */
    'ocs': CoreTranslationApiLanguages200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiLanguages200ResponseOcs
 */
export interface CoreTranslationApiLanguages200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreTranslationApiLanguages200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreTranslationApiLanguages200ResponseOcsData}
     * @memberof CoreTranslationApiLanguages200ResponseOcs
     */
    'data': CoreTranslationApiLanguages200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiLanguages200ResponseOcsData
 */
export interface CoreTranslationApiLanguages200ResponseOcsData {
    /**
     * 
     * @type {Array<CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner>}
     * @memberof CoreTranslationApiLanguages200ResponseOcsData
     */
    'languages': Array<CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner>;
    /**
     * 
     * @type {boolean}
     * @memberof CoreTranslationApiLanguages200ResponseOcsData
     */
    'languageDetection': boolean;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
 */
export interface CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner {
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
     */
    'from': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
     */
    'fromLabel': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
     */
    'to': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
     */
    'toLabel': string;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiTranslate200Response
 */
export interface CoreTranslationApiTranslate200Response {
    /**
     * 
     * @type {CoreTranslationApiTranslate200ResponseOcs}
     * @memberof CoreTranslationApiTranslate200Response
     */
    'ocs': CoreTranslationApiTranslate200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiTranslate200ResponseOcs
 */
export interface CoreTranslationApiTranslate200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreTranslationApiTranslate200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreTranslationApiTranslate200ResponseOcsData}
     * @memberof CoreTranslationApiTranslate200ResponseOcs
     */
    'data': CoreTranslationApiTranslate200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiTranslate200ResponseOcsData
 */
export interface CoreTranslationApiTranslate200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiTranslate200ResponseOcsData
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiTranslate200ResponseOcsData
     */
    'from': string | null;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchGetProviders200Response
 */
export interface CoreUnifiedSearchGetProviders200Response {
    /**
     * 
     * @type {CoreUnifiedSearchGetProviders200ResponseOcs}
     * @memberof CoreUnifiedSearchGetProviders200Response
     */
    'ocs': CoreUnifiedSearchGetProviders200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchGetProviders200ResponseOcs
 */
export interface CoreUnifiedSearchGetProviders200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreUnifiedSearchGetProviders200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreUnifiedSearchProvider>}
     * @memberof CoreUnifiedSearchGetProviders200ResponseOcs
     */
    'data': Array<CoreUnifiedSearchProvider>;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchProvider
 */
export interface CoreUnifiedSearchProvider {
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchProvider
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchProvider
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CoreUnifiedSearchProvider
     */
    'order': number;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchResult
 */
export interface CoreUnifiedSearchResult {
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResult
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreUnifiedSearchResult
     */
    'isPaginated': boolean;
    /**
     * 
     * @type {Array<CoreUnifiedSearchResultEntry>}
     * @memberof CoreUnifiedSearchResult
     */
    'entries': Array<CoreUnifiedSearchResultEntry>;
    /**
     * 
     * @type {CoreUnifiedSearchResultCursor}
     * @memberof CoreUnifiedSearchResult
     */
    'cursor': CoreUnifiedSearchResultCursor | null;
}
/**
 * @type CoreUnifiedSearchResultCursor
 * @export
 */
export type CoreUnifiedSearchResultCursor = number | string;

/**
 * 
 * @export
 * @interface CoreUnifiedSearchResultEntry
 */
export interface CoreUnifiedSearchResultEntry {
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'thumbnailUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'subline': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'resourceUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'icon': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'rounded': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'attributes': Array<string>;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchSearch200Response
 */
export interface CoreUnifiedSearchSearch200Response {
    /**
     * 
     * @type {CoreUnifiedSearchSearch200ResponseOcs}
     * @memberof CoreUnifiedSearchSearch200Response
     */
    'ocs': CoreUnifiedSearchSearch200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchSearch200ResponseOcs
 */
export interface CoreUnifiedSearchSearch200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreUnifiedSearchSearch200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreUnifiedSearchResult}
     * @memberof CoreUnifiedSearchSearch200ResponseOcs
     */
    'data': CoreUnifiedSearchResult;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewDismiss200Response
 */
export interface CoreWhatsNewDismiss200Response {
    /**
     * 
     * @type {CoreWhatsNewDismiss200ResponseOcs}
     * @memberof CoreWhatsNewDismiss200Response
     */
    'ocs': CoreWhatsNewDismiss200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewDismiss200ResponseOcs
 */
export interface CoreWhatsNewDismiss200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreWhatsNewDismiss200ResponseOcs
     */
    'meta': OCSMeta;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewGet200Response
 */
export interface CoreWhatsNewGet200Response {
    /**
     * 
     * @type {CoreWhatsNewGet200ResponseOcs}
     * @memberof CoreWhatsNewGet200Response
     */
    'ocs': CoreWhatsNewGet200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewGet200ResponseOcs
 */
export interface CoreWhatsNewGet200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreWhatsNewGet200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreWhatsNewGet200ResponseOcsData}
     * @memberof CoreWhatsNewGet200ResponseOcs
     */
    'data': CoreWhatsNewGet200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewGet200ResponseOcsData
 */
export interface CoreWhatsNewGet200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof CoreWhatsNewGet200ResponseOcsData
     */
    'changelogURL': string;
    /**
     * 
     * @type {string}
     * @memberof CoreWhatsNewGet200ResponseOcsData
     */
    'product': string;
    /**
     * 
     * @type {string}
     * @memberof CoreWhatsNewGet200ResponseOcsData
     */
    'version': string;
    /**
     * 
     * @type {CoreWhatsNewGet200ResponseOcsDataWhatsNew}
     * @memberof CoreWhatsNewGet200ResponseOcsData
     */
    'whatsNew'?: CoreWhatsNewGet200ResponseOcsDataWhatsNew;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewGet200ResponseOcsDataWhatsNew
 */
export interface CoreWhatsNewGet200ResponseOcsDataWhatsNew {
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreWhatsNewGet200ResponseOcsDataWhatsNew
     */
    'regular': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreWhatsNewGet200ResponseOcsDataWhatsNew
     */
    'admin': Array<string>;
}
/**
 * 
 * @export
 * @interface CoreWipeCheckWipe200Response
 */
export interface CoreWipeCheckWipe200Response {
    /**
     * 
     * @type {boolean}
     * @memberof CoreWipeCheckWipe200Response
     */
    'wipe': boolean;
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgetItems200Response
 */
export interface DashboardDashboardApiGetWidgetItems200Response {
    /**
     * 
     * @type {DashboardDashboardApiGetWidgetItems200ResponseOcs}
     * @memberof DashboardDashboardApiGetWidgetItems200Response
     */
    'ocs': DashboardDashboardApiGetWidgetItems200ResponseOcs;
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgetItems200ResponseOcs
 */
export interface DashboardDashboardApiGetWidgetItems200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof DashboardDashboardApiGetWidgetItems200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {{ [key: string]: Array<DashboardWidgetItem>; }}
     * @memberof DashboardDashboardApiGetWidgetItems200ResponseOcs
     */
    'data': { [key: string]: Array<DashboardWidgetItem>; };
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgetItemsV2200Response
 */
export interface DashboardDashboardApiGetWidgetItemsV2200Response {
    /**
     * 
     * @type {DashboardDashboardApiGetWidgetItemsV2200ResponseOcs}
     * @memberof DashboardDashboardApiGetWidgetItemsV2200Response
     */
    'ocs': DashboardDashboardApiGetWidgetItemsV2200ResponseOcs;
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgetItemsV2200ResponseOcs
 */
export interface DashboardDashboardApiGetWidgetItemsV2200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof DashboardDashboardApiGetWidgetItemsV2200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {{ [key: string]: DashboardWidgetItems; }}
     * @memberof DashboardDashboardApiGetWidgetItemsV2200ResponseOcs
     */
    'data': { [key: string]: DashboardWidgetItems; };
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgets200Response
 */
export interface DashboardDashboardApiGetWidgets200Response {
    /**
     * 
     * @type {DashboardDashboardApiGetWidgets200ResponseOcs}
     * @memberof DashboardDashboardApiGetWidgets200Response
     */
    'ocs': DashboardDashboardApiGetWidgets200ResponseOcs;
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgets200ResponseOcs
 */
export interface DashboardDashboardApiGetWidgets200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof DashboardDashboardApiGetWidgets200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<DashboardWidget>}
     * @memberof DashboardDashboardApiGetWidgets200ResponseOcs
     */
    'data': Array<DashboardWidget>;
}
/**
 * 
 * @export
 * @interface DashboardWidget
 */
export interface DashboardWidget {
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof DashboardWidget
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'icon_class': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'icon_url': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'widget_url': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DashboardWidget
     */
    'item_icons_round': boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof DashboardWidget
     */
    'item_api_versions': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof DashboardWidget
     */
    'reload_interval': number;
    /**
     * 
     * @type {Array<DashboardWidgetButtonsInner>}
     * @memberof DashboardWidget
     */
    'buttons'?: Array<DashboardWidgetButtonsInner>;
}
/**
 * 
 * @export
 * @interface DashboardWidgetButtonsInner
 */
export interface DashboardWidgetButtonsInner {
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetButtonsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetButtonsInner
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetButtonsInner
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface DashboardWidgetItem
 */
export interface DashboardWidgetItem {
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'subtitle': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'iconUrl': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'overlayIconUrl': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'sinceId': string;
}
/**
 * 
 * @export
 * @interface DashboardWidgetItems
 */
export interface DashboardWidgetItems {
    /**
     * 
     * @type {Array<DashboardWidgetItem>}
     * @memberof DashboardWidgetItems
     */
    'items': Array<DashboardWidgetItem>;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItems
     */
    'emptyContentMessage': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItems
     */
    'halfEmptyContentMessage': string;
}
/**
 * 
 * @export
 * @interface DavCapabilities
 */
export interface DavCapabilities {
    /**
     * 
     * @type {DavCapabilitiesDav}
     * @memberof DavCapabilities
     */
    'dav': DavCapabilitiesDav;
}
/**
 * 
 * @export
 * @interface DavCapabilitiesDav
 */
export interface DavCapabilitiesDav {
    /**
     * 
     * @type {string}
     * @memberof DavCapabilitiesDav
     */
    'chunking': string;
    /**
     * 
     * @type {string}
     * @memberof DavCapabilitiesDav
     */
    'bulkupload'?: string;
}
/**
 * 
 * @export
 * @interface DavDirectGetUrl200Response
 */
export interface DavDirectGetUrl200Response {
    /**
     * 
     * @type {DavDirectGetUrl200ResponseOcs}
     * @memberof DavDirectGetUrl200Response
     */
    'ocs': DavDirectGetUrl200ResponseOcs;
}
/**
 * 
 * @export
 * @interface DavDirectGetUrl200ResponseOcs
 */
export interface DavDirectGetUrl200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof DavDirectGetUrl200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {DavDirectGetUrl200ResponseOcsData}
     * @memberof DavDirectGetUrl200ResponseOcs
     */
    'data': DavDirectGetUrl200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface DavDirectGetUrl200ResponseOcsData
 */
export interface DavDirectGetUrl200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof DavDirectGetUrl200ResponseOcsData
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface FilesCapabilities
 */
export interface FilesCapabilities {
    /**
     * 
     * @type {FilesCapabilitiesFiles}
     * @memberof FilesCapabilities
     */
    'files': FilesCapabilitiesFiles;
}
/**
 * 
 * @export
 * @interface FilesCapabilitiesFiles
 */
export interface FilesCapabilitiesFiles {
    /**
     * 
     * @type {boolean}
     * @memberof FilesCapabilitiesFiles
     */
    'bigfilechunking': boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof FilesCapabilitiesFiles
     */
    'blacklisted_files': Array<object>;
    /**
     * 
     * @type {FilesCapabilitiesFilesDirectEditing}
     * @memberof FilesCapabilitiesFiles
     */
    'directEditing': FilesCapabilitiesFilesDirectEditing;
}
/**
 * 
 * @export
 * @interface FilesCapabilitiesFilesDirectEditing
 */
export interface FilesCapabilitiesFilesDirectEditing {
    /**
     * 
     * @type {string}
     * @memberof FilesCapabilitiesFilesDirectEditing
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof FilesCapabilitiesFilesDirectEditing
     */
    'etag': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilesCapabilitiesFilesDirectEditing
     */
    'supportsFileId': boolean;
}
/**
 * 
 * @export
 * @interface FilesDirectEditingInfo200Response
 */
export interface FilesDirectEditingInfo200Response {
    /**
     * 
     * @type {FilesDirectEditingInfo200ResponseOcs}
     * @memberof FilesDirectEditingInfo200Response
     */
    'ocs': FilesDirectEditingInfo200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesDirectEditingInfo200ResponseOcs
 */
export interface FilesDirectEditingInfo200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesDirectEditingInfo200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesDirectEditingInfo200ResponseOcsData}
     * @memberof FilesDirectEditingInfo200ResponseOcs
     */
    'data': FilesDirectEditingInfo200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface FilesDirectEditingInfo200ResponseOcsData
 */
export interface FilesDirectEditingInfo200ResponseOcsData {
    /**
     * 
     * @type {{ [key: string]: FilesDirectEditingInfo200ResponseOcsDataEditorsValue; }}
     * @memberof FilesDirectEditingInfo200ResponseOcsData
     */
    'editors': { [key: string]: FilesDirectEditingInfo200ResponseOcsDataEditorsValue; };
    /**
     * 
     * @type {{ [key: string]: FilesDirectEditingInfo200ResponseOcsDataCreatorsValue; }}
     * @memberof FilesDirectEditingInfo200ResponseOcsData
     */
    'creators': { [key: string]: FilesDirectEditingInfo200ResponseOcsDataCreatorsValue; };
}
/**
 * 
 * @export
 * @interface FilesDirectEditingInfo200ResponseOcsDataCreatorsValue
 */
export interface FilesDirectEditingInfo200ResponseOcsDataCreatorsValue {
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataCreatorsValue
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataCreatorsValue
     */
    'editor': string;
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataCreatorsValue
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataCreatorsValue
     */
    'extension': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataCreatorsValue
     */
    'templates': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataCreatorsValue
     */
    'mimetypes': Array<string>;
}
/**
 * 
 * @export
 * @interface FilesDirectEditingInfo200ResponseOcsDataEditorsValue
 */
export interface FilesDirectEditingInfo200ResponseOcsDataEditorsValue {
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataEditorsValue
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataEditorsValue
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataEditorsValue
     */
    'mimetypes': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataEditorsValue
     */
    'optionalMimetypes': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof FilesDirectEditingInfo200ResponseOcsDataEditorsValue
     */
    'secure': boolean;
}
/**
 * 
 * @export
 * @interface FilesDirectEditingTemplates200Response
 */
export interface FilesDirectEditingTemplates200Response {
    /**
     * 
     * @type {FilesDirectEditingTemplates200ResponseOcs}
     * @memberof FilesDirectEditingTemplates200Response
     */
    'ocs': FilesDirectEditingTemplates200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesDirectEditingTemplates200ResponseOcs
 */
export interface FilesDirectEditingTemplates200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesDirectEditingTemplates200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesDirectEditingTemplates200ResponseOcsData}
     * @memberof FilesDirectEditingTemplates200ResponseOcs
     */
    'data': FilesDirectEditingTemplates200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface FilesDirectEditingTemplates200ResponseOcsData
 */
export interface FilesDirectEditingTemplates200ResponseOcsData {
    /**
     * 
     * @type {{ [key: string]: FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue; }}
     * @memberof FilesDirectEditingTemplates200ResponseOcsData
     */
    'templates': { [key: string]: FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue; };
}
/**
 * 
 * @export
 * @interface FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue
 */
export interface FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue {
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue
     */
    'preview': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue
     */
    'extension': string;
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingTemplates200ResponseOcsDataTemplatesValue
     */
    'mimetype': string;
}
/**
 * 
 * @export
 * @interface FilesExternalApiGetUserMounts200Response
 */
export interface FilesExternalApiGetUserMounts200Response {
    /**
     * 
     * @type {FilesExternalApiGetUserMounts200ResponseOcs}
     * @memberof FilesExternalApiGetUserMounts200Response
     */
    'ocs': FilesExternalApiGetUserMounts200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesExternalApiGetUserMounts200ResponseOcs
 */
export interface FilesExternalApiGetUserMounts200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesExternalApiGetUserMounts200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<FilesExternalMount>}
     * @memberof FilesExternalApiGetUserMounts200ResponseOcs
     */
    'data': Array<FilesExternalMount>;
}
/**
 * 
 * @export
 * @interface FilesExternalMount
 */
export interface FilesExternalMount {
    /**
     * 
     * @type {string}
     * @memberof FilesExternalMount
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalMount
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalMount
     */
    'type': FilesExternalMountTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalMount
     */
    'backend': string;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalMount
     */
    'scope': FilesExternalMountScopeEnum;
    /**
     * 
     * @type {number}
     * @memberof FilesExternalMount
     */
    'permissions': number;
    /**
     * 
     * @type {number}
     * @memberof FilesExternalMount
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalMount
     */
    'class': string;
    /**
     * 
     * @type {FilesExternalStorageConfig}
     * @memberof FilesExternalMount
     */
    'config': FilesExternalStorageConfig;
}

export const FilesExternalMountTypeEnum = {
    Dir: 'dir'
} as const;

export type FilesExternalMountTypeEnum = typeof FilesExternalMountTypeEnum[keyof typeof FilesExternalMountTypeEnum];
export const FilesExternalMountScopeEnum = {
    System: 'system',
    Personal: 'personal'
} as const;

export type FilesExternalMountScopeEnum = typeof FilesExternalMountScopeEnum[keyof typeof FilesExternalMountScopeEnum];

/**
 * 
 * @export
 * @interface FilesExternalStorageConfig
 */
export interface FilesExternalStorageConfig {
    /**
     * 
     * @type {Array<string>}
     * @memberof FilesExternalStorageConfig
     */
    'applicableGroups'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilesExternalStorageConfig
     */
    'applicableUsers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalStorageConfig
     */
    'authMechanism': string;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalStorageConfig
     */
    'backend': string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FilesExternalStorageConfig
     */
    'backendOptions': { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof FilesExternalStorageConfig
     */
    'id'?: number;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FilesExternalStorageConfig
     */
    'mountOptions'?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof FilesExternalStorageConfig
     */
    'mountPoint': string;
    /**
     * 
     * @type {number}
     * @memberof FilesExternalStorageConfig
     */
    'priority'?: number;
    /**
     * 
     * @type {number}
     * @memberof FilesExternalStorageConfig
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalStorageConfig
     */
    'statusMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesExternalStorageConfig
     */
    'type': FilesExternalStorageConfigTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FilesExternalStorageConfig
     */
    'userProvided': boolean;
}

export const FilesExternalStorageConfigTypeEnum = {
    Personal: 'personal',
    System: 'system'
} as const;

export type FilesExternalStorageConfigTypeEnum = typeof FilesExternalStorageConfigTypeEnum[keyof typeof FilesExternalStorageConfigTypeEnum];

/**
 * 
 * @export
 * @interface FilesOpenLocalEditorCreate200Response
 */
export interface FilesOpenLocalEditorCreate200Response {
    /**
     * 
     * @type {FilesOpenLocalEditorCreate200ResponseOcs}
     * @memberof FilesOpenLocalEditorCreate200Response
     */
    'ocs': FilesOpenLocalEditorCreate200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesOpenLocalEditorCreate200ResponseOcs
 */
export interface FilesOpenLocalEditorCreate200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesOpenLocalEditorCreate200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesOpenLocalEditorCreate200ResponseOcsData}
     * @memberof FilesOpenLocalEditorCreate200ResponseOcs
     */
    'data': FilesOpenLocalEditorCreate200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface FilesOpenLocalEditorCreate200ResponseOcsData
 */
export interface FilesOpenLocalEditorCreate200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof FilesOpenLocalEditorCreate200ResponseOcsData
     */
    'userId': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesOpenLocalEditorCreate200ResponseOcsData
     */
    'pathHash': string;
    /**
     * 
     * @type {number}
     * @memberof FilesOpenLocalEditorCreate200ResponseOcsData
     */
    'expirationTime': number;
    /**
     * 
     * @type {string}
     * @memberof FilesOpenLocalEditorCreate200ResponseOcsData
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface FilesOpenLocalEditorValidate200Response
 */
export interface FilesOpenLocalEditorValidate200Response {
    /**
     * 
     * @type {FilesOpenLocalEditorValidate200ResponseOcs}
     * @memberof FilesOpenLocalEditorValidate200Response
     */
    'ocs': FilesOpenLocalEditorValidate200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesOpenLocalEditorValidate200ResponseOcs
 */
export interface FilesOpenLocalEditorValidate200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesOpenLocalEditorValidate200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesOpenLocalEditorValidate200ResponseOcsData}
     * @memberof FilesOpenLocalEditorValidate200ResponseOcs
     */
    'data': FilesOpenLocalEditorValidate200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface FilesOpenLocalEditorValidate200ResponseOcsData
 */
export interface FilesOpenLocalEditorValidate200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof FilesOpenLocalEditorValidate200ResponseOcsData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof FilesOpenLocalEditorValidate200ResponseOcsData
     */
    'pathHash': string;
    /**
     * 
     * @type {number}
     * @memberof FilesOpenLocalEditorValidate200ResponseOcsData
     */
    'expirationTime': number;
    /**
     * 
     * @type {string}
     * @memberof FilesOpenLocalEditorValidate200ResponseOcsData
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface FilesRemindersApiGet200Response
 */
export interface FilesRemindersApiGet200Response {
    /**
     * 
     * @type {FilesRemindersApiGet200ResponseOcs}
     * @memberof FilesRemindersApiGet200Response
     */
    'ocs': FilesRemindersApiGet200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesRemindersApiGet200ResponseOcs
 */
export interface FilesRemindersApiGet200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesRemindersApiGet200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesRemindersApiGet200ResponseOcsData}
     * @memberof FilesRemindersApiGet200ResponseOcs
     */
    'data': FilesRemindersApiGet200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface FilesRemindersApiGet200ResponseOcsData
 */
export interface FilesRemindersApiGet200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof FilesRemindersApiGet200ResponseOcsData
     */
    'dueDate': string | null;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilities
 */
export interface FilesSharingCapabilities {
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharing}
     * @memberof FilesSharingCapabilities
     */
    'files_sharing': FilesSharingCapabilitiesFilesSharing;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharing
 */
export interface FilesSharingCapabilitiesFilesSharing {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'api_enabled': boolean;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingPublic}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'public': FilesSharingCapabilitiesFilesSharingPublic;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingUser}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'user': FilesSharingCapabilitiesFilesSharingUser;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'resharing': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'group_sharing'?: boolean;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingGroup}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'group'?: FilesSharingCapabilitiesFilesSharingGroup;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'default_permissions'?: number;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingFederation}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'federation': FilesSharingCapabilitiesFilesSharingFederation;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingSharee}
     * @memberof FilesSharingCapabilitiesFilesSharing
     */
    'sharee': FilesSharingCapabilitiesFilesSharingSharee;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharingFederation
 */
export interface FilesSharingCapabilitiesFilesSharingFederation {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingFederation
     */
    'outgoing': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingFederation
     */
    'incoming': boolean;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingUserExpireDate}
     * @memberof FilesSharingCapabilitiesFilesSharingFederation
     */
    'expire_date': FilesSharingCapabilitiesFilesSharingUserExpireDate;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingUserExpireDate}
     * @memberof FilesSharingCapabilitiesFilesSharingFederation
     */
    'expire_date_supported': FilesSharingCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharingGroup
 */
export interface FilesSharingCapabilitiesFilesSharingGroup {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingGroup
     */
    'enabled': boolean;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingUserExpireDate}
     * @memberof FilesSharingCapabilitiesFilesSharingGroup
     */
    'expire_date'?: FilesSharingCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharingPublic
 */
export interface FilesSharingCapabilitiesFilesSharingPublic {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'enabled': boolean;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingPublicPassword}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'password'?: FilesSharingCapabilitiesFilesSharingPublicPassword;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'multiple_links'?: boolean;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingPublicExpireDate}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'expire_date'?: FilesSharingCapabilitiesFilesSharingPublicExpireDate;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingPublicExpireDate}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'expire_date_internal'?: FilesSharingCapabilitiesFilesSharingPublicExpireDate;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingPublicExpireDate}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'expire_date_remote'?: FilesSharingCapabilitiesFilesSharingPublicExpireDate;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'send_mail'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'upload'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublic
     */
    'upload_files_drop'?: boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharingPublicExpireDate
 */
export interface FilesSharingCapabilitiesFilesSharingPublicExpireDate {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublicExpireDate
     */
    'enabled': boolean;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingCapabilitiesFilesSharingPublicExpireDate
     */
    'days'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublicExpireDate
     */
    'enforced'?: boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharingPublicPassword
 */
export interface FilesSharingCapabilitiesFilesSharingPublicPassword {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublicPassword
     */
    'enforced': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingPublicPassword
     */
    'askForOptionalPassword': boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharingSharee
 */
export interface FilesSharingCapabilitiesFilesSharingSharee {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingSharee
     */
    'query_lookup_default': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingSharee
     */
    'always_show_unique': boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharingUser
 */
export interface FilesSharingCapabilitiesFilesSharingUser {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingUser
     */
    'send_mail': boolean;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingUserExpireDate}
     * @memberof FilesSharingCapabilitiesFilesSharingUser
     */
    'expire_date'?: FilesSharingCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilitiesFilesSharingUserExpireDate
 */
export interface FilesSharingCapabilitiesFilesSharingUserExpireDate {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingCapabilitiesFilesSharingUserExpireDate
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingDeletedShare
 */
export interface FilesSharingDeletedShare {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'share_type': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'uid_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'displayname_owner': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'permissions': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'stime': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'uid_file_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'displayname_file_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'item_type': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'mimetype': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'storage': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'item_source': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'file_source': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'file_parent': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'file_target': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'expiration': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'share_with': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'share_with_displayname': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'share_with_link': string | null;
}
/**
 * 
 * @export
 * @interface FilesSharingDeletedShareapiList200Response
 */
export interface FilesSharingDeletedShareapiList200Response {
    /**
     * 
     * @type {FilesSharingDeletedShareapiList200ResponseOcs}
     * @memberof FilesSharingDeletedShareapiList200Response
     */
    'ocs': FilesSharingDeletedShareapiList200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingDeletedShareapiList200ResponseOcs
 */
export interface FilesSharingDeletedShareapiList200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingDeletedShareapiList200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<FilesSharingDeletedShare>}
     * @memberof FilesSharingDeletedShareapiList200ResponseOcs
     */
    'data': Array<FilesSharingDeletedShare>;
}
/**
 * 
 * @export
 * @interface FilesSharingLookup
 */
export interface FilesSharingLookup {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingLookup
     */
    'value': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingLookup
     */
    'verified': number;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteGetShare200Response
 */
export interface FilesSharingRemoteGetShare200Response {
    /**
     * 
     * @type {FilesSharingRemoteGetShare200ResponseOcs}
     * @memberof FilesSharingRemoteGetShare200Response
     */
    'ocs': FilesSharingRemoteGetShare200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteGetShare200ResponseOcs
 */
export interface FilesSharingRemoteGetShare200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingRemoteGetShare200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesSharingRemoteShare}
     * @memberof FilesSharingRemoteGetShare200ResponseOcs
     */
    'data': FilesSharingRemoteShare;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteGetShares200Response
 */
export interface FilesSharingRemoteGetShares200Response {
    /**
     * 
     * @type {FilesSharingRemoteGetShares200ResponseOcs}
     * @memberof FilesSharingRemoteGetShares200Response
     */
    'ocs': FilesSharingRemoteGetShares200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteGetShares200ResponseOcs
 */
export interface FilesSharingRemoteGetShares200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingRemoteGetShares200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<FilesSharingRemoteShare>}
     * @memberof FilesSharingRemoteGetShares200ResponseOcs
     */
    'data': Array<FilesSharingRemoteShare>;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteShare
 */
export interface FilesSharingRemoteShare {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingRemoteShare
     */
    'accepted': boolean;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'file_id': number | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'mimetype': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'mountpoint': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'mtime': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'owner': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'parent': number | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'permissions': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'remote': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'remote_id': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'share_token': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'share_type': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'type': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShare
 */
export interface FilesSharingShare {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'attributes': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShare
     */
    'can_delete': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShare
     */
    'can_edit': boolean;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'displayname_file_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'displayname_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'expiration': string | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'file_parent': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'file_source': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'file_target': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShare
     */
    'has_preview': boolean;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'hide_download': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'item_mtime': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'item_permissions'?: number;
    /**
     * 
     * @type {FilesSharingShareItemSize}
     * @memberof FilesSharingShare
     */
    'item_size': FilesSharingShareItemSize;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'item_source': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'item_type': FilesSharingShareItemTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'mail_send': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'mimetype': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'note': string;
    /**
     * 
     * @type {any}
     * @memberof FilesSharingShare
     */
    'parent': any | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'password_expiration_time'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'path': string | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'permissions': number;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShare
     */
    'send_password_by_talk'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'share_type': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with_avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with_displayname'?: string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with_displayname_unique'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with_link'?: string;
    /**
     * 
     * @type {FilesSharingShareStatus}
     * @memberof FilesSharingShare
     */
    'status'?: FilesSharingShareStatus;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'stime': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'storage': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'storage_id': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'token': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'uid_file_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'uid_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'url'?: string;
}

export const FilesSharingShareItemTypeEnum = {
    File: 'file',
    Folder: 'folder'
} as const;

export type FilesSharingShareItemTypeEnum = typeof FilesSharingShareItemTypeEnum[keyof typeof FilesSharingShareItemTypeEnum];

/**
 * 
 * @export
 * @interface FilesSharingShareInfo
 */
export interface FilesSharingShareInfo {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'parentId': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'mtime': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareInfo
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'permissions': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareInfo
     */
    'mimetype': string;
    /**
     * 
     * @type {FilesSharingShareInfoSize}
     * @memberof FilesSharingShareInfo
     */
    'size': FilesSharingShareInfoSize;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareInfo
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareInfo
     */
    'etag': string;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof FilesSharingShareInfo
     */
    'children'?: Array<{ [key: string]: object; }>;
}
/**
 * @type FilesSharingShareInfoSize
 * @export
 */
export type FilesSharingShareInfoSize = number;

/**
 * @type FilesSharingShareItemSize
 * @export
 */
export type FilesSharingShareItemSize = number;

/**
 * 
 * @export
 * @interface FilesSharingShareStatus
 */
export interface FilesSharingShareStatus {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareStatus
     */
    'clearAt'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareStatus
     */
    'icon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareStatus
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareStatus
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareapiCreateShare200Response
 */
export interface FilesSharingShareapiCreateShare200Response {
    /**
     * 
     * @type {FilesSharingShareapiCreateShare200ResponseOcs}
     * @memberof FilesSharingShareapiCreateShare200Response
     */
    'ocs': FilesSharingShareapiCreateShare200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingShareapiCreateShare200ResponseOcs
 */
export interface FilesSharingShareapiCreateShare200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingShareapiCreateShare200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesSharingShare}
     * @memberof FilesSharingShareapiCreateShare200ResponseOcs
     */
    'data': FilesSharingShare;
}
/**
 * 
 * @export
 * @interface FilesSharingShareapiGetShares200Response
 */
export interface FilesSharingShareapiGetShares200Response {
    /**
     * 
     * @type {FilesSharingShareapiGetShares200ResponseOcs}
     * @memberof FilesSharingShareapiGetShares200Response
     */
    'ocs': FilesSharingShareapiGetShares200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingShareapiGetShares200ResponseOcs
 */
export interface FilesSharingShareapiGetShares200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingShareapiGetShares200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<FilesSharingShare>}
     * @memberof FilesSharingShareapiGetShares200ResponseOcs
     */
    'data': Array<FilesSharingShare>;
}
/**
 * 
 * @export
 * @interface FilesSharingSharee
 */
export interface FilesSharingSharee {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingSharee
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingSharee
     */
    'label': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeCircle
 */
export interface FilesSharingShareeCircle {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeCircle
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircle
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircle
     */
    'shareWithDescription': string;
    /**
     * 
     * @type {FilesSharingShareeCircleAllOfValue}
     * @memberof FilesSharingShareeCircle
     */
    'value': FilesSharingShareeCircleAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeCircleAllOfValue
 */
export interface FilesSharingShareeCircleAllOfValue {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeCircleAllOfValue
     */
    'shareType': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircleAllOfValue
     */
    'shareWith': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircleAllOfValue
     */
    'circle': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeEmail
 */
export interface FilesSharingShareeEmail {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeEmail
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'shareWithDisplayNameUnique': string;
    /**
     * 
     * @type {FilesSharingShareeValue}
     * @memberof FilesSharingShareeEmail
     */
    'value': FilesSharingShareeValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeLookup
 */
export interface FilesSharingShareeLookup {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeLookup
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeLookup
     */
    'label': string;
    /**
     * 
     * @type {FilesSharingShareeLookupAllOfExtra}
     * @memberof FilesSharingShareeLookup
     */
    'extra': FilesSharingShareeLookupAllOfExtra;
    /**
     * 
     * @type {FilesSharingShareeLookupAllOfValue}
     * @memberof FilesSharingShareeLookup
     */
    'value': FilesSharingShareeLookupAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeLookupAllOfExtra
 */
export interface FilesSharingShareeLookupAllOfExtra {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'federationId': string;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'name': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'email': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'address': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'website': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'twitter': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'phone': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'twitter_signature': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'website_signature': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'userid': FilesSharingLookup;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeLookupAllOfValue
 */
export interface FilesSharingShareeLookupAllOfValue {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeLookupAllOfValue
     */
    'shareType': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeLookupAllOfValue
     */
    'shareWith': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShareeLookupAllOfValue
     */
    'globalScale': boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemote
 */
export interface FilesSharingShareeRemote {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeRemote
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemote
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemote
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemote
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemote
     */
    'type': string;
    /**
     * 
     * @type {FilesSharingShareeRemoteAllOfValue}
     * @memberof FilesSharingShareeRemote
     */
    'value': FilesSharingShareeRemoteAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemoteAllOfValue
 */
export interface FilesSharingShareeRemoteAllOfValue {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeRemoteAllOfValue
     */
    'shareType': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteAllOfValue
     */
    'shareWith': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteAllOfValue
     */
    'server': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemoteGroup
 */
export interface FilesSharingShareeRemoteGroup {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'guid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'name': string;
    /**
     * 
     * @type {FilesSharingShareeRemoteAllOfValue}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'value': FilesSharingShareeRemoteAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeUser
 */
export interface FilesSharingShareeUser {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeUser
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUser
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUser
     */
    'subline': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUser
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUser
     */
    'shareWithDisplayNameUnique': string;
    /**
     * 
     * @type {FilesSharingShareeUserAllOfStatus}
     * @memberof FilesSharingShareeUser
     */
    'status': FilesSharingShareeUserAllOfStatus;
    /**
     * 
     * @type {FilesSharingShareeValue}
     * @memberof FilesSharingShareeUser
     */
    'value': FilesSharingShareeValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeUserAllOfStatus
 */
export interface FilesSharingShareeUserAllOfStatus {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOfStatus
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOfStatus
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOfStatus
     */
    'icon': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeUserAllOfStatus
     */
    'clearAt': number | null;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeValue
 */
export interface FilesSharingShareeValue {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeValue
     */
    'shareType': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeValue
     */
    'shareWith': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesRecommendedResult
 */
export interface FilesSharingShareesRecommendedResult {
    /**
     * 
     * @type {FilesSharingShareesRecommendedResultExact}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'exact': FilesSharingShareesRecommendedResultExact;
    /**
     * 
     * @type {Array<FilesSharingShareeEmail>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'emails': Array<FilesSharingShareeEmail>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'groups': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemoteGroup>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'remote_groups': Array<FilesSharingShareeRemoteGroup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemote>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'remotes': Array<FilesSharingShareeRemote>;
    /**
     * 
     * @type {Array<FilesSharingShareeUser>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'users': Array<FilesSharingShareeUser>;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesRecommendedResultExact
 */
export interface FilesSharingShareesRecommendedResultExact {
    /**
     * 
     * @type {Array<FilesSharingShareeEmail>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'emails': Array<FilesSharingShareeEmail>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'groups': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemoteGroup>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'remote_groups': Array<FilesSharingShareeRemoteGroup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemote>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'remotes': Array<FilesSharingShareeRemote>;
    /**
     * 
     * @type {Array<FilesSharingShareeUser>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'users': Array<FilesSharingShareeUser>;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesSearchResult
 */
export interface FilesSharingShareesSearchResult {
    /**
     * 
     * @type {FilesSharingShareesSearchResultExact}
     * @memberof FilesSharingShareesSearchResult
     */
    'exact': FilesSharingShareesSearchResultExact;
    /**
     * 
     * @type {Array<FilesSharingShareeCircle>}
     * @memberof FilesSharingShareesSearchResult
     */
    'circles': Array<FilesSharingShareeCircle>;
    /**
     * 
     * @type {Array<FilesSharingShareeEmail>}
     * @memberof FilesSharingShareesSearchResult
     */
    'emails': Array<FilesSharingShareeEmail>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesSearchResult
     */
    'groups': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeLookup>}
     * @memberof FilesSharingShareesSearchResult
     */
    'lookup': Array<FilesSharingShareeLookup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemoteGroup>}
     * @memberof FilesSharingShareesSearchResult
     */
    'remote_groups': Array<FilesSharingShareeRemoteGroup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemote>}
     * @memberof FilesSharingShareesSearchResult
     */
    'remotes': Array<FilesSharingShareeRemote>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesSearchResult
     */
    'rooms': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeUser>}
     * @memberof FilesSharingShareesSearchResult
     */
    'users': Array<FilesSharingShareeUser>;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShareesSearchResult
     */
    'lookupEnabled': boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesSearchResultExact
 */
export interface FilesSharingShareesSearchResultExact {
    /**
     * 
     * @type {Array<FilesSharingShareeCircle>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'circles': Array<FilesSharingShareeCircle>;
    /**
     * 
     * @type {Array<FilesSharingShareeEmail>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'emails': Array<FilesSharingShareeEmail>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'groups': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemoteGroup>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'remote_groups': Array<FilesSharingShareeRemoteGroup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemote>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'remotes': Array<FilesSharingShareeRemote>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'rooms': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeUser>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'users': Array<FilesSharingShareeUser>;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesapiFindRecommended200Response
 */
export interface FilesSharingShareesapiFindRecommended200Response {
    /**
     * 
     * @type {FilesSharingShareesapiFindRecommended200ResponseOcs}
     * @memberof FilesSharingShareesapiFindRecommended200Response
     */
    'ocs': FilesSharingShareesapiFindRecommended200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesapiFindRecommended200ResponseOcs
 */
export interface FilesSharingShareesapiFindRecommended200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingShareesapiFindRecommended200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesSharingShareesRecommendedResult}
     * @memberof FilesSharingShareesapiFindRecommended200ResponseOcs
     */
    'data': FilesSharingShareesRecommendedResult;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesapiSearch200Response
 */
export interface FilesSharingShareesapiSearch200Response {
    /**
     * 
     * @type {FilesSharingShareesapiSearch200ResponseOcs}
     * @memberof FilesSharingShareesapiSearch200Response
     */
    'ocs': FilesSharingShareesapiSearch200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesapiSearch200ResponseOcs
 */
export interface FilesSharingShareesapiSearch200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingShareesapiSearch200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesSharingShareesSearchResult}
     * @memberof FilesSharingShareesapiSearch200ResponseOcs
     */
    'data': FilesSharingShareesSearchResult;
}
/**
 * 
 * @export
 * @interface FilesTemplate
 */
export interface FilesTemplate {
    /**
     * 
     * @type {string}
     * @memberof FilesTemplate
     */
    'templateType': string;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplate
     */
    'templateId': string;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplate
     */
    'basename': string;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplate
     */
    'etag': string;
    /**
     * 
     * @type {number}
     * @memberof FilesTemplate
     */
    'fileid': number;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplate
     */
    'filename': string;
    /**
     * 
     * @type {number}
     * @memberof FilesTemplate
     */
    'lastmod': number;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplate
     */
    'mime': string;
    /**
     * 
     * @type {number}
     * @memberof FilesTemplate
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplate
     */
    'type': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilesTemplate
     */
    'hasPreview': boolean;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplate
     */
    'previewUrl': string | null;
}
/**
 * 
 * @export
 * @interface FilesTemplateCreate200Response
 */
export interface FilesTemplateCreate200Response {
    /**
     * 
     * @type {FilesTemplateCreate200ResponseOcs}
     * @memberof FilesTemplateCreate200Response
     */
    'ocs': FilesTemplateCreate200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesTemplateCreate200ResponseOcs
 */
export interface FilesTemplateCreate200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesTemplateCreate200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesTemplateFile}
     * @memberof FilesTemplateCreate200ResponseOcs
     */
    'data': FilesTemplateFile;
}
/**
 * 
 * @export
 * @interface FilesTemplateFile
 */
export interface FilesTemplateFile {
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFile
     */
    'basename': string;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFile
     */
    'etag': string;
    /**
     * 
     * @type {number}
     * @memberof FilesTemplateFile
     */
    'fileid': number;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFile
     */
    'filename': string | null;
    /**
     * 
     * @type {number}
     * @memberof FilesTemplateFile
     */
    'lastmod': number;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFile
     */
    'mime': string;
    /**
     * 
     * @type {number}
     * @memberof FilesTemplateFile
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFile
     */
    'type': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilesTemplateFile
     */
    'hasPreview': boolean;
}
/**
 * 
 * @export
 * @interface FilesTemplateFileCreator
 */
export interface FilesTemplateFileCreator {
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFileCreator
     */
    'app': string;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFileCreator
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFileCreator
     */
    'extension': string;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFileCreator
     */
    'iconClass': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilesTemplateFileCreator
     */
    'mimetypes': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof FilesTemplateFileCreator
     */
    'ratio': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateFileCreator
     */
    'actionLabel': string;
}
/**
 * 
 * @export
 * @interface FilesTemplateList200Response
 */
export interface FilesTemplateList200Response {
    /**
     * 
     * @type {FilesTemplateList200ResponseOcs}
     * @memberof FilesTemplateList200Response
     */
    'ocs': FilesTemplateList200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesTemplateList200ResponseOcs
 */
export interface FilesTemplateList200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesTemplateList200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<FilesTemplateFileCreator>}
     * @memberof FilesTemplateList200ResponseOcs
     */
    'data': Array<FilesTemplateFileCreator>;
}
/**
 * 
 * @export
 * @interface FilesTemplatePath200Response
 */
export interface FilesTemplatePath200Response {
    /**
     * 
     * @type {FilesTemplatePath200ResponseOcs}
     * @memberof FilesTemplatePath200Response
     */
    'ocs': FilesTemplatePath200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesTemplatePath200ResponseOcs
 */
export interface FilesTemplatePath200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesTemplatePath200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesTemplatePath200ResponseOcsData}
     * @memberof FilesTemplatePath200ResponseOcs
     */
    'data': FilesTemplatePath200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface FilesTemplatePath200ResponseOcsData
 */
export interface FilesTemplatePath200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof FilesTemplatePath200ResponseOcsData
     */
    'template_path': string;
    /**
     * 
     * @type {Array<FilesTemplateFileCreator>}
     * @memberof FilesTemplatePath200ResponseOcsData
     */
    'templates': Array<FilesTemplateFileCreator>;
}
/**
 * 
 * @export
 * @interface FilesTrashbinCapabilities
 */
export interface FilesTrashbinCapabilities {
    /**
     * 
     * @type {FilesTrashbinCapabilitiesFiles}
     * @memberof FilesTrashbinCapabilities
     */
    'files': FilesTrashbinCapabilitiesFiles;
}
/**
 * 
 * @export
 * @interface FilesTrashbinCapabilitiesFiles
 */
export interface FilesTrashbinCapabilitiesFiles {
    /**
     * 
     * @type {boolean}
     * @memberof FilesTrashbinCapabilitiesFiles
     */
    'undelete': boolean;
}
/**
 * 
 * @export
 * @interface FilesVersionsCapabilities
 */
export interface FilesVersionsCapabilities {
    /**
     * 
     * @type {FilesVersionsCapabilitiesFiles}
     * @memberof FilesVersionsCapabilities
     */
    'files': FilesVersionsCapabilitiesFiles;
}
/**
 * 
 * @export
 * @interface FilesVersionsCapabilitiesFiles
 */
export interface FilesVersionsCapabilitiesFiles {
    /**
     * 
     * @type {boolean}
     * @memberof FilesVersionsCapabilitiesFiles
     */
    'versioning': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesVersionsCapabilitiesFiles
     */
    'version_labeling': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesVersionsCapabilitiesFiles
     */
    'version_deletion': boolean;
}
/**
 * 
 * @export
 * @interface OCSMeta
 */
export interface OCSMeta {
    /**
     * 
     * @type {string}
     * @memberof OCSMeta
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof OCSMeta
     */
    'statuscode': number;
    /**
     * 
     * @type {string}
     * @memberof OCSMeta
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof OCSMeta
     */
    'totalitems'?: string;
    /**
     * 
     * @type {string}
     * @memberof OCSMeta
     */
    'itemsperpage'?: string;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetApps200Response
 */
export interface ProvisioningApiAppConfigGetApps200Response {
    /**
     * 
     * @type {ProvisioningApiAppConfigGetApps200ResponseOcs}
     * @memberof ProvisioningApiAppConfigGetApps200Response
     */
    'ocs': ProvisioningApiAppConfigGetApps200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetApps200ResponseOcs
 */
export interface ProvisioningApiAppConfigGetApps200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiAppConfigGetApps200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiAppConfigGetApps200ResponseOcsData}
     * @memberof ProvisioningApiAppConfigGetApps200ResponseOcs
     */
    'data': ProvisioningApiAppConfigGetApps200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetApps200ResponseOcsData
 */
export interface ProvisioningApiAppConfigGetApps200ResponseOcsData {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiAppConfigGetApps200ResponseOcsData
     */
    'data': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetValue200Response
 */
export interface ProvisioningApiAppConfigGetValue200Response {
    /**
     * 
     * @type {ProvisioningApiAppConfigGetValue200ResponseOcs}
     * @memberof ProvisioningApiAppConfigGetValue200Response
     */
    'ocs': ProvisioningApiAppConfigGetValue200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetValue200ResponseOcs
 */
export interface ProvisioningApiAppConfigGetValue200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiAppConfigGetValue200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiAppConfigGetValue200ResponseOcsData}
     * @memberof ProvisioningApiAppConfigGetValue200ResponseOcs
     */
    'data': ProvisioningApiAppConfigGetValue200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetValue200ResponseOcsData
 */
export interface ProvisioningApiAppConfigGetValue200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppConfigGetValue200ResponseOcsData
     */
    'data': string;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppInfo
 */
export interface ProvisioningApiAppInfo {
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiAppInfo
     */
    'active': boolean | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'activity': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'author': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'background-jobs': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'bugs': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'category': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'collaboration': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'commands': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'default_enable': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'dependencies': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'discussion': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'documentation': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'groups': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'id': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'info': object | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiAppInfo
     */
    'internal': boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiAppInfo
     */
    'level': number | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'licence': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'namespace': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'navigations': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'preview': object | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiAppInfo
     */
    'previewAsIcon': boolean | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'public': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'remote': object | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiAppInfo
     */
    'removable': boolean | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'repair-steps': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'repository': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'sabre': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'screenshot': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'settings': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'summary': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'trash': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'two-factor-providers': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'types': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'version': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'versions': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'website': object | null;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetAppInfo200Response
 */
export interface ProvisioningApiAppsGetAppInfo200Response {
    /**
     * 
     * @type {ProvisioningApiAppsGetAppInfo200ResponseOcs}
     * @memberof ProvisioningApiAppsGetAppInfo200Response
     */
    'ocs': ProvisioningApiAppsGetAppInfo200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetAppInfo200ResponseOcs
 */
export interface ProvisioningApiAppsGetAppInfo200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiAppsGetAppInfo200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiAppInfo}
     * @memberof ProvisioningApiAppsGetAppInfo200ResponseOcs
     */
    'data': ProvisioningApiAppInfo;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetApps200Response
 */
export interface ProvisioningApiAppsGetApps200Response {
    /**
     * 
     * @type {ProvisioningApiAppsGetApps200ResponseOcs}
     * @memberof ProvisioningApiAppsGetApps200Response
     */
    'ocs': ProvisioningApiAppsGetApps200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetApps200ResponseOcs
 */
export interface ProvisioningApiAppsGetApps200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiAppsGetApps200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiAppsGetApps200ResponseOcsData}
     * @memberof ProvisioningApiAppsGetApps200ResponseOcs
     */
    'data': ProvisioningApiAppsGetApps200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetApps200ResponseOcsData
 */
export interface ProvisioningApiAppsGetApps200ResponseOcsData {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiAppsGetApps200ResponseOcsData
     */
    'apps': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiCapabilities
 */
export interface ProvisioningApiCapabilities {
    /**
     * 
     * @type {ProvisioningApiCapabilitiesProvisioningApi}
     * @memberof ProvisioningApiCapabilities
     */
    'provisioning_api': ProvisioningApiCapabilitiesProvisioningApi;
}
/**
 * 
 * @export
 * @interface ProvisioningApiCapabilitiesProvisioningApi
 */
export interface ProvisioningApiCapabilitiesProvisioningApi {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiCapabilitiesProvisioningApi
     */
    'version': string;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiCapabilitiesProvisioningApi
     */
    'AccountPropertyScopesVersion': number;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiCapabilitiesProvisioningApi
     */
    'AccountPropertyScopesFederatedEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiCapabilitiesProvisioningApi
     */
    'AccountPropertyScopesPublishedEnabled': boolean;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupDetails
 */
export interface ProvisioningApiGroupDetails {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupDetails
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupDetails
     */
    'displayname': string;
    /**
     * 
     * @type {ProvisioningApiGroupDetailsUsercount}
     * @memberof ProvisioningApiGroupDetails
     */
    'usercount': ProvisioningApiGroupDetailsUsercount;
    /**
     * 
     * @type {ProvisioningApiGroupDetailsUsercount}
     * @memberof ProvisioningApiGroupDetails
     */
    'disabled': ProvisioningApiGroupDetailsUsercount;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiGroupDetails
     */
    'canAdd': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiGroupDetails
     */
    'canRemove': boolean;
}
/**
 * @type ProvisioningApiGroupDetailsUsercount
 * @export
 */
export type ProvisioningApiGroupDetailsUsercount = boolean | number;

/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsers200Response
 */
export interface ProvisioningApiGroupsGetGroupUsers200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsers200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetGroupUsers200Response
     */
    'ocs': ProvisioningApiGroupsGetGroupUsers200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsers200ResponseOcs
 */
export interface ProvisioningApiGroupsGetGroupUsers200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetGroupUsers200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsers200ResponseOcsData}
     * @memberof ProvisioningApiGroupsGetGroupUsers200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroupUsers200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsers200ResponseOcsData
 */
export interface ProvisioningApiGroupsGetGroupUsers200ResponseOcsData {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiGroupsGetGroupUsers200ResponseOcsData
     */
    'users': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsersDetails200Response
 */
export interface ProvisioningApiGroupsGetGroupUsersDetails200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200Response
     */
    'ocs': ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs
 */
export interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData
 */
export interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData {
    /**
     * 
     * @type {{ [key: string]: ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue; }}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData
     */
    'users': { [key: string]: ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue; };
}
/**
 * @type ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue
 * @export
 */
export type ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue = ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf | ProvisioningApiUserDetails;

/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf
 */
export interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroups200Response
 */
export interface ProvisioningApiGroupsGetGroups200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroups200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetGroups200Response
     */
    'ocs': ProvisioningApiGroupsGetGroups200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroups200ResponseOcs
 */
export interface ProvisioningApiGroupsGetGroups200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetGroups200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroups200ResponseOcsData}
     * @memberof ProvisioningApiGroupsGetGroups200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroups200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroups200ResponseOcsData
 */
export interface ProvisioningApiGroupsGetGroups200ResponseOcsData {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiGroupsGetGroups200ResponseOcsData
     */
    'groups': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupsDetails200Response
 */
export interface ProvisioningApiGroupsGetGroupsDetails200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupsDetails200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetGroupsDetails200Response
     */
    'ocs': ProvisioningApiGroupsGetGroupsDetails200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupsDetails200ResponseOcs
 */
export interface ProvisioningApiGroupsGetGroupsDetails200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetGroupsDetails200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData}
     * @memberof ProvisioningApiGroupsGetGroupsDetails200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData
 */
export interface ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData {
    /**
     * 
     * @type {Array<ProvisioningApiGroupDetails>}
     * @memberof ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData
     */
    'groups': Array<ProvisioningApiGroupDetails>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetSubAdminsOfGroup200Response
 */
export interface ProvisioningApiGroupsGetSubAdminsOfGroup200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetSubAdminsOfGroup200Response
     */
    'ocs': ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs
 */
export interface ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs
     */
    'data': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUserDetails
 */
export interface ProvisioningApiUserDetails {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiUserDetails
     */
    'additional_mail': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiUserDetails
     */
    'additional_mailScope'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'addressScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'avatarScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'backend': string;
    /**
     * 
     * @type {ProvisioningApiUserDetailsBackendCapabilities}
     * @memberof ProvisioningApiUserDetails
     */
    'backendCapabilities': ProvisioningApiUserDetailsBackendCapabilities;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'biography': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'biographyScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'display-name': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'displayname': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'displaynameScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'emailScope'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiUserDetails
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'fediverse': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'fediverseScope'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiUserDetails
     */
    'groups': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'headline': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'headlineScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'language': string;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetails
     */
    'lastLogin': number;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'manager': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'notify_email': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'organisation': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'organisationScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'phoneScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'profile_enabled': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'profile_enabledScope'?: string;
    /**
     * 
     * @type {ProvisioningApiUserDetailsQuota}
     * @memberof ProvisioningApiUserDetails
     */
    'quota': ProvisioningApiUserDetailsQuota;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'roleScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'storageLocation'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiUserDetails
     */
    'subadmin': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'twitter': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'twitterScope'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'website': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'websiteScope'?: string;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUserDetailsBackendCapabilities
 */
export interface ProvisioningApiUserDetailsBackendCapabilities {
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiUserDetailsBackendCapabilities
     */
    'setDisplayName': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiUserDetailsBackendCapabilities
     */
    'setPassword': boolean;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUserDetailsQuota
 */
export interface ProvisioningApiUserDetailsQuota {
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'free'?: number;
    /**
     * 
     * @type {ProvisioningApiUserDetailsQuotaQuota}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'quota'?: ProvisioningApiUserDetailsQuotaQuota;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'relative'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'used'?: number;
}
/**
 * @type ProvisioningApiUserDetailsQuotaQuota
 * @export
 */
export type ProvisioningApiUserDetailsQuotaQuota = number | string;

/**
 * 
 * @export
 * @interface ProvisioningApiUsersAddUser200Response
 */
export interface ProvisioningApiUsersAddUser200Response {
    /**
     * 
     * @type {ProvisioningApiUsersAddUser200ResponseOcs}
     * @memberof ProvisioningApiUsersAddUser200Response
     */
    'ocs': ProvisioningApiUsersAddUser200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersAddUser200ResponseOcs
 */
export interface ProvisioningApiUsersAddUser200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiUsersAddUser200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf}
     * @memberof ProvisioningApiUsersAddUser200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersGetUser200Response
 */
export interface ProvisioningApiUsersGetUser200Response {
    /**
     * 
     * @type {ProvisioningApiUsersGetUser200ResponseOcs}
     * @memberof ProvisioningApiUsersGetUser200Response
     */
    'ocs': ProvisioningApiUsersGetUser200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersGetUser200ResponseOcs
 */
export interface ProvisioningApiUsersGetUser200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiUsersGetUser200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiUserDetails}
     * @memberof ProvisioningApiUsersGetUser200ResponseOcs
     */
    'data': ProvisioningApiUserDetails;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersSearchByPhoneNumbers200Response
 */
export interface ProvisioningApiUsersSearchByPhoneNumbers200Response {
    /**
     * 
     * @type {ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs}
     * @memberof ProvisioningApiUsersSearchByPhoneNumbers200Response
     */
    'ocs': ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs
 */
export interface ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs
     */
    'data': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface SharebymailCapabilities
 */
export interface SharebymailCapabilities {
    /**
     * 
     * @type {SharebymailCapabilitiesFilesSharing}
     * @memberof SharebymailCapabilities
     */
    'files_sharing': SharebymailCapabilitiesFilesSharing;
}
/**
 * 
 * @export
 * @interface SharebymailCapabilitiesFilesSharing
 */
export interface SharebymailCapabilitiesFilesSharing {
    /**
     * 
     * @type {SharebymailCapabilitiesFilesSharingSharebymail}
     * @memberof SharebymailCapabilitiesFilesSharing
     */
    'sharebymail': SharebymailCapabilitiesFilesSharingSharebymail;
}
/**
 * 
 * @export
 * @interface SharebymailCapabilitiesFilesSharingSharebymail
 */
export interface SharebymailCapabilitiesFilesSharingSharebymail {
    /**
     * 
     * @type {boolean}
     * @memberof SharebymailCapabilitiesFilesSharingSharebymail
     */
    'enabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SharebymailCapabilitiesFilesSharingSharebymail
     */
    'send_password_by_mail': boolean;
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingUserExpireDate}
     * @memberof SharebymailCapabilitiesFilesSharingSharebymail
     */
    'upload_files_drop': FilesSharingCapabilitiesFilesSharingUserExpireDate;
    /**
     * 
     * @type {SharebymailCapabilitiesFilesSharingSharebymailPassword}
     * @memberof SharebymailCapabilitiesFilesSharingSharebymail
     */
    'password': SharebymailCapabilitiesFilesSharingSharebymailPassword;
    /**
     * 
     * @type {SharebymailCapabilitiesFilesSharingSharebymailPassword}
     * @memberof SharebymailCapabilitiesFilesSharingSharebymail
     */
    'expire_date': SharebymailCapabilitiesFilesSharingSharebymailPassword;
}
/**
 * 
 * @export
 * @interface SharebymailCapabilitiesFilesSharingSharebymailPassword
 */
export interface SharebymailCapabilitiesFilesSharingSharebymailPassword {
    /**
     * 
     * @type {boolean}
     * @memberof SharebymailCapabilitiesFilesSharingSharebymailPassword
     */
    'enabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SharebymailCapabilitiesFilesSharingSharebymailPassword
     */
    'enforced': boolean;
}
/**
 * 
 * @export
 * @interface ThemingBackground
 */
export interface ThemingBackground {
    /**
     * 
     * @type {string}
     * @memberof ThemingBackground
     */
    'backgroundImage': string | null;
    /**
     * 
     * @type {string}
     * @memberof ThemingBackground
     */
    'backgroundColor': string;
    /**
     * 
     * @type {number}
     * @memberof ThemingBackground
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface ThemingPublicCapabilities
 */
export interface ThemingPublicCapabilities {
    /**
     * 
     * @type {ThemingPublicCapabilitiesTheming}
     * @memberof ThemingPublicCapabilities
     */
    'theming': ThemingPublicCapabilitiesTheming;
}
/**
 * 
 * @export
 * @interface ThemingPublicCapabilitiesTheming
 */
export interface ThemingPublicCapabilitiesTheming {
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'slogan': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'color': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'color-text': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'color-element': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'color-element-bright': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'color-element-dark': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'logo': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'background': string;
    /**
     * 
     * @type {boolean}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'background-plain': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'background-default': boolean;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'logoheader': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingPublicCapabilitiesTheming
     */
    'favicon': string;
}
/**
 * 
 * @export
 * @interface ThemingThemingGetManifest200Response
 */
export interface ThemingThemingGetManifest200Response {
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'short_name': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'start_url': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'theme_color': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'background_color': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'description': string;
    /**
     * 
     * @type {Array<ThemingThemingGetManifest200ResponseIconsInner>}
     * @memberof ThemingThemingGetManifest200Response
     */
    'icons': Array<ThemingThemingGetManifest200ResponseIconsInner>;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'display': string;
}
/**
 * 
 * @export
 * @interface ThemingThemingGetManifest200ResponseIconsInner
 */
export interface ThemingThemingGetManifest200ResponseIconsInner {
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200ResponseIconsInner
     */
    'src': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200ResponseIconsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200ResponseIconsInner
     */
    'sizes': string;
}
/**
 * 
 * @export
 * @interface UpdatenotificationApiGetAppList200Response
 */
export interface UpdatenotificationApiGetAppList200Response {
    /**
     * 
     * @type {UpdatenotificationApiGetAppList200ResponseOcs}
     * @memberof UpdatenotificationApiGetAppList200Response
     */
    'ocs': UpdatenotificationApiGetAppList200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UpdatenotificationApiGetAppList200ResponseOcs
 */
export interface UpdatenotificationApiGetAppList200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UpdatenotificationApiGetAppList200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {UpdatenotificationApiGetAppList200ResponseOcsData}
     * @memberof UpdatenotificationApiGetAppList200ResponseOcs
     */
    'data': UpdatenotificationApiGetAppList200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface UpdatenotificationApiGetAppList200ResponseOcsData
 */
export interface UpdatenotificationApiGetAppList200ResponseOcsData {
    /**
     * 
     * @type {Array<UpdatenotificationApp>}
     * @memberof UpdatenotificationApiGetAppList200ResponseOcsData
     */
    'missing': Array<UpdatenotificationApp>;
    /**
     * 
     * @type {Array<UpdatenotificationApp>}
     * @memberof UpdatenotificationApiGetAppList200ResponseOcsData
     */
    'available': Array<UpdatenotificationApp>;
}
/**
 * 
 * @export
 * @interface UpdatenotificationApp
 */
export interface UpdatenotificationApp {
    /**
     * 
     * @type {string}
     * @memberof UpdatenotificationApp
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatenotificationApp
     */
    'appName': string;
}
/**
 * 
 * @export
 * @interface UserStatusCapabilities
 */
export interface UserStatusCapabilities {
    /**
     * 
     * @type {UserStatusCapabilitiesUserStatus}
     * @memberof UserStatusCapabilities
     */
    'user_status': UserStatusCapabilitiesUserStatus;
}
/**
 * 
 * @export
 * @interface UserStatusCapabilitiesUserStatus
 */
export interface UserStatusCapabilitiesUserStatus {
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusCapabilitiesUserStatus
     */
    'enabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusCapabilitiesUserStatus
     */
    'restore': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusCapabilitiesUserStatus
     */
    'supports_emoji': boolean;
}
/**
 * 
 * @export
 * @interface UserStatusClearAt
 */
export interface UserStatusClearAt {
    /**
     * 
     * @type {string}
     * @memberof UserStatusClearAt
     */
    'type': UserStatusClearAtTypeEnum;
    /**
     * 
     * @type {UserStatusClearAtTime}
     * @memberof UserStatusClearAt
     */
    'time': UserStatusClearAtTime;
}

export const UserStatusClearAtTypeEnum = {
    Period: 'period',
    EndOf: 'end-of'
} as const;

export type UserStatusClearAtTypeEnum = typeof UserStatusClearAtTypeEnum[keyof typeof UserStatusClearAtTypeEnum];

/**
 * @type UserStatusClearAtTime
 * @export
 */
export type UserStatusClearAtTime = UserStatusClearAtTimeType | number;

/**
 * 
 * @export
 * @enum {string}
 */

export const UserStatusClearAtTimeType = {
    Day: 'day',
    Week: 'week'
} as const;

export type UserStatusClearAtTimeType = typeof UserStatusClearAtTimeType[keyof typeof UserStatusClearAtTimeType];


/**
 * 
 * @export
 * @interface UserStatusPredefined
 */
export interface UserStatusPredefined {
    /**
     * 
     * @type {string}
     * @memberof UserStatusPredefined
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPredefined
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPredefined
     */
    'message': string;
    /**
     * 
     * @type {UserStatusClearAt}
     * @memberof UserStatusPredefined
     */
    'clearAt': UserStatusClearAt;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusPredefined
     */
    'visible': boolean | null;
}
/**
 * 
 * @export
 * @interface UserStatusPredefinedStatusFindAll200Response
 */
export interface UserStatusPredefinedStatusFindAll200Response {
    /**
     * 
     * @type {UserStatusPredefinedStatusFindAll200ResponseOcs}
     * @memberof UserStatusPredefinedStatusFindAll200Response
     */
    'ocs': UserStatusPredefinedStatusFindAll200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusPredefinedStatusFindAll200ResponseOcs
 */
export interface UserStatusPredefinedStatusFindAll200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusPredefinedStatusFindAll200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<UserStatusPredefined>}
     * @memberof UserStatusPredefinedStatusFindAll200ResponseOcs
     */
    'data': Array<UserStatusPredefined>;
}
/**
 * 
 * @export
 * @interface UserStatusPrivate
 */
export interface UserStatusPrivate {
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'message': string | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'icon': string | null;
    /**
     * 
     * @type {number}
     * @memberof UserStatusPrivate
     */
    'clearAt': number | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'messageId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusPrivate
     */
    'messageIsPredefined': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusPrivate
     */
    'statusIsUserDefined': boolean;
}
/**
 * 
 * @export
 * @interface UserStatusPublic
 */
export interface UserStatusPublic {
    /**
     * 
     * @type {string}
     * @memberof UserStatusPublic
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPublic
     */
    'message': string | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPublic
     */
    'icon': string | null;
    /**
     * 
     * @type {number}
     * @memberof UserStatusPublic
     */
    'clearAt': number | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPublic
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface UserStatusStatusesFind200Response
 */
export interface UserStatusStatusesFind200Response {
    /**
     * 
     * @type {UserStatusStatusesFind200ResponseOcs}
     * @memberof UserStatusStatusesFind200Response
     */
    'ocs': UserStatusStatusesFind200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusStatusesFind200ResponseOcs
 */
export interface UserStatusStatusesFind200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusStatusesFind200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {UserStatusPublic}
     * @memberof UserStatusStatusesFind200ResponseOcs
     */
    'data': UserStatusPublic;
}
/**
 * 
 * @export
 * @interface UserStatusStatusesFindAll200Response
 */
export interface UserStatusStatusesFindAll200Response {
    /**
     * 
     * @type {UserStatusStatusesFindAll200ResponseOcs}
     * @memberof UserStatusStatusesFindAll200Response
     */
    'ocs': UserStatusStatusesFindAll200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusStatusesFindAll200ResponseOcs
 */
export interface UserStatusStatusesFindAll200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusStatusesFindAll200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<UserStatusPublic>}
     * @memberof UserStatusStatusesFindAll200ResponseOcs
     */
    'data': Array<UserStatusPublic>;
}
/**
 * 
 * @export
 * @interface UserStatusUserStatusGetStatus200Response
 */
export interface UserStatusUserStatusGetStatus200Response {
    /**
     * 
     * @type {UserStatusUserStatusGetStatus200ResponseOcs}
     * @memberof UserStatusUserStatusGetStatus200Response
     */
    'ocs': UserStatusUserStatusGetStatus200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusUserStatusGetStatus200ResponseOcs
 */
export interface UserStatusUserStatusGetStatus200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusUserStatusGetStatus200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {UserStatusPrivate}
     * @memberof UserStatusUserStatusGetStatus200ResponseOcs
     */
    'data': UserStatusPrivate;
}
/**
 * 
 * @export
 * @interface UserStatusUserStatusRevertStatus200Response
 */
export interface UserStatusUserStatusRevertStatus200Response {
    /**
     * 
     * @type {UserStatusUserStatusRevertStatus200ResponseOcs}
     * @memberof UserStatusUserStatusRevertStatus200Response
     */
    'ocs': UserStatusUserStatusRevertStatus200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusUserStatusRevertStatus200ResponseOcs
 */
export interface UserStatusUserStatusRevertStatus200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusUserStatusRevertStatus200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {UserStatusUserStatusRevertStatus200ResponseOcsData}
     * @memberof UserStatusUserStatusRevertStatus200ResponseOcs
     */
    'data': UserStatusUserStatusRevertStatus200ResponseOcsData;
}
/**
 * @type UserStatusUserStatusRevertStatus200ResponseOcsData
 * @export
 */
export type UserStatusUserStatusRevertStatus200ResponseOcsData = UserStatusPrivate;

/**
 * 
 * @export
 * @interface WeatherStatusCapabilities
 */
export interface WeatherStatusCapabilities {
    /**
     * 
     * @type {FilesSharingCapabilitiesFilesSharingUserExpireDate}
     * @memberof WeatherStatusCapabilities
     */
    'weather_status': FilesSharingCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecast
 */
export interface WeatherStatusForecast {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusForecast
     */
    'time': string;
    /**
     * 
     * @type {WeatherStatusForecastData}
     * @memberof WeatherStatusForecast
     */
    'data': WeatherStatusForecastData;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastData
 */
export interface WeatherStatusForecastData {
    /**
     * 
     * @type {WeatherStatusForecastDataInstant}
     * @memberof WeatherStatusForecastData
     */
    'instant': WeatherStatusForecastDataInstant;
    /**
     * 
     * @type {WeatherStatusForecastDataNext12Hours}
     * @memberof WeatherStatusForecastData
     */
    'next_12_hours': WeatherStatusForecastDataNext12Hours;
    /**
     * 
     * @type {WeatherStatusForecastDataNext1Hours}
     * @memberof WeatherStatusForecastData
     */
    'next_1_hours': WeatherStatusForecastDataNext1Hours;
    /**
     * 
     * @type {WeatherStatusForecastDataNext6Hours}
     * @memberof WeatherStatusForecastData
     */
    'next_6_hours': WeatherStatusForecastDataNext6Hours;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataInstant
 */
export interface WeatherStatusForecastDataInstant {
    /**
     * 
     * @type {WeatherStatusForecastDataInstantDetails}
     * @memberof WeatherStatusForecastDataInstant
     */
    'details': WeatherStatusForecastDataInstantDetails;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataInstantDetails
 */
export interface WeatherStatusForecastDataInstantDetails {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'air_pressure_at_sea_level': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'air_temperature': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'cloud_area_fraction': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'cloud_area_fraction_high': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'cloud_area_fraction_low': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'cloud_area_fraction_medium': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'dew_point_temperature': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'fog_area_fraction': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'relative_humidity': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'ultraviolet_index_clear_sky': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'wind_from_direction': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'wind_speed': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'wind_speed_of_gust': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext12Hours
 */
export interface WeatherStatusForecastDataNext12Hours {
    /**
     * 
     * @type {WeatherStatusForecastDataNext12HoursSummary}
     * @memberof WeatherStatusForecastDataNext12Hours
     */
    'summary': WeatherStatusForecastDataNext12HoursSummary;
    /**
     * 
     * @type {WeatherStatusForecastDataNext12HoursDetails}
     * @memberof WeatherStatusForecastDataNext12Hours
     */
    'details': WeatherStatusForecastDataNext12HoursDetails;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext12HoursDetails
 */
export interface WeatherStatusForecastDataNext12HoursDetails {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext12HoursDetails
     */
    'probability_of_precipitation': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext12HoursSummary
 */
export interface WeatherStatusForecastDataNext12HoursSummary {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusForecastDataNext12HoursSummary
     */
    'symbol_code': string;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext1Hours
 */
export interface WeatherStatusForecastDataNext1Hours {
    /**
     * 
     * @type {WeatherStatusForecastDataNext12HoursSummary}
     * @memberof WeatherStatusForecastDataNext1Hours
     */
    'summary': WeatherStatusForecastDataNext12HoursSummary;
    /**
     * 
     * @type {WeatherStatusForecastDataNext1HoursDetails}
     * @memberof WeatherStatusForecastDataNext1Hours
     */
    'details': WeatherStatusForecastDataNext1HoursDetails;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext1HoursDetails
 */
export interface WeatherStatusForecastDataNext1HoursDetails {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'precipitation_amount': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'precipitation_amount_max': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'precipitation_amount_min': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'probability_of_precipitation': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'probability_of_thunder': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext6Hours
 */
export interface WeatherStatusForecastDataNext6Hours {
    /**
     * 
     * @type {WeatherStatusForecastDataNext12HoursSummary}
     * @memberof WeatherStatusForecastDataNext6Hours
     */
    'summary': WeatherStatusForecastDataNext12HoursSummary;
    /**
     * 
     * @type {WeatherStatusForecastDataNext6HoursDetails}
     * @memberof WeatherStatusForecastDataNext6Hours
     */
    'details': WeatherStatusForecastDataNext6HoursDetails;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext6HoursDetails
 */
export interface WeatherStatusForecastDataNext6HoursDetails {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'air_temperature_max': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'air_temperature_min': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'precipitation_amount': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'precipitation_amount_max': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'precipitation_amount_min': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'probability_of_precipitation': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetForecast200Response
 */
export interface WeatherStatusWeatherStatusGetForecast200Response {
    /**
     * 
     * @type {WeatherStatusWeatherStatusGetForecast200ResponseOcs}
     * @memberof WeatherStatusWeatherStatusGetForecast200Response
     */
    'ocs': WeatherStatusWeatherStatusGetForecast200ResponseOcs;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetForecast200ResponseOcs
 */
export interface WeatherStatusWeatherStatusGetForecast200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof WeatherStatusWeatherStatusGetForecast200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<WeatherStatusForecast>}
     * @memberof WeatherStatusWeatherStatusGetForecast200ResponseOcs
     */
    'data': Array<WeatherStatusForecast>;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetLocation200Response
 */
export interface WeatherStatusWeatherStatusGetLocation200Response {
    /**
     * 
     * @type {WeatherStatusWeatherStatusGetLocation200ResponseOcs}
     * @memberof WeatherStatusWeatherStatusGetLocation200Response
     */
    'ocs': WeatherStatusWeatherStatusGetLocation200ResponseOcs;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetLocation200ResponseOcs
 */
export interface WeatherStatusWeatherStatusGetLocation200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {WeatherStatusWeatherStatusGetLocation200ResponseOcsData}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcs
     */
    'data': WeatherStatusWeatherStatusGetLocation200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetLocation200ResponseOcsData
 */
export interface WeatherStatusWeatherStatusGetLocation200ResponseOcsData {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcsData
     */
    'lat': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcsData
     */
    'lon': number;
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcsData
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcsData
     */
    'mode': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusUsePersonalAddress200Response
 */
export interface WeatherStatusWeatherStatusUsePersonalAddress200Response {
    /**
     * 
     * @type {WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200Response
     */
    'ocs': WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs
 */
export interface WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs
     */
    'data': WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
 */
export interface WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData {
    /**
     * 
     * @type {boolean}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
     */
    'success': boolean;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
     */
    'lat': number | null;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
     */
    'lon': number | null;
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
     */
    'address': string | null;
}

/**
 * CoreApi - axios parameter creator
 * @export
 */
export const CoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGetStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status.php`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreApi - functional programming interface
 * @export
 */
export const CoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreGetStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreGetStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreApi - factory interface
 * @export
 */
export const CoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGetStatus(options?: AxiosRequestConfig): AxiosPromise<CoreStatus> {
            return localVarFp.coreGetStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
export class CoreApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    public coreGetStatus(options?: AxiosRequestConfig) {
        return CoreApiFp(this.configuration).coreGetStatus(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreAppPasswordApi - axios parameter creator
 * @export
 */
export const CoreAppPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordDeleteAppPassword: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreAppPasswordDeleteAppPassword', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/apppassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordGetAppPassword: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreAppPasswordGetAppPassword', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/getapppassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rotate app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordRotateAppPassword: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreAppPasswordRotateAppPassword', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/apppassword/rotate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreAppPasswordApi - functional programming interface
 * @export
 */
export const CoreAppPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreAppPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAppPasswordDeleteAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAppPasswordDeleteAppPassword(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAppPasswordGetAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreAppPasswordGetAppPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAppPasswordGetAppPassword(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rotate app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAppPasswordRotateAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreAppPasswordGetAppPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAppPasswordRotateAppPassword(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreAppPasswordApi - factory interface
 * @export
 */
export const CoreAppPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreAppPasswordApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete app password
         * @param {CoreAppPasswordApiCoreAppPasswordDeleteAppPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordDeleteAppPassword(requestParameters: CoreAppPasswordApiCoreAppPasswordDeleteAppPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.coreAppPasswordDeleteAppPassword(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create app password
         * @param {CoreAppPasswordApiCoreAppPasswordGetAppPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordGetAppPassword(requestParameters: CoreAppPasswordApiCoreAppPasswordGetAppPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<CoreAppPasswordGetAppPassword200Response> {
            return localVarFp.coreAppPasswordGetAppPassword(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rotate app password
         * @param {CoreAppPasswordApiCoreAppPasswordRotateAppPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordRotateAppPassword(requestParameters: CoreAppPasswordApiCoreAppPasswordRotateAppPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<CoreAppPasswordGetAppPassword200Response> {
            return localVarFp.coreAppPasswordRotateAppPassword(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreAppPasswordDeleteAppPassword operation in CoreAppPasswordApi.
 * @export
 * @interface CoreAppPasswordApiCoreAppPasswordDeleteAppPasswordRequest
 */
export interface CoreAppPasswordApiCoreAppPasswordDeleteAppPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreAppPasswordApiCoreAppPasswordDeleteAppPassword
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreAppPasswordGetAppPassword operation in CoreAppPasswordApi.
 * @export
 * @interface CoreAppPasswordApiCoreAppPasswordGetAppPasswordRequest
 */
export interface CoreAppPasswordApiCoreAppPasswordGetAppPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreAppPasswordApiCoreAppPasswordGetAppPassword
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreAppPasswordRotateAppPassword operation in CoreAppPasswordApi.
 * @export
 * @interface CoreAppPasswordApiCoreAppPasswordRotateAppPasswordRequest
 */
export interface CoreAppPasswordApiCoreAppPasswordRotateAppPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreAppPasswordApiCoreAppPasswordRotateAppPassword
     */
    readonly oCSAPIRequest: string
}

/**
 * CoreAppPasswordApi - object-oriented interface
 * @export
 * @class CoreAppPasswordApi
 * @extends {BaseAPI}
 */
export class CoreAppPasswordApi extends BaseAPI {
    /**
     * 
     * @summary Delete app password
     * @param {CoreAppPasswordApiCoreAppPasswordDeleteAppPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAppPasswordApi
     */
    public coreAppPasswordDeleteAppPassword(requestParameters: CoreAppPasswordApiCoreAppPasswordDeleteAppPasswordRequest, options?: AxiosRequestConfig) {
        return CoreAppPasswordApiFp(this.configuration).coreAppPasswordDeleteAppPassword(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create app password
     * @param {CoreAppPasswordApiCoreAppPasswordGetAppPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAppPasswordApi
     */
    public coreAppPasswordGetAppPassword(requestParameters: CoreAppPasswordApiCoreAppPasswordGetAppPasswordRequest, options?: AxiosRequestConfig) {
        return CoreAppPasswordApiFp(this.configuration).coreAppPasswordGetAppPassword(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rotate app password
     * @param {CoreAppPasswordApiCoreAppPasswordRotateAppPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAppPasswordApi
     */
    public coreAppPasswordRotateAppPassword(requestParameters: CoreAppPasswordApiCoreAppPasswordRotateAppPasswordRequest, options?: AxiosRequestConfig) {
        return CoreAppPasswordApiFp(this.configuration).coreAppPasswordRotateAppPassword(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreAutoCompleteApi - axios parameter creator
 * @export
 */
export const CoreAutoCompleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Autocomplete a query
         * @param {string} search Text to search for
         * @param {string} oCSAPIRequest 
         * @param {string | null} [itemType] Type of the items to search for
         * @param {string | null} [itemId] ID of the items to search for
         * @param {string | null} [sorter] can be piped, top prio first, e.g.: \&quot;commenters|share-recipients\&quot;
         * @param {Array<number>} [shareTypes] Types of shares to search for
         * @param {number} [limit] Maximum number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAutoCompleteGet: async (search: string, oCSAPIRequest: string, itemType?: string | null, itemId?: string | null, sorter?: string | null, shareTypes?: Array<number>, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('coreAutoCompleteGet', 'search', search)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreAutoCompleteGet', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/autocomplete/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (sorter !== undefined) {
                localVarQueryParameter['sorter'] = sorter;
            }

            if (shareTypes) {
                localVarQueryParameter['shareTypes[]'] = shareTypes;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreAutoCompleteApi - functional programming interface
 * @export
 */
export const CoreAutoCompleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreAutoCompleteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Autocomplete a query
         * @param {string} search Text to search for
         * @param {string} oCSAPIRequest 
         * @param {string | null} [itemType] Type of the items to search for
         * @param {string | null} [itemId] ID of the items to search for
         * @param {string | null} [sorter] can be piped, top prio first, e.g.: \&quot;commenters|share-recipients\&quot;
         * @param {Array<number>} [shareTypes] Types of shares to search for
         * @param {number} [limit] Maximum number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAutoCompleteGet(search: string, oCSAPIRequest: string, itemType?: string | null, itemId?: string | null, sorter?: string | null, shareTypes?: Array<number>, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreAutoCompleteGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAutoCompleteGet(search, oCSAPIRequest, itemType, itemId, sorter, shareTypes, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreAutoCompleteApi - factory interface
 * @export
 */
export const CoreAutoCompleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreAutoCompleteApiFp(configuration)
    return {
        /**
         * 
         * @summary Autocomplete a query
         * @param {CoreAutoCompleteApiCoreAutoCompleteGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAutoCompleteGet(requestParameters: CoreAutoCompleteApiCoreAutoCompleteGetRequest, options?: AxiosRequestConfig): AxiosPromise<CoreAutoCompleteGet200Response> {
            return localVarFp.coreAutoCompleteGet(requestParameters.search, requestParameters.oCSAPIRequest, requestParameters.itemType, requestParameters.itemId, requestParameters.sorter, requestParameters.shareTypes, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreAutoCompleteGet operation in CoreAutoCompleteApi.
 * @export
 * @interface CoreAutoCompleteApiCoreAutoCompleteGetRequest
 */
export interface CoreAutoCompleteApiCoreAutoCompleteGetRequest {
    /**
     * Text to search for
     * @type {string}
     * @memberof CoreAutoCompleteApiCoreAutoCompleteGet
     */
    readonly search: string

    /**
     * 
     * @type {string}
     * @memberof CoreAutoCompleteApiCoreAutoCompleteGet
     */
    readonly oCSAPIRequest: string

    /**
     * Type of the items to search for
     * @type {string}
     * @memberof CoreAutoCompleteApiCoreAutoCompleteGet
     */
    readonly itemType?: string | null

    /**
     * ID of the items to search for
     * @type {string}
     * @memberof CoreAutoCompleteApiCoreAutoCompleteGet
     */
    readonly itemId?: string | null

    /**
     * can be piped, top prio first, e.g.: \&quot;commenters|share-recipients\&quot;
     * @type {string}
     * @memberof CoreAutoCompleteApiCoreAutoCompleteGet
     */
    readonly sorter?: string | null

    /**
     * Types of shares to search for
     * @type {Array<number>}
     * @memberof CoreAutoCompleteApiCoreAutoCompleteGet
     */
    readonly shareTypes?: Array<number>

    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof CoreAutoCompleteApiCoreAutoCompleteGet
     */
    readonly limit?: number
}

/**
 * CoreAutoCompleteApi - object-oriented interface
 * @export
 * @class CoreAutoCompleteApi
 * @extends {BaseAPI}
 */
export class CoreAutoCompleteApi extends BaseAPI {
    /**
     * 
     * @summary Autocomplete a query
     * @param {CoreAutoCompleteApiCoreAutoCompleteGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAutoCompleteApi
     */
    public coreAutoCompleteGet(requestParameters: CoreAutoCompleteApiCoreAutoCompleteGetRequest, options?: AxiosRequestConfig) {
        return CoreAutoCompleteApiFp(this.configuration).coreAutoCompleteGet(requestParameters.search, requestParameters.oCSAPIRequest, requestParameters.itemType, requestParameters.itemId, requestParameters.sorter, requestParameters.shareTypes, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreAvatarApi - axios parameter creator
 * @export
 */
export const CoreAvatarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAvatarGetAvatar: async (userId: string, size: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('coreAvatarGetAvatar', 'userId', userId)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('coreAvatarGetAvatar', 'size', size)
            const localVarPath = `/index.php/avatar/{userId}/{size}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the dark avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAvatarGetAvatarDark: async (userId: string, size: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('coreAvatarGetAvatarDark', 'userId', userId)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('coreAvatarGetAvatarDark', 'size', size)
            const localVarPath = `/index.php/avatar/{userId}/{size}/dark`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreAvatarApi - functional programming interface
 * @export
 */
export const CoreAvatarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreAvatarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAvatarGetAvatar(userId: string, size: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAvatarGetAvatar(userId, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the dark avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAvatarGetAvatarDark(userId: string, size: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAvatarGetAvatarDark(userId, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreAvatarApi - factory interface
 * @export
 */
export const CoreAvatarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreAvatarApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the avatar
         * @param {CoreAvatarApiCoreAvatarGetAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAvatarGetAvatar(requestParameters: CoreAvatarApiCoreAvatarGetAvatarRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.coreAvatarGetAvatar(requestParameters.userId, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the dark avatar
         * @param {CoreAvatarApiCoreAvatarGetAvatarDarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAvatarGetAvatarDark(requestParameters: CoreAvatarApiCoreAvatarGetAvatarDarkRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.coreAvatarGetAvatarDark(requestParameters.userId, requestParameters.size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreAvatarGetAvatar operation in CoreAvatarApi.
 * @export
 * @interface CoreAvatarApiCoreAvatarGetAvatarRequest
 */
export interface CoreAvatarApiCoreAvatarGetAvatarRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof CoreAvatarApiCoreAvatarGetAvatar
     */
    readonly userId: string

    /**
     * Size of the avatar
     * @type {number}
     * @memberof CoreAvatarApiCoreAvatarGetAvatar
     */
    readonly size: number
}

/**
 * Request parameters for coreAvatarGetAvatarDark operation in CoreAvatarApi.
 * @export
 * @interface CoreAvatarApiCoreAvatarGetAvatarDarkRequest
 */
export interface CoreAvatarApiCoreAvatarGetAvatarDarkRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof CoreAvatarApiCoreAvatarGetAvatarDark
     */
    readonly userId: string

    /**
     * Size of the avatar
     * @type {number}
     * @memberof CoreAvatarApiCoreAvatarGetAvatarDark
     */
    readonly size: number
}

/**
 * CoreAvatarApi - object-oriented interface
 * @export
 * @class CoreAvatarApi
 * @extends {BaseAPI}
 */
export class CoreAvatarApi extends BaseAPI {
    /**
     * 
     * @summary Get the avatar
     * @param {CoreAvatarApiCoreAvatarGetAvatarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAvatarApi
     */
    public coreAvatarGetAvatar(requestParameters: CoreAvatarApiCoreAvatarGetAvatarRequest, options?: AxiosRequestConfig) {
        return CoreAvatarApiFp(this.configuration).coreAvatarGetAvatar(requestParameters.userId, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the dark avatar
     * @param {CoreAvatarApiCoreAvatarGetAvatarDarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAvatarApi
     */
    public coreAvatarGetAvatarDark(requestParameters: CoreAvatarApiCoreAvatarGetAvatarDarkRequest, options?: AxiosRequestConfig) {
        return CoreAvatarApiFp(this.configuration).coreAvatarGetAvatarDark(requestParameters.userId, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreClientFlowLoginV2Api - axios parameter creator
 * @export
 */
export const CoreClientFlowLoginV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Init a login flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreClientFlowLoginV2Init: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/login/v2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poll the login flow credentials
         * @param {string} token Token of the flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreClientFlowLoginV2Poll: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('coreClientFlowLoginV2Poll', 'token', token)
            const localVarPath = `/index.php/login/v2/poll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreClientFlowLoginV2Api - functional programming interface
 * @export
 */
export const CoreClientFlowLoginV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreClientFlowLoginV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Init a login flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreClientFlowLoginV2Init(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreLoginFlowV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreClientFlowLoginV2Init(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poll the login flow credentials
         * @param {string} token Token of the flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreClientFlowLoginV2Poll(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreLoginFlowV2Credentials>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreClientFlowLoginV2Poll(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreClientFlowLoginV2Api - factory interface
 * @export
 */
export const CoreClientFlowLoginV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreClientFlowLoginV2ApiFp(configuration)
    return {
        /**
         * 
         * @summary Init a login flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreClientFlowLoginV2Init(options?: AxiosRequestConfig): AxiosPromise<CoreLoginFlowV2> {
            return localVarFp.coreClientFlowLoginV2Init(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poll the login flow credentials
         * @param {CoreClientFlowLoginV2ApiCoreClientFlowLoginV2PollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreClientFlowLoginV2Poll(requestParameters: CoreClientFlowLoginV2ApiCoreClientFlowLoginV2PollRequest, options?: AxiosRequestConfig): AxiosPromise<CoreLoginFlowV2Credentials> {
            return localVarFp.coreClientFlowLoginV2Poll(requestParameters.token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreClientFlowLoginV2Poll operation in CoreClientFlowLoginV2Api.
 * @export
 * @interface CoreClientFlowLoginV2ApiCoreClientFlowLoginV2PollRequest
 */
export interface CoreClientFlowLoginV2ApiCoreClientFlowLoginV2PollRequest {
    /**
     * Token of the flow
     * @type {string}
     * @memberof CoreClientFlowLoginV2ApiCoreClientFlowLoginV2Poll
     */
    readonly token: string
}

/**
 * CoreClientFlowLoginV2Api - object-oriented interface
 * @export
 * @class CoreClientFlowLoginV2Api
 * @extends {BaseAPI}
 */
export class CoreClientFlowLoginV2Api extends BaseAPI {
    /**
     * 
     * @summary Init a login flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreClientFlowLoginV2Api
     */
    public coreClientFlowLoginV2Init(options?: AxiosRequestConfig) {
        return CoreClientFlowLoginV2ApiFp(this.configuration).coreClientFlowLoginV2Init(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poll the login flow credentials
     * @param {CoreClientFlowLoginV2ApiCoreClientFlowLoginV2PollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreClientFlowLoginV2Api
     */
    public coreClientFlowLoginV2Poll(requestParameters: CoreClientFlowLoginV2ApiCoreClientFlowLoginV2PollRequest, options?: AxiosRequestConfig) {
        return CoreClientFlowLoginV2ApiFp(this.configuration).coreClientFlowLoginV2Poll(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreCollaborationResourcesApi - axios parameter creator
 * @export
 */
export const CoreCollaborationResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a resource to a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesAddResource: async (resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('coreCollaborationResourcesAddResource', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('coreCollaborationResourcesAddResource', 'resourceId', resourceId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('coreCollaborationResourcesAddResource', 'collectionId', collectionId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesAddResource', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a collection for a resource
         * @param {string} name Name of the collection
         * @param {string} baseResourceType Type of the base resource
         * @param {string} baseResourceId ID of the base resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesCreateCollectionOnResource: async (name: string, baseResourceType: string, baseResourceId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('coreCollaborationResourcesCreateCollectionOnResource', 'name', name)
            // verify required parameter 'baseResourceType' is not null or undefined
            assertParamExists('coreCollaborationResourcesCreateCollectionOnResource', 'baseResourceType', baseResourceType)
            // verify required parameter 'baseResourceId' is not null or undefined
            assertParamExists('coreCollaborationResourcesCreateCollectionOnResource', 'baseResourceId', baseResourceId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesCreateCollectionOnResource', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId}`
                .replace(`{${"baseResourceType"}}`, encodeURIComponent(String(baseResourceType)))
                .replace(`{${"baseResourceId"}}`, encodeURIComponent(String(baseResourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get collections by resource
         * @param {string} resourceType Type of the resource
         * @param {string} resourceId ID of the resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesGetCollectionsByResource: async (resourceType: string, resourceId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('coreCollaborationResourcesGetCollectionsByResource', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('coreCollaborationResourcesGetCollectionsByResource', 'resourceId', resourceId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesGetCollectionsByResource', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/{resourceType}/{resourceId}`
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a collection
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesListCollection: async (collectionId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('coreCollaborationResourcesListCollection', 'collectionId', collectionId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesListCollection', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a resource from a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesRemoveResource: async (resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('coreCollaborationResourcesRemoveResource', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('coreCollaborationResourcesRemoveResource', 'resourceId', resourceId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('coreCollaborationResourcesRemoveResource', 'collectionId', collectionId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesRemoveResource', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rename a collection
         * @param {string} collectionName New name
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesRenameCollection: async (collectionName: string, collectionId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('coreCollaborationResourcesRenameCollection', 'collectionName', collectionName)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('coreCollaborationResourcesRenameCollection', 'collectionId', collectionId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesRenameCollection', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (collectionName !== undefined) {
                localVarQueryParameter['collectionName'] = collectionName;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search for collections
         * @param {string} filter Filter collections
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesSearchCollections: async (filter: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('coreCollaborationResourcesSearchCollections', 'filter', filter)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesSearchCollections', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/search/{filter}`
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreCollaborationResourcesApi - functional programming interface
 * @export
 */
export const CoreCollaborationResourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreCollaborationResourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a resource to a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesAddResource(resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesAddResource(resourceType, resourceId, collectionId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a collection for a resource
         * @param {string} name Name of the collection
         * @param {string} baseResourceType Type of the base resource
         * @param {string} baseResourceId ID of the base resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesCreateCollectionOnResource(name: string, baseResourceType: string, baseResourceId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesCreateCollectionOnResource(name, baseResourceType, baseResourceId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get collections by resource
         * @param {string} resourceType Type of the resource
         * @param {string} resourceId ID of the resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesGetCollectionsByResource(resourceType: string, resourceId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesSearchCollections200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesGetCollectionsByResource(resourceType, resourceId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a collection
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesListCollection(collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesListCollection(collectionId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a resource from a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesRemoveResource(resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesRemoveResource(resourceType, resourceId, collectionId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rename a collection
         * @param {string} collectionName New name
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesRenameCollection(collectionName: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesRenameCollection(collectionName, collectionId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search for collections
         * @param {string} filter Filter collections
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesSearchCollections(filter: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesSearchCollections200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesSearchCollections(filter, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreCollaborationResourcesApi - factory interface
 * @export
 */
export const CoreCollaborationResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreCollaborationResourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a resource to a collection
         * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesAddResourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesAddResource(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesAddResourceRequest, options?: AxiosRequestConfig): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesAddResource(requestParameters.resourceType, requestParameters.resourceId, requestParameters.collectionId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a collection for a resource
         * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesCreateCollectionOnResource(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResourceRequest, options?: AxiosRequestConfig): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesCreateCollectionOnResource(requestParameters.name, requestParameters.baseResourceType, requestParameters.baseResourceId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get collections by resource
         * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesGetCollectionsByResource(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResourceRequest, options?: AxiosRequestConfig): AxiosPromise<CoreCollaborationResourcesSearchCollections200Response> {
            return localVarFp.coreCollaborationResourcesGetCollectionsByResource(requestParameters.resourceType, requestParameters.resourceId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a collection
         * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesListCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesListCollection(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesListCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesListCollection(requestParameters.collectionId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a resource from a collection
         * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesRemoveResource(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResourceRequest, options?: AxiosRequestConfig): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesRemoveResource(requestParameters.resourceType, requestParameters.resourceId, requestParameters.collectionId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rename a collection
         * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesRenameCollection(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesRenameCollection(requestParameters.collectionName, requestParameters.collectionId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search for collections
         * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesSearchCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesSearchCollections(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesSearchCollectionsRequest, options?: AxiosRequestConfig): AxiosPromise<CoreCollaborationResourcesSearchCollections200Response> {
            return localVarFp.coreCollaborationResourcesSearchCollections(requestParameters.filter, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreCollaborationResourcesAddResource operation in CoreCollaborationResourcesApi.
 * @export
 * @interface CoreCollaborationResourcesApiCoreCollaborationResourcesAddResourceRequest
 */
export interface CoreCollaborationResourcesApiCoreCollaborationResourcesAddResourceRequest {
    /**
     * Name of the resource
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesAddResource
     */
    readonly resourceType: string

    /**
     * ID of the resource
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesAddResource
     */
    readonly resourceId: string

    /**
     * ID of the collection
     * @type {number}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesAddResource
     */
    readonly collectionId: number

    /**
     * 
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesAddResource
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreCollaborationResourcesCreateCollectionOnResource operation in CoreCollaborationResourcesApi.
 * @export
 * @interface CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResourceRequest
 */
export interface CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResourceRequest {
    /**
     * Name of the collection
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResource
     */
    readonly name: string

    /**
     * Type of the base resource
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResource
     */
    readonly baseResourceType: string

    /**
     * ID of the base resource
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResource
     */
    readonly baseResourceId: string

    /**
     * 
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResource
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreCollaborationResourcesGetCollectionsByResource operation in CoreCollaborationResourcesApi.
 * @export
 * @interface CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResourceRequest
 */
export interface CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResourceRequest {
    /**
     * Type of the resource
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResource
     */
    readonly resourceType: string

    /**
     * ID of the resource
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResource
     */
    readonly resourceId: string

    /**
     * 
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResource
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreCollaborationResourcesListCollection operation in CoreCollaborationResourcesApi.
 * @export
 * @interface CoreCollaborationResourcesApiCoreCollaborationResourcesListCollectionRequest
 */
export interface CoreCollaborationResourcesApiCoreCollaborationResourcesListCollectionRequest {
    /**
     * ID of the collection
     * @type {number}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesListCollection
     */
    readonly collectionId: number

    /**
     * 
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesListCollection
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreCollaborationResourcesRemoveResource operation in CoreCollaborationResourcesApi.
 * @export
 * @interface CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResourceRequest
 */
export interface CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResourceRequest {
    /**
     * Name of the resource
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResource
     */
    readonly resourceType: string

    /**
     * ID of the resource
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResource
     */
    readonly resourceId: string

    /**
     * ID of the collection
     * @type {number}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResource
     */
    readonly collectionId: number

    /**
     * 
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResource
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreCollaborationResourcesRenameCollection operation in CoreCollaborationResourcesApi.
 * @export
 * @interface CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollectionRequest
 */
export interface CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollectionRequest {
    /**
     * New name
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollection
     */
    readonly collectionName: string

    /**
     * ID of the collection
     * @type {number}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollection
     */
    readonly collectionId: number

    /**
     * 
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollection
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreCollaborationResourcesSearchCollections operation in CoreCollaborationResourcesApi.
 * @export
 * @interface CoreCollaborationResourcesApiCoreCollaborationResourcesSearchCollectionsRequest
 */
export interface CoreCollaborationResourcesApiCoreCollaborationResourcesSearchCollectionsRequest {
    /**
     * Filter collections
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesSearchCollections
     */
    readonly filter: string

    /**
     * 
     * @type {string}
     * @memberof CoreCollaborationResourcesApiCoreCollaborationResourcesSearchCollections
     */
    readonly oCSAPIRequest: string
}

/**
 * CoreCollaborationResourcesApi - object-oriented interface
 * @export
 * @class CoreCollaborationResourcesApi
 * @extends {BaseAPI}
 */
export class CoreCollaborationResourcesApi extends BaseAPI {
    /**
     * 
     * @summary Add a resource to a collection
     * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesAddResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesAddResource(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesAddResourceRequest, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesAddResource(requestParameters.resourceType, requestParameters.resourceId, requestParameters.collectionId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a collection for a resource
     * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesCreateCollectionOnResource(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesCreateCollectionOnResourceRequest, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesCreateCollectionOnResource(requestParameters.name, requestParameters.baseResourceType, requestParameters.baseResourceId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get collections by resource
     * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesGetCollectionsByResource(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesGetCollectionsByResourceRequest, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesGetCollectionsByResource(requestParameters.resourceType, requestParameters.resourceId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a collection
     * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesListCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesListCollection(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesListCollectionRequest, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesListCollection(requestParameters.collectionId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a resource from a collection
     * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesRemoveResource(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesRemoveResourceRequest, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesRemoveResource(requestParameters.resourceType, requestParameters.resourceId, requestParameters.collectionId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rename a collection
     * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesRenameCollection(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesRenameCollectionRequest, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesRenameCollection(requestParameters.collectionName, requestParameters.collectionId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search for collections
     * @param {CoreCollaborationResourcesApiCoreCollaborationResourcesSearchCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesSearchCollections(requestParameters: CoreCollaborationResourcesApiCoreCollaborationResourcesSearchCollectionsRequest, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesSearchCollections(requestParameters.filter, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreGuestAvatarApi - axios parameter creator
 * @export
 */
export const CoreGuestAvatarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {number | null} [darkTheme] Return dark avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGuestAvatarGetAvatar: async (guestName: string, size: string, darkTheme?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestName' is not null or undefined
            assertParamExists('coreGuestAvatarGetAvatar', 'guestName', guestName)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('coreGuestAvatarGetAvatar', 'size', size)
            const localVarPath = `/index.php/avatar/guest/{guestName}/{size}`
                .replace(`{${"guestName"}}`, encodeURIComponent(String(guestName)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (darkTheme !== undefined) {
                localVarQueryParameter['darkTheme'] = darkTheme;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a dark guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGuestAvatarGetAvatarDark: async (guestName: string, size: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestName' is not null or undefined
            assertParamExists('coreGuestAvatarGetAvatarDark', 'guestName', guestName)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('coreGuestAvatarGetAvatarDark', 'size', size)
            const localVarPath = `/index.php/avatar/guest/{guestName}/{size}/dark`
                .replace(`{${"guestName"}}`, encodeURIComponent(String(guestName)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreGuestAvatarApi - functional programming interface
 * @export
 */
export const CoreGuestAvatarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreGuestAvatarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {number | null} [darkTheme] Return dark avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreGuestAvatarGetAvatar(guestName: string, size: string, darkTheme?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreGuestAvatarGetAvatar(guestName, size, darkTheme, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a dark guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreGuestAvatarGetAvatarDark(guestName: string, size: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreGuestAvatarGetAvatarDark(guestName, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreGuestAvatarApi - factory interface
 * @export
 */
export const CoreGuestAvatarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreGuestAvatarApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a guest avatar image response
         * @param {CoreGuestAvatarApiCoreGuestAvatarGetAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGuestAvatarGetAvatar(requestParameters: CoreGuestAvatarApiCoreGuestAvatarGetAvatarRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.coreGuestAvatarGetAvatar(requestParameters.guestName, requestParameters.size, requestParameters.darkTheme, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a dark guest avatar image response
         * @param {CoreGuestAvatarApiCoreGuestAvatarGetAvatarDarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGuestAvatarGetAvatarDark(requestParameters: CoreGuestAvatarApiCoreGuestAvatarGetAvatarDarkRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.coreGuestAvatarGetAvatarDark(requestParameters.guestName, requestParameters.size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreGuestAvatarGetAvatar operation in CoreGuestAvatarApi.
 * @export
 * @interface CoreGuestAvatarApiCoreGuestAvatarGetAvatarRequest
 */
export interface CoreGuestAvatarApiCoreGuestAvatarGetAvatarRequest {
    /**
     * The guest name, e.g. \&quot;Albert\&quot;
     * @type {string}
     * @memberof CoreGuestAvatarApiCoreGuestAvatarGetAvatar
     */
    readonly guestName: string

    /**
     * The desired avatar size, e.g. 64 for 64x64px
     * @type {string}
     * @memberof CoreGuestAvatarApiCoreGuestAvatarGetAvatar
     */
    readonly size: string

    /**
     * Return dark avatar
     * @type {number}
     * @memberof CoreGuestAvatarApiCoreGuestAvatarGetAvatar
     */
    readonly darkTheme?: number | null
}

/**
 * Request parameters for coreGuestAvatarGetAvatarDark operation in CoreGuestAvatarApi.
 * @export
 * @interface CoreGuestAvatarApiCoreGuestAvatarGetAvatarDarkRequest
 */
export interface CoreGuestAvatarApiCoreGuestAvatarGetAvatarDarkRequest {
    /**
     * The guest name, e.g. \&quot;Albert\&quot;
     * @type {string}
     * @memberof CoreGuestAvatarApiCoreGuestAvatarGetAvatarDark
     */
    readonly guestName: string

    /**
     * The desired avatar size, e.g. 64 for 64x64px
     * @type {string}
     * @memberof CoreGuestAvatarApiCoreGuestAvatarGetAvatarDark
     */
    readonly size: string
}

/**
 * CoreGuestAvatarApi - object-oriented interface
 * @export
 * @class CoreGuestAvatarApi
 * @extends {BaseAPI}
 */
export class CoreGuestAvatarApi extends BaseAPI {
    /**
     * 
     * @summary Returns a guest avatar image response
     * @param {CoreGuestAvatarApiCoreGuestAvatarGetAvatarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreGuestAvatarApi
     */
    public coreGuestAvatarGetAvatar(requestParameters: CoreGuestAvatarApiCoreGuestAvatarGetAvatarRequest, options?: AxiosRequestConfig) {
        return CoreGuestAvatarApiFp(this.configuration).coreGuestAvatarGetAvatar(requestParameters.guestName, requestParameters.size, requestParameters.darkTheme, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a dark guest avatar image response
     * @param {CoreGuestAvatarApiCoreGuestAvatarGetAvatarDarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreGuestAvatarApi
     */
    public coreGuestAvatarGetAvatarDark(requestParameters: CoreGuestAvatarApiCoreGuestAvatarGetAvatarDarkRequest, options?: AxiosRequestConfig) {
        return CoreGuestAvatarApiFp(this.configuration).coreGuestAvatarGetAvatarDark(requestParameters.guestName, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreHoverCardApi - axios parameter creator
 * @export
 */
export const CoreHoverCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the user details for a hovercard
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreHoverCardGetUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('coreHoverCardGetUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreHoverCardGetUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/hovercard/v1/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreHoverCardApi - functional programming interface
 * @export
 */
export const CoreHoverCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreHoverCardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the user details for a hovercard
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreHoverCardGetUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreHoverCardGetUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreHoverCardGetUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreHoverCardApi - factory interface
 * @export
 */
export const CoreHoverCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreHoverCardApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the user details for a hovercard
         * @param {CoreHoverCardApiCoreHoverCardGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreHoverCardGetUser(requestParameters: CoreHoverCardApiCoreHoverCardGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<CoreHoverCardGetUser200Response> {
            return localVarFp.coreHoverCardGetUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreHoverCardGetUser operation in CoreHoverCardApi.
 * @export
 * @interface CoreHoverCardApiCoreHoverCardGetUserRequest
 */
export interface CoreHoverCardApiCoreHoverCardGetUserRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof CoreHoverCardApiCoreHoverCardGetUser
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof CoreHoverCardApiCoreHoverCardGetUser
     */
    readonly oCSAPIRequest: string
}

/**
 * CoreHoverCardApi - object-oriented interface
 * @export
 * @class CoreHoverCardApi
 * @extends {BaseAPI}
 */
export class CoreHoverCardApi extends BaseAPI {
    /**
     * 
     * @summary Get the user details for a hovercard
     * @param {CoreHoverCardApiCoreHoverCardGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreHoverCardApi
     */
    public coreHoverCardGetUser(requestParameters: CoreHoverCardApiCoreHoverCardGetUserRequest, options?: AxiosRequestConfig) {
        return CoreHoverCardApiFp(this.configuration).coreHoverCardGetUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreNavigationApi - axios parameter creator
 * @export
 */
export const CoreNavigationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the apps navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreNavigationGetAppsNavigation: async (oCSAPIRequest: string, absolute?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreNavigationGetAppsNavigation', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/navigation/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (absolute !== undefined) {
                localVarQueryParameter['absolute'] = absolute;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the settings navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreNavigationGetSettingsNavigation: async (oCSAPIRequest: string, absolute?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreNavigationGetSettingsNavigation', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/navigation/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (absolute !== undefined) {
                localVarQueryParameter['absolute'] = absolute;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreNavigationApi - functional programming interface
 * @export
 */
export const CoreNavigationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreNavigationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the apps navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreNavigationGetAppsNavigation(oCSAPIRequest: string, absolute?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreNavigationGetAppsNavigation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreNavigationGetAppsNavigation(oCSAPIRequest, absolute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the settings navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreNavigationGetSettingsNavigation(oCSAPIRequest: string, absolute?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreNavigationGetAppsNavigation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreNavigationGetSettingsNavigation(oCSAPIRequest, absolute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreNavigationApi - factory interface
 * @export
 */
export const CoreNavigationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreNavigationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the apps navigation
         * @param {CoreNavigationApiCoreNavigationGetAppsNavigationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreNavigationGetAppsNavigation(requestParameters: CoreNavigationApiCoreNavigationGetAppsNavigationRequest, options?: AxiosRequestConfig): AxiosPromise<CoreNavigationGetAppsNavigation200Response> {
            return localVarFp.coreNavigationGetAppsNavigation(requestParameters.oCSAPIRequest, requestParameters.absolute, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the settings navigation
         * @param {CoreNavigationApiCoreNavigationGetSettingsNavigationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreNavigationGetSettingsNavigation(requestParameters: CoreNavigationApiCoreNavigationGetSettingsNavigationRequest, options?: AxiosRequestConfig): AxiosPromise<CoreNavigationGetAppsNavigation200Response> {
            return localVarFp.coreNavigationGetSettingsNavigation(requestParameters.oCSAPIRequest, requestParameters.absolute, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreNavigationGetAppsNavigation operation in CoreNavigationApi.
 * @export
 * @interface CoreNavigationApiCoreNavigationGetAppsNavigationRequest
 */
export interface CoreNavigationApiCoreNavigationGetAppsNavigationRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationApiCoreNavigationGetAppsNavigation
     */
    readonly oCSAPIRequest: string

    /**
     * Rewrite URLs to absolute ones
     * @type {number}
     * @memberof CoreNavigationApiCoreNavigationGetAppsNavigation
     */
    readonly absolute?: number
}

/**
 * Request parameters for coreNavigationGetSettingsNavigation operation in CoreNavigationApi.
 * @export
 * @interface CoreNavigationApiCoreNavigationGetSettingsNavigationRequest
 */
export interface CoreNavigationApiCoreNavigationGetSettingsNavigationRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationApiCoreNavigationGetSettingsNavigation
     */
    readonly oCSAPIRequest: string

    /**
     * Rewrite URLs to absolute ones
     * @type {number}
     * @memberof CoreNavigationApiCoreNavigationGetSettingsNavigation
     */
    readonly absolute?: number
}

/**
 * CoreNavigationApi - object-oriented interface
 * @export
 * @class CoreNavigationApi
 * @extends {BaseAPI}
 */
export class CoreNavigationApi extends BaseAPI {
    /**
     * 
     * @summary Get the apps navigation
     * @param {CoreNavigationApiCoreNavigationGetAppsNavigationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreNavigationApi
     */
    public coreNavigationGetAppsNavigation(requestParameters: CoreNavigationApiCoreNavigationGetAppsNavigationRequest, options?: AxiosRequestConfig) {
        return CoreNavigationApiFp(this.configuration).coreNavigationGetAppsNavigation(requestParameters.oCSAPIRequest, requestParameters.absolute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the settings navigation
     * @param {CoreNavigationApiCoreNavigationGetSettingsNavigationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreNavigationApi
     */
    public coreNavigationGetSettingsNavigation(requestParameters: CoreNavigationApiCoreNavigationGetSettingsNavigationRequest, options?: AxiosRequestConfig) {
        return CoreNavigationApiFp(this.configuration).coreNavigationGetSettingsNavigation(requestParameters.oCSAPIRequest, requestParameters.absolute, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreOcsApi - axios parameter creator
 * @export
 */
export const CoreOcsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the capabilities
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreOcsGetCapabilities: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreOcsGetCapabilities', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/capabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreOcsApi - functional programming interface
 * @export
 */
export const CoreOcsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreOcsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the capabilities
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreOcsGetCapabilities(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOcsGetCapabilities200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreOcsGetCapabilities(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreOcsApi - factory interface
 * @export
 */
export const CoreOcsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreOcsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the capabilities
         * @param {CoreOcsApiCoreOcsGetCapabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreOcsGetCapabilities(requestParameters: CoreOcsApiCoreOcsGetCapabilitiesRequest, options?: AxiosRequestConfig): AxiosPromise<CoreOcsGetCapabilities200Response> {
            return localVarFp.coreOcsGetCapabilities(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreOcsGetCapabilities operation in CoreOcsApi.
 * @export
 * @interface CoreOcsApiCoreOcsGetCapabilitiesRequest
 */
export interface CoreOcsApiCoreOcsGetCapabilitiesRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreOcsApiCoreOcsGetCapabilities
     */
    readonly oCSAPIRequest: string
}

/**
 * CoreOcsApi - object-oriented interface
 * @export
 * @class CoreOcsApi
 * @extends {BaseAPI}
 */
export class CoreOcsApi extends BaseAPI {
    /**
     * 
     * @summary Get the capabilities
     * @param {CoreOcsApiCoreOcsGetCapabilitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreOcsApi
     */
    public coreOcsGetCapabilities(requestParameters: CoreOcsApiCoreOcsGetCapabilitiesRequest, options?: AxiosRequestConfig) {
        return CoreOcsApiFp(this.configuration).coreOcsGetCapabilities(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CorePreviewApi - axios parameter creator
 * @export
 */
export const CorePreviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a preview by file path
         * @param {string} [file] Path of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Whether to not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {number} [mimeFallback] Whether to fallback to the mime icon if no preview is available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corePreviewGetPreview: async (file?: string, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, mimeFallback?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/core/preview.png`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (a !== undefined) {
                localVarQueryParameter['a'] = a;
            }

            if (forceIcon !== undefined) {
                localVarQueryParameter['forceIcon'] = forceIcon;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (mimeFallback !== undefined) {
                localVarQueryParameter['mimeFallback'] = mimeFallback;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a preview by file ID
         * @param {number} [fileId] ID of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Whether to not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {number} [mimeFallback] Whether to fallback to the mime icon if no preview is available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corePreviewGetPreviewByFileId: async (fileId?: number, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, mimeFallback?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/core/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (a !== undefined) {
                localVarQueryParameter['a'] = a;
            }

            if (forceIcon !== undefined) {
                localVarQueryParameter['forceIcon'] = forceIcon;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (mimeFallback !== undefined) {
                localVarQueryParameter['mimeFallback'] = mimeFallback;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CorePreviewApi - functional programming interface
 * @export
 */
export const CorePreviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CorePreviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a preview by file path
         * @param {string} [file] Path of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Whether to not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {number} [mimeFallback] Whether to fallback to the mime icon if no preview is available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async corePreviewGetPreview(file?: string, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, mimeFallback?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.corePreviewGetPreview(file, x, y, a, forceIcon, mode, mimeFallback, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a preview by file ID
         * @param {number} [fileId] ID of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Whether to not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {number} [mimeFallback] Whether to fallback to the mime icon if no preview is available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async corePreviewGetPreviewByFileId(fileId?: number, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, mimeFallback?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.corePreviewGetPreviewByFileId(fileId, x, y, a, forceIcon, mode, mimeFallback, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CorePreviewApi - factory interface
 * @export
 */
export const CorePreviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CorePreviewApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a preview by file path
         * @param {CorePreviewApiCorePreviewGetPreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corePreviewGetPreview(requestParameters: CorePreviewApiCorePreviewGetPreviewRequest = {}, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.corePreviewGetPreview(requestParameters.file, requestParameters.x, requestParameters.y, requestParameters.a, requestParameters.forceIcon, requestParameters.mode, requestParameters.mimeFallback, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a preview by file ID
         * @param {CorePreviewApiCorePreviewGetPreviewByFileIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corePreviewGetPreviewByFileId(requestParameters: CorePreviewApiCorePreviewGetPreviewByFileIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.corePreviewGetPreviewByFileId(requestParameters.fileId, requestParameters.x, requestParameters.y, requestParameters.a, requestParameters.forceIcon, requestParameters.mode, requestParameters.mimeFallback, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for corePreviewGetPreview operation in CorePreviewApi.
 * @export
 * @interface CorePreviewApiCorePreviewGetPreviewRequest
 */
export interface CorePreviewApiCorePreviewGetPreviewRequest {
    /**
     * Path of the file
     * @type {string}
     * @memberof CorePreviewApiCorePreviewGetPreview
     */
    readonly file?: string

    /**
     * Width of the preview
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreview
     */
    readonly x?: number

    /**
     * Height of the preview
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreview
     */
    readonly y?: number

    /**
     * Whether to not crop the preview
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreview
     */
    readonly a?: number

    /**
     * Force returning an icon
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreview
     */
    readonly forceIcon?: number

    /**
     * How to crop the image
     * @type {string}
     * @memberof CorePreviewApiCorePreviewGetPreview
     */
    readonly mode?: string

    /**
     * Whether to fallback to the mime icon if no preview is available
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreview
     */
    readonly mimeFallback?: number
}

/**
 * Request parameters for corePreviewGetPreviewByFileId operation in CorePreviewApi.
 * @export
 * @interface CorePreviewApiCorePreviewGetPreviewByFileIdRequest
 */
export interface CorePreviewApiCorePreviewGetPreviewByFileIdRequest {
    /**
     * ID of the file
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreviewByFileId
     */
    readonly fileId?: number

    /**
     * Width of the preview
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreviewByFileId
     */
    readonly x?: number

    /**
     * Height of the preview
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreviewByFileId
     */
    readonly y?: number

    /**
     * Whether to not crop the preview
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreviewByFileId
     */
    readonly a?: number

    /**
     * Force returning an icon
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreviewByFileId
     */
    readonly forceIcon?: number

    /**
     * How to crop the image
     * @type {string}
     * @memberof CorePreviewApiCorePreviewGetPreviewByFileId
     */
    readonly mode?: string

    /**
     * Whether to fallback to the mime icon if no preview is available
     * @type {number}
     * @memberof CorePreviewApiCorePreviewGetPreviewByFileId
     */
    readonly mimeFallback?: number
}

/**
 * CorePreviewApi - object-oriented interface
 * @export
 * @class CorePreviewApi
 * @extends {BaseAPI}
 */
export class CorePreviewApi extends BaseAPI {
    /**
     * 
     * @summary Get a preview by file path
     * @param {CorePreviewApiCorePreviewGetPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorePreviewApi
     */
    public corePreviewGetPreview(requestParameters: CorePreviewApiCorePreviewGetPreviewRequest = {}, options?: AxiosRequestConfig) {
        return CorePreviewApiFp(this.configuration).corePreviewGetPreview(requestParameters.file, requestParameters.x, requestParameters.y, requestParameters.a, requestParameters.forceIcon, requestParameters.mode, requestParameters.mimeFallback, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a preview by file ID
     * @param {CorePreviewApiCorePreviewGetPreviewByFileIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorePreviewApi
     */
    public corePreviewGetPreviewByFileId(requestParameters: CorePreviewApiCorePreviewGetPreviewByFileIdRequest = {}, options?: AxiosRequestConfig) {
        return CorePreviewApiFp(this.configuration).corePreviewGetPreviewByFileId(requestParameters.fileId, requestParameters.x, requestParameters.y, requestParameters.a, requestParameters.forceIcon, requestParameters.mode, requestParameters.mimeFallback, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreProfileApiApi - axios parameter creator
 * @export
 */
export const CoreProfileApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update the visibility of a parameter
         * @param {string} paramId ID of the parameter
         * @param {string} visibility New visibility
         * @param {string} targetUserId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreProfileApiSetVisibility: async (paramId: string, visibility: string, targetUserId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paramId' is not null or undefined
            assertParamExists('coreProfileApiSetVisibility', 'paramId', paramId)
            // verify required parameter 'visibility' is not null or undefined
            assertParamExists('coreProfileApiSetVisibility', 'visibility', visibility)
            // verify required parameter 'targetUserId' is not null or undefined
            assertParamExists('coreProfileApiSetVisibility', 'targetUserId', targetUserId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreProfileApiSetVisibility', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/profile/{targetUserId}`
                .replace(`{${"targetUserId"}}`, encodeURIComponent(String(targetUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (paramId !== undefined) {
                localVarQueryParameter['paramId'] = paramId;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['visibility'] = visibility;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreProfileApiApi - functional programming interface
 * @export
 */
export const CoreProfileApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreProfileApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update the visibility of a parameter
         * @param {string} paramId ID of the parameter
         * @param {string} visibility New visibility
         * @param {string} targetUserId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreProfileApiSetVisibility(paramId: string, visibility: string, targetUserId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreProfileApiSetVisibility(paramId, visibility, targetUserId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreProfileApiApi - factory interface
 * @export
 */
export const CoreProfileApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreProfileApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Update the visibility of a parameter
         * @param {CoreProfileApiApiCoreProfileApiSetVisibilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreProfileApiSetVisibility(requestParameters: CoreProfileApiApiCoreProfileApiSetVisibilityRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.coreProfileApiSetVisibility(requestParameters.paramId, requestParameters.visibility, requestParameters.targetUserId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreProfileApiSetVisibility operation in CoreProfileApiApi.
 * @export
 * @interface CoreProfileApiApiCoreProfileApiSetVisibilityRequest
 */
export interface CoreProfileApiApiCoreProfileApiSetVisibilityRequest {
    /**
     * ID of the parameter
     * @type {string}
     * @memberof CoreProfileApiApiCoreProfileApiSetVisibility
     */
    readonly paramId: string

    /**
     * New visibility
     * @type {string}
     * @memberof CoreProfileApiApiCoreProfileApiSetVisibility
     */
    readonly visibility: string

    /**
     * ID of the user
     * @type {string}
     * @memberof CoreProfileApiApiCoreProfileApiSetVisibility
     */
    readonly targetUserId: string

    /**
     * 
     * @type {string}
     * @memberof CoreProfileApiApiCoreProfileApiSetVisibility
     */
    readonly oCSAPIRequest: string
}

/**
 * CoreProfileApiApi - object-oriented interface
 * @export
 * @class CoreProfileApiApi
 * @extends {BaseAPI}
 */
export class CoreProfileApiApi extends BaseAPI {
    /**
     * 
     * @summary Update the visibility of a parameter
     * @param {CoreProfileApiApiCoreProfileApiSetVisibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreProfileApiApi
     */
    public coreProfileApiSetVisibility(requestParameters: CoreProfileApiApiCoreProfileApiSetVisibilityRequest, options?: AxiosRequestConfig) {
        return CoreProfileApiApiFp(this.configuration).coreProfileApiSetVisibility(requestParameters.paramId, requestParameters.visibility, requestParameters.targetUserId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreReferenceApi - axios parameter creator
 * @export
 */
export const CoreReferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a preview for a reference
         * @param {string} referenceId the reference cache key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferencePreview: async (referenceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceId' is not null or undefined
            assertParamExists('coreReferencePreview', 'referenceId', referenceId)
            const localVarPath = `/index.php/core/references/preview/{referenceId}`
                .replace(`{${"referenceId"}}`, encodeURIComponent(String(referenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreReferenceApi - functional programming interface
 * @export
 */
export const CoreReferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreReferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a preview for a reference
         * @param {string} referenceId the reference cache key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferencePreview(referenceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferencePreview(referenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreReferenceApi - factory interface
 * @export
 */
export const CoreReferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreReferenceApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a preview for a reference
         * @param {CoreReferenceApiCoreReferencePreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferencePreview(requestParameters: CoreReferenceApiCoreReferencePreviewRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.coreReferencePreview(requestParameters.referenceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreReferencePreview operation in CoreReferenceApi.
 * @export
 * @interface CoreReferenceApiCoreReferencePreviewRequest
 */
export interface CoreReferenceApiCoreReferencePreviewRequest {
    /**
     * the reference cache key
     * @type {string}
     * @memberof CoreReferenceApiCoreReferencePreview
     */
    readonly referenceId: string
}

/**
 * CoreReferenceApi - object-oriented interface
 * @export
 * @class CoreReferenceApi
 * @extends {BaseAPI}
 */
export class CoreReferenceApi extends BaseAPI {
    /**
     * 
     * @summary Get a preview for a reference
     * @param {CoreReferenceApiCoreReferencePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApi
     */
    public coreReferencePreview(requestParameters: CoreReferenceApiCoreReferencePreviewRequest, options?: AxiosRequestConfig) {
        return CoreReferenceApiFp(this.configuration).coreReferencePreview(requestParameters.referenceId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreReferenceApiApi - axios parameter creator
 * @export
 */
export const CoreReferenceApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Extract references from a text
         * @param {string} text Text to extract from
         * @param {string} oCSAPIRequest 
         * @param {number} [resolve] Resolve the references
         * @param {number} [limit] Maximum amount of references to extract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiExtract: async (text: string, oCSAPIRequest: string, resolve?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('coreReferenceApiExtract', 'text', text)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiExtract', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/extract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (resolve !== undefined) {
                localVarQueryParameter['resolve'] = resolve;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the providers
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiGetProvidersInfo: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiGetProvidersInfo', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resolve multiple references
         * @param {Array<string>} references References to resolve
         * @param {string} oCSAPIRequest 
         * @param {number} [limit] Maximum amount of references to resolve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiResolve: async (references: Array<string>, oCSAPIRequest: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'references' is not null or undefined
            assertParamExists('coreReferenceApiResolve', 'references', references)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiResolve', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/resolve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (references) {
                localVarQueryParameter['references[]'] = references;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resolve a reference
         * @param {string} reference Reference to resolve
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiResolveOne: async (reference: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reference' is not null or undefined
            assertParamExists('coreReferenceApiResolveOne', 'reference', reference)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiResolveOne', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/resolve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reference !== undefined) {
                localVarQueryParameter['reference'] = reference;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Touch a provider
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {number | null} [timestamp] Timestamp of the last usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiTouchProvider: async (providerId: string, oCSAPIRequest: string, timestamp?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('coreReferenceApiTouchProvider', 'providerId', providerId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiTouchProvider', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/provider/{providerId}`
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreReferenceApiApi - functional programming interface
 * @export
 */
export const CoreReferenceApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreReferenceApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Extract references from a text
         * @param {string} text Text to extract from
         * @param {string} oCSAPIRequest 
         * @param {number} [resolve] Resolve the references
         * @param {number} [limit] Maximum amount of references to extract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiExtract(text: string, oCSAPIRequest: string, resolve?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiResolveOne200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiExtract(text, oCSAPIRequest, resolve, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the providers
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiGetProvidersInfo(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiGetProvidersInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiGetProvidersInfo(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resolve multiple references
         * @param {Array<string>} references References to resolve
         * @param {string} oCSAPIRequest 
         * @param {number} [limit] Maximum amount of references to resolve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiResolve(references: Array<string>, oCSAPIRequest: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiResolveOne200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiResolve(references, oCSAPIRequest, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resolve a reference
         * @param {string} reference Reference to resolve
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiResolveOne(reference: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiResolveOne200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiResolveOne(reference, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Touch a provider
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {number | null} [timestamp] Timestamp of the last usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiTouchProvider(providerId: string, oCSAPIRequest: string, timestamp?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiTouchProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiTouchProvider(providerId, oCSAPIRequest, timestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreReferenceApiApi - factory interface
 * @export
 */
export const CoreReferenceApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreReferenceApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Extract references from a text
         * @param {CoreReferenceApiApiCoreReferenceApiExtractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiExtract(requestParameters: CoreReferenceApiApiCoreReferenceApiExtractRequest, options?: AxiosRequestConfig): AxiosPromise<CoreReferenceApiResolveOne200Response> {
            return localVarFp.coreReferenceApiExtract(requestParameters.text, requestParameters.oCSAPIRequest, requestParameters.resolve, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the providers
         * @param {CoreReferenceApiApiCoreReferenceApiGetProvidersInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiGetProvidersInfo(requestParameters: CoreReferenceApiApiCoreReferenceApiGetProvidersInfoRequest, options?: AxiosRequestConfig): AxiosPromise<CoreReferenceApiGetProvidersInfo200Response> {
            return localVarFp.coreReferenceApiGetProvidersInfo(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resolve multiple references
         * @param {CoreReferenceApiApiCoreReferenceApiResolveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiResolve(requestParameters: CoreReferenceApiApiCoreReferenceApiResolveRequest, options?: AxiosRequestConfig): AxiosPromise<CoreReferenceApiResolveOne200Response> {
            return localVarFp.coreReferenceApiResolve(requestParameters.references, requestParameters.oCSAPIRequest, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resolve a reference
         * @param {CoreReferenceApiApiCoreReferenceApiResolveOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiResolveOne(requestParameters: CoreReferenceApiApiCoreReferenceApiResolveOneRequest, options?: AxiosRequestConfig): AxiosPromise<CoreReferenceApiResolveOne200Response> {
            return localVarFp.coreReferenceApiResolveOne(requestParameters.reference, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Touch a provider
         * @param {CoreReferenceApiApiCoreReferenceApiTouchProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiTouchProvider(requestParameters: CoreReferenceApiApiCoreReferenceApiTouchProviderRequest, options?: AxiosRequestConfig): AxiosPromise<CoreReferenceApiTouchProvider200Response> {
            return localVarFp.coreReferenceApiTouchProvider(requestParameters.providerId, requestParameters.oCSAPIRequest, requestParameters.timestamp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreReferenceApiExtract operation in CoreReferenceApiApi.
 * @export
 * @interface CoreReferenceApiApiCoreReferenceApiExtractRequest
 */
export interface CoreReferenceApiApiCoreReferenceApiExtractRequest {
    /**
     * Text to extract from
     * @type {string}
     * @memberof CoreReferenceApiApiCoreReferenceApiExtract
     */
    readonly text: string

    /**
     * 
     * @type {string}
     * @memberof CoreReferenceApiApiCoreReferenceApiExtract
     */
    readonly oCSAPIRequest: string

    /**
     * Resolve the references
     * @type {number}
     * @memberof CoreReferenceApiApiCoreReferenceApiExtract
     */
    readonly resolve?: number

    /**
     * Maximum amount of references to extract
     * @type {number}
     * @memberof CoreReferenceApiApiCoreReferenceApiExtract
     */
    readonly limit?: number
}

/**
 * Request parameters for coreReferenceApiGetProvidersInfo operation in CoreReferenceApiApi.
 * @export
 * @interface CoreReferenceApiApiCoreReferenceApiGetProvidersInfoRequest
 */
export interface CoreReferenceApiApiCoreReferenceApiGetProvidersInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceApiApiCoreReferenceApiGetProvidersInfo
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreReferenceApiResolve operation in CoreReferenceApiApi.
 * @export
 * @interface CoreReferenceApiApiCoreReferenceApiResolveRequest
 */
export interface CoreReferenceApiApiCoreReferenceApiResolveRequest {
    /**
     * References to resolve
     * @type {Array<string>}
     * @memberof CoreReferenceApiApiCoreReferenceApiResolve
     */
    readonly references: Array<string>

    /**
     * 
     * @type {string}
     * @memberof CoreReferenceApiApiCoreReferenceApiResolve
     */
    readonly oCSAPIRequest: string

    /**
     * Maximum amount of references to resolve
     * @type {number}
     * @memberof CoreReferenceApiApiCoreReferenceApiResolve
     */
    readonly limit?: number
}

/**
 * Request parameters for coreReferenceApiResolveOne operation in CoreReferenceApiApi.
 * @export
 * @interface CoreReferenceApiApiCoreReferenceApiResolveOneRequest
 */
export interface CoreReferenceApiApiCoreReferenceApiResolveOneRequest {
    /**
     * Reference to resolve
     * @type {string}
     * @memberof CoreReferenceApiApiCoreReferenceApiResolveOne
     */
    readonly reference: string

    /**
     * 
     * @type {string}
     * @memberof CoreReferenceApiApiCoreReferenceApiResolveOne
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreReferenceApiTouchProvider operation in CoreReferenceApiApi.
 * @export
 * @interface CoreReferenceApiApiCoreReferenceApiTouchProviderRequest
 */
export interface CoreReferenceApiApiCoreReferenceApiTouchProviderRequest {
    /**
     * ID of the provider
     * @type {string}
     * @memberof CoreReferenceApiApiCoreReferenceApiTouchProvider
     */
    readonly providerId: string

    /**
     * 
     * @type {string}
     * @memberof CoreReferenceApiApiCoreReferenceApiTouchProvider
     */
    readonly oCSAPIRequest: string

    /**
     * Timestamp of the last usage
     * @type {number}
     * @memberof CoreReferenceApiApiCoreReferenceApiTouchProvider
     */
    readonly timestamp?: number | null
}

/**
 * CoreReferenceApiApi - object-oriented interface
 * @export
 * @class CoreReferenceApiApi
 * @extends {BaseAPI}
 */
export class CoreReferenceApiApi extends BaseAPI {
    /**
     * 
     * @summary Extract references from a text
     * @param {CoreReferenceApiApiCoreReferenceApiExtractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiExtract(requestParameters: CoreReferenceApiApiCoreReferenceApiExtractRequest, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiExtract(requestParameters.text, requestParameters.oCSAPIRequest, requestParameters.resolve, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the providers
     * @param {CoreReferenceApiApiCoreReferenceApiGetProvidersInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiGetProvidersInfo(requestParameters: CoreReferenceApiApiCoreReferenceApiGetProvidersInfoRequest, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiGetProvidersInfo(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resolve multiple references
     * @param {CoreReferenceApiApiCoreReferenceApiResolveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiResolve(requestParameters: CoreReferenceApiApiCoreReferenceApiResolveRequest, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiResolve(requestParameters.references, requestParameters.oCSAPIRequest, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resolve a reference
     * @param {CoreReferenceApiApiCoreReferenceApiResolveOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiResolveOne(requestParameters: CoreReferenceApiApiCoreReferenceApiResolveOneRequest, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiResolveOne(requestParameters.reference, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Touch a provider
     * @param {CoreReferenceApiApiCoreReferenceApiTouchProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiTouchProvider(requestParameters: CoreReferenceApiApiCoreReferenceApiTouchProviderRequest, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiTouchProvider(requestParameters.providerId, requestParameters.oCSAPIRequest, requestParameters.timestamp, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreTextProcessingApiApi - axios parameter creator
 * @export
 */
export const CoreTextProcessingApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary This endpoint allows to delete a scheduled task for a user
         * @param {number} id The id of the task
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiDeleteTask: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('coreTextProcessingApiDeleteTask', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTextProcessingApiDeleteTask', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/textprocessing/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update.
         * @param {number} id The id of the task
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiGetTask: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('coreTextProcessingApiGetTask', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTextProcessingApiGetTask', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/textprocessing/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {string | null} [identifier] An arbitrary identifier for the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiListTasksByApp: async (appId: string, oCSAPIRequest: string, identifier?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('coreTextProcessingApiListTasksByApp', 'appId', appId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTextProcessingApiListTasksByApp', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/textprocessing/tasks/app/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This endpoint allows scheduling a language model task
         * @param {string} input Input text
         * @param {string} type Type of the task
         * @param {string} appId ID of the app that will execute the task
         * @param {string} oCSAPIRequest 
         * @param {string} [identifier] An arbitrary identifier for the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiSchedule: async (input: string, type: string, appId: string, oCSAPIRequest: string, identifier?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'input' is not null or undefined
            assertParamExists('coreTextProcessingApiSchedule', 'input', input)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('coreTextProcessingApiSchedule', 'type', type)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('coreTextProcessingApiSchedule', 'appId', appId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTextProcessingApiSchedule', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/textprocessing/schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (input !== undefined) {
                localVarQueryParameter['input'] = input;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (appId !== undefined) {
                localVarQueryParameter['appId'] = appId;
            }

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This endpoint returns all available LanguageModel task types
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiTaskTypes: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTextProcessingApiTaskTypes', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/textprocessing/tasktypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreTextProcessingApiApi - functional programming interface
 * @export
 */
export const CoreTextProcessingApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreTextProcessingApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary This endpoint allows to delete a scheduled task for a user
         * @param {number} id The id of the task
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTextProcessingApiDeleteTask(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTextProcessingApiSchedule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTextProcessingApiDeleteTask(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update.
         * @param {number} id The id of the task
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTextProcessingApiGetTask(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTextProcessingApiSchedule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTextProcessingApiGetTask(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {string | null} [identifier] An arbitrary identifier for the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTextProcessingApiListTasksByApp(appId: string, oCSAPIRequest: string, identifier?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTextProcessingApiListTasksByApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTextProcessingApiListTasksByApp(appId, oCSAPIRequest, identifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This endpoint allows scheduling a language model task
         * @param {string} input Input text
         * @param {string} type Type of the task
         * @param {string} appId ID of the app that will execute the task
         * @param {string} oCSAPIRequest 
         * @param {string} [identifier] An arbitrary identifier for the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTextProcessingApiSchedule(input: string, type: string, appId: string, oCSAPIRequest: string, identifier?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTextProcessingApiSchedule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTextProcessingApiSchedule(input, type, appId, oCSAPIRequest, identifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This endpoint returns all available LanguageModel task types
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTextProcessingApiTaskTypes(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTextProcessingApiTaskTypes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTextProcessingApiTaskTypes(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreTextProcessingApiApi - factory interface
 * @export
 */
export const CoreTextProcessingApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreTextProcessingApiApiFp(configuration)
    return {
        /**
         * 
         * @summary This endpoint allows to delete a scheduled task for a user
         * @param {CoreTextProcessingApiApiCoreTextProcessingApiDeleteTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiDeleteTask(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiDeleteTaskRequest, options?: AxiosRequestConfig): AxiosPromise<CoreTextProcessingApiSchedule200Response> {
            return localVarFp.coreTextProcessingApiDeleteTask(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update.
         * @param {CoreTextProcessingApiApiCoreTextProcessingApiGetTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiGetTask(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiGetTaskRequest, options?: AxiosRequestConfig): AxiosPromise<CoreTextProcessingApiSchedule200Response> {
            return localVarFp.coreTextProcessingApiGetTask(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier
         * @param {CoreTextProcessingApiApiCoreTextProcessingApiListTasksByAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiListTasksByApp(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiListTasksByAppRequest, options?: AxiosRequestConfig): AxiosPromise<CoreTextProcessingApiListTasksByApp200Response> {
            return localVarFp.coreTextProcessingApiListTasksByApp(requestParameters.appId, requestParameters.oCSAPIRequest, requestParameters.identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This endpoint allows scheduling a language model task
         * @param {CoreTextProcessingApiApiCoreTextProcessingApiScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiSchedule(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiScheduleRequest, options?: AxiosRequestConfig): AxiosPromise<CoreTextProcessingApiSchedule200Response> {
            return localVarFp.coreTextProcessingApiSchedule(requestParameters.input, requestParameters.type, requestParameters.appId, requestParameters.oCSAPIRequest, requestParameters.identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This endpoint returns all available LanguageModel task types
         * @param {CoreTextProcessingApiApiCoreTextProcessingApiTaskTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTextProcessingApiTaskTypes(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiTaskTypesRequest, options?: AxiosRequestConfig): AxiosPromise<CoreTextProcessingApiTaskTypes200Response> {
            return localVarFp.coreTextProcessingApiTaskTypes(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreTextProcessingApiDeleteTask operation in CoreTextProcessingApiApi.
 * @export
 * @interface CoreTextProcessingApiApiCoreTextProcessingApiDeleteTaskRequest
 */
export interface CoreTextProcessingApiApiCoreTextProcessingApiDeleteTaskRequest {
    /**
     * The id of the task
     * @type {number}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiDeleteTask
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiDeleteTask
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreTextProcessingApiGetTask operation in CoreTextProcessingApiApi.
 * @export
 * @interface CoreTextProcessingApiApiCoreTextProcessingApiGetTaskRequest
 */
export interface CoreTextProcessingApiApiCoreTextProcessingApiGetTaskRequest {
    /**
     * The id of the task
     * @type {number}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiGetTask
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiGetTask
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreTextProcessingApiListTasksByApp operation in CoreTextProcessingApiApi.
 * @export
 * @interface CoreTextProcessingApiApiCoreTextProcessingApiListTasksByAppRequest
 */
export interface CoreTextProcessingApiApiCoreTextProcessingApiListTasksByAppRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiListTasksByApp
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiListTasksByApp
     */
    readonly oCSAPIRequest: string

    /**
     * An arbitrary identifier for the task
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiListTasksByApp
     */
    readonly identifier?: string | null
}

/**
 * Request parameters for coreTextProcessingApiSchedule operation in CoreTextProcessingApiApi.
 * @export
 * @interface CoreTextProcessingApiApiCoreTextProcessingApiScheduleRequest
 */
export interface CoreTextProcessingApiApiCoreTextProcessingApiScheduleRequest {
    /**
     * Input text
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiSchedule
     */
    readonly input: string

    /**
     * Type of the task
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiSchedule
     */
    readonly type: string

    /**
     * ID of the app that will execute the task
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiSchedule
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiSchedule
     */
    readonly oCSAPIRequest: string

    /**
     * An arbitrary identifier for the task
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiSchedule
     */
    readonly identifier?: string
}

/**
 * Request parameters for coreTextProcessingApiTaskTypes operation in CoreTextProcessingApiApi.
 * @export
 * @interface CoreTextProcessingApiApiCoreTextProcessingApiTaskTypesRequest
 */
export interface CoreTextProcessingApiApiCoreTextProcessingApiTaskTypesRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreTextProcessingApiApiCoreTextProcessingApiTaskTypes
     */
    readonly oCSAPIRequest: string
}

/**
 * CoreTextProcessingApiApi - object-oriented interface
 * @export
 * @class CoreTextProcessingApiApi
 * @extends {BaseAPI}
 */
export class CoreTextProcessingApiApi extends BaseAPI {
    /**
     * 
     * @summary This endpoint allows to delete a scheduled task for a user
     * @param {CoreTextProcessingApiApiCoreTextProcessingApiDeleteTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTextProcessingApiApi
     */
    public coreTextProcessingApiDeleteTask(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiDeleteTaskRequest, options?: AxiosRequestConfig) {
        return CoreTextProcessingApiApiFp(this.configuration).coreTextProcessingApiDeleteTask(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update.
     * @param {CoreTextProcessingApiApiCoreTextProcessingApiGetTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTextProcessingApiApi
     */
    public coreTextProcessingApiGetTask(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiGetTaskRequest, options?: AxiosRequestConfig) {
        return CoreTextProcessingApiApiFp(this.configuration).coreTextProcessingApiGetTask(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier
     * @param {CoreTextProcessingApiApiCoreTextProcessingApiListTasksByAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTextProcessingApiApi
     */
    public coreTextProcessingApiListTasksByApp(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiListTasksByAppRequest, options?: AxiosRequestConfig) {
        return CoreTextProcessingApiApiFp(this.configuration).coreTextProcessingApiListTasksByApp(requestParameters.appId, requestParameters.oCSAPIRequest, requestParameters.identifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This endpoint allows scheduling a language model task
     * @param {CoreTextProcessingApiApiCoreTextProcessingApiScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTextProcessingApiApi
     */
    public coreTextProcessingApiSchedule(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiScheduleRequest, options?: AxiosRequestConfig) {
        return CoreTextProcessingApiApiFp(this.configuration).coreTextProcessingApiSchedule(requestParameters.input, requestParameters.type, requestParameters.appId, requestParameters.oCSAPIRequest, requestParameters.identifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This endpoint returns all available LanguageModel task types
     * @param {CoreTextProcessingApiApiCoreTextProcessingApiTaskTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTextProcessingApiApi
     */
    public coreTextProcessingApiTaskTypes(requestParameters: CoreTextProcessingApiApiCoreTextProcessingApiTaskTypesRequest, options?: AxiosRequestConfig) {
        return CoreTextProcessingApiApiFp(this.configuration).coreTextProcessingApiTaskTypes(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreTranslationApiApi - axios parameter creator
 * @export
 */
export const CoreTranslationApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the list of supported languages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTranslationApiLanguages: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTranslationApiLanguages', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/translation/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Translate a text
         * @param {string} text Text to be translated
         * @param {string} toLanguage Language to translate to
         * @param {string} oCSAPIRequest 
         * @param {string | null} [fromLanguage] Language to translate from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTranslationApiTranslate: async (text: string, toLanguage: string, oCSAPIRequest: string, fromLanguage?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('coreTranslationApiTranslate', 'text', text)
            // verify required parameter 'toLanguage' is not null or undefined
            assertParamExists('coreTranslationApiTranslate', 'toLanguage', toLanguage)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTranslationApiTranslate', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/translation/translate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (fromLanguage !== undefined) {
                localVarQueryParameter['fromLanguage'] = fromLanguage;
            }

            if (toLanguage !== undefined) {
                localVarQueryParameter['toLanguage'] = toLanguage;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreTranslationApiApi - functional programming interface
 * @export
 */
export const CoreTranslationApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreTranslationApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the list of supported languages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTranslationApiLanguages(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTranslationApiLanguages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTranslationApiLanguages(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Translate a text
         * @param {string} text Text to be translated
         * @param {string} toLanguage Language to translate to
         * @param {string} oCSAPIRequest 
         * @param {string | null} [fromLanguage] Language to translate from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTranslationApiTranslate(text: string, toLanguage: string, oCSAPIRequest: string, fromLanguage?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTranslationApiTranslate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTranslationApiTranslate(text, toLanguage, oCSAPIRequest, fromLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreTranslationApiApi - factory interface
 * @export
 */
export const CoreTranslationApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreTranslationApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the list of supported languages
         * @param {CoreTranslationApiApiCoreTranslationApiLanguagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTranslationApiLanguages(requestParameters: CoreTranslationApiApiCoreTranslationApiLanguagesRequest, options?: AxiosRequestConfig): AxiosPromise<CoreTranslationApiLanguages200Response> {
            return localVarFp.coreTranslationApiLanguages(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Translate a text
         * @param {CoreTranslationApiApiCoreTranslationApiTranslateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTranslationApiTranslate(requestParameters: CoreTranslationApiApiCoreTranslationApiTranslateRequest, options?: AxiosRequestConfig): AxiosPromise<CoreTranslationApiTranslate200Response> {
            return localVarFp.coreTranslationApiTranslate(requestParameters.text, requestParameters.toLanguage, requestParameters.oCSAPIRequest, requestParameters.fromLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreTranslationApiLanguages operation in CoreTranslationApiApi.
 * @export
 * @interface CoreTranslationApiApiCoreTranslationApiLanguagesRequest
 */
export interface CoreTranslationApiApiCoreTranslationApiLanguagesRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiApiCoreTranslationApiLanguages
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreTranslationApiTranslate operation in CoreTranslationApiApi.
 * @export
 * @interface CoreTranslationApiApiCoreTranslationApiTranslateRequest
 */
export interface CoreTranslationApiApiCoreTranslationApiTranslateRequest {
    /**
     * Text to be translated
     * @type {string}
     * @memberof CoreTranslationApiApiCoreTranslationApiTranslate
     */
    readonly text: string

    /**
     * Language to translate to
     * @type {string}
     * @memberof CoreTranslationApiApiCoreTranslationApiTranslate
     */
    readonly toLanguage: string

    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiApiCoreTranslationApiTranslate
     */
    readonly oCSAPIRequest: string

    /**
     * Language to translate from
     * @type {string}
     * @memberof CoreTranslationApiApiCoreTranslationApiTranslate
     */
    readonly fromLanguage?: string | null
}

/**
 * CoreTranslationApiApi - object-oriented interface
 * @export
 * @class CoreTranslationApiApi
 * @extends {BaseAPI}
 */
export class CoreTranslationApiApi extends BaseAPI {
    /**
     * 
     * @summary Get the list of supported languages
     * @param {CoreTranslationApiApiCoreTranslationApiLanguagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTranslationApiApi
     */
    public coreTranslationApiLanguages(requestParameters: CoreTranslationApiApiCoreTranslationApiLanguagesRequest, options?: AxiosRequestConfig) {
        return CoreTranslationApiApiFp(this.configuration).coreTranslationApiLanguages(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Translate a text
     * @param {CoreTranslationApiApiCoreTranslationApiTranslateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTranslationApiApi
     */
    public coreTranslationApiTranslate(requestParameters: CoreTranslationApiApiCoreTranslationApiTranslateRequest, options?: AxiosRequestConfig) {
        return CoreTranslationApiApiFp(this.configuration).coreTranslationApiTranslate(requestParameters.text, requestParameters.toLanguage, requestParameters.oCSAPIRequest, requestParameters.fromLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreUnifiedSearchApi - axios parameter creator
 * @export
 */
export const CoreUnifiedSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the providers for unified search
         * @param {string} oCSAPIRequest 
         * @param {string} [from] the url the user is currently at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreUnifiedSearchGetProviders: async (oCSAPIRequest: string, from?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreUnifiedSearchGetProviders', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/search/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {string} [term] Term to search
         * @param {number | null} [sortOrder] Order of entries
         * @param {number | null} [limit] Maximum amount of entries
         * @param {string | null} [cursor] Offset for searching
         * @param {string} [from] The current user URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreUnifiedSearchSearch: async (providerId: string, oCSAPIRequest: string, term?: string, sortOrder?: number | null, limit?: number | null, cursor?: string | null, from?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('coreUnifiedSearchSearch', 'providerId', providerId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreUnifiedSearchSearch', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/search/providers/{providerId}/search`
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreUnifiedSearchApi - functional programming interface
 * @export
 */
export const CoreUnifiedSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreUnifiedSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the providers for unified search
         * @param {string} oCSAPIRequest 
         * @param {string} [from] the url the user is currently at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreUnifiedSearchGetProviders(oCSAPIRequest: string, from?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreUnifiedSearchGetProviders200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreUnifiedSearchGetProviders(oCSAPIRequest, from, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {string} [term] Term to search
         * @param {number | null} [sortOrder] Order of entries
         * @param {number | null} [limit] Maximum amount of entries
         * @param {string | null} [cursor] Offset for searching
         * @param {string} [from] The current user URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreUnifiedSearchSearch(providerId: string, oCSAPIRequest: string, term?: string, sortOrder?: number | null, limit?: number | null, cursor?: string | null, from?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreUnifiedSearchSearch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreUnifiedSearchSearch(providerId, oCSAPIRequest, term, sortOrder, limit, cursor, from, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreUnifiedSearchApi - factory interface
 * @export
 */
export const CoreUnifiedSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreUnifiedSearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the providers for unified search
         * @param {CoreUnifiedSearchApiCoreUnifiedSearchGetProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreUnifiedSearchGetProviders(requestParameters: CoreUnifiedSearchApiCoreUnifiedSearchGetProvidersRequest, options?: AxiosRequestConfig): AxiosPromise<CoreUnifiedSearchGetProviders200Response> {
            return localVarFp.coreUnifiedSearchGetProviders(requestParameters.oCSAPIRequest, requestParameters.from, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {CoreUnifiedSearchApiCoreUnifiedSearchSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreUnifiedSearchSearch(requestParameters: CoreUnifiedSearchApiCoreUnifiedSearchSearchRequest, options?: AxiosRequestConfig): AxiosPromise<CoreUnifiedSearchSearch200Response> {
            return localVarFp.coreUnifiedSearchSearch(requestParameters.providerId, requestParameters.oCSAPIRequest, requestParameters.term, requestParameters.sortOrder, requestParameters.limit, requestParameters.cursor, requestParameters.from, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreUnifiedSearchGetProviders operation in CoreUnifiedSearchApi.
 * @export
 * @interface CoreUnifiedSearchApiCoreUnifiedSearchGetProvidersRequest
 */
export interface CoreUnifiedSearchApiCoreUnifiedSearchGetProvidersRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchGetProviders
     */
    readonly oCSAPIRequest: string

    /**
     * the url the user is currently at
     * @type {string}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchGetProviders
     */
    readonly from?: string
}

/**
 * Request parameters for coreUnifiedSearchSearch operation in CoreUnifiedSearchApi.
 * @export
 * @interface CoreUnifiedSearchApiCoreUnifiedSearchSearchRequest
 */
export interface CoreUnifiedSearchApiCoreUnifiedSearchSearchRequest {
    /**
     * ID of the provider
     * @type {string}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchSearch
     */
    readonly providerId: string

    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchSearch
     */
    readonly oCSAPIRequest: string

    /**
     * Term to search
     * @type {string}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchSearch
     */
    readonly term?: string

    /**
     * Order of entries
     * @type {number}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchSearch
     */
    readonly sortOrder?: number | null

    /**
     * Maximum amount of entries
     * @type {number}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchSearch
     */
    readonly limit?: number | null

    /**
     * Offset for searching
     * @type {string}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchSearch
     */
    readonly cursor?: string | null

    /**
     * The current user URL
     * @type {string}
     * @memberof CoreUnifiedSearchApiCoreUnifiedSearchSearch
     */
    readonly from?: string
}

/**
 * CoreUnifiedSearchApi - object-oriented interface
 * @export
 * @class CoreUnifiedSearchApi
 * @extends {BaseAPI}
 */
export class CoreUnifiedSearchApi extends BaseAPI {
    /**
     * 
     * @summary Get the providers for unified search
     * @param {CoreUnifiedSearchApiCoreUnifiedSearchGetProvidersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreUnifiedSearchApi
     */
    public coreUnifiedSearchGetProviders(requestParameters: CoreUnifiedSearchApiCoreUnifiedSearchGetProvidersRequest, options?: AxiosRequestConfig) {
        return CoreUnifiedSearchApiFp(this.configuration).coreUnifiedSearchGetProviders(requestParameters.oCSAPIRequest, requestParameters.from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {CoreUnifiedSearchApiCoreUnifiedSearchSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreUnifiedSearchApi
     */
    public coreUnifiedSearchSearch(requestParameters: CoreUnifiedSearchApiCoreUnifiedSearchSearchRequest, options?: AxiosRequestConfig) {
        return CoreUnifiedSearchApiFp(this.configuration).coreUnifiedSearchSearch(requestParameters.providerId, requestParameters.oCSAPIRequest, requestParameters.term, requestParameters.sortOrder, requestParameters.limit, requestParameters.cursor, requestParameters.from, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreWhatsNewApi - axios parameter creator
 * @export
 */
export const CoreWhatsNewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Dismiss the changes
         * @param {string} version Version to dismiss the changes for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWhatsNewDismiss: async (version: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('coreWhatsNewDismiss', 'version', version)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreWhatsNewDismiss', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/whatsnew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the changes
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWhatsNewGet: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreWhatsNewGet', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/whatsnew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreWhatsNewApi - functional programming interface
 * @export
 */
export const CoreWhatsNewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreWhatsNewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Dismiss the changes
         * @param {string} version Version to dismiss the changes for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreWhatsNewDismiss(version: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreWhatsNewDismiss(version, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the changes
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreWhatsNewGet(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreWhatsNewGet(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreWhatsNewApi - factory interface
 * @export
 */
export const CoreWhatsNewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreWhatsNewApiFp(configuration)
    return {
        /**
         * 
         * @summary Dismiss the changes
         * @param {CoreWhatsNewApiCoreWhatsNewDismissRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWhatsNewDismiss(requestParameters: CoreWhatsNewApiCoreWhatsNewDismissRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.coreWhatsNewDismiss(requestParameters.version, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the changes
         * @param {CoreWhatsNewApiCoreWhatsNewGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWhatsNewGet(requestParameters: CoreWhatsNewApiCoreWhatsNewGetRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewGet200Response> {
            return localVarFp.coreWhatsNewGet(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreWhatsNewDismiss operation in CoreWhatsNewApi.
 * @export
 * @interface CoreWhatsNewApiCoreWhatsNewDismissRequest
 */
export interface CoreWhatsNewApiCoreWhatsNewDismissRequest {
    /**
     * Version to dismiss the changes for
     * @type {string}
     * @memberof CoreWhatsNewApiCoreWhatsNewDismiss
     */
    readonly version: string

    /**
     * 
     * @type {string}
     * @memberof CoreWhatsNewApiCoreWhatsNewDismiss
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for coreWhatsNewGet operation in CoreWhatsNewApi.
 * @export
 * @interface CoreWhatsNewApiCoreWhatsNewGetRequest
 */
export interface CoreWhatsNewApiCoreWhatsNewGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CoreWhatsNewApiCoreWhatsNewGet
     */
    readonly oCSAPIRequest: string
}

/**
 * CoreWhatsNewApi - object-oriented interface
 * @export
 * @class CoreWhatsNewApi
 * @extends {BaseAPI}
 */
export class CoreWhatsNewApi extends BaseAPI {
    /**
     * 
     * @summary Dismiss the changes
     * @param {CoreWhatsNewApiCoreWhatsNewDismissRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreWhatsNewApi
     */
    public coreWhatsNewDismiss(requestParameters: CoreWhatsNewApiCoreWhatsNewDismissRequest, options?: AxiosRequestConfig) {
        return CoreWhatsNewApiFp(this.configuration).coreWhatsNewDismiss(requestParameters.version, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the changes
     * @param {CoreWhatsNewApiCoreWhatsNewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreWhatsNewApi
     */
    public coreWhatsNewGet(requestParameters: CoreWhatsNewApiCoreWhatsNewGetRequest, options?: AxiosRequestConfig) {
        return CoreWhatsNewApiFp(this.configuration).coreWhatsNewGet(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoreWipeApi - axios parameter creator
 * @export
 */
export const CoreWipeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if the device should be wiped
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWipeCheckWipe: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('coreWipeCheckWipe', 'token', token)
            const localVarPath = `/index.php/core/wipe/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finish the wipe
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWipeWipeDone: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('coreWipeWipeDone', 'token', token)
            const localVarPath = `/index.php/core/wipe/success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreWipeApi - functional programming interface
 * @export
 */
export const CoreWipeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreWipeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check if the device should be wiped
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreWipeCheckWipe(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWipeCheckWipe200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreWipeCheckWipe(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finish the wipe
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreWipeWipeDone(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreWipeWipeDone(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreWipeApi - factory interface
 * @export
 */
export const CoreWipeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreWipeApiFp(configuration)
    return {
        /**
         * 
         * @summary Check if the device should be wiped
         * @param {CoreWipeApiCoreWipeCheckWipeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWipeCheckWipe(requestParameters: CoreWipeApiCoreWipeCheckWipeRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWipeCheckWipe200Response> {
            return localVarFp.coreWipeCheckWipe(requestParameters.token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finish the wipe
         * @param {CoreWipeApiCoreWipeWipeDoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWipeWipeDone(requestParameters: CoreWipeApiCoreWipeWipeDoneRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.coreWipeWipeDone(requestParameters.token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coreWipeCheckWipe operation in CoreWipeApi.
 * @export
 * @interface CoreWipeApiCoreWipeCheckWipeRequest
 */
export interface CoreWipeApiCoreWipeCheckWipeRequest {
    /**
     * App password
     * @type {string}
     * @memberof CoreWipeApiCoreWipeCheckWipe
     */
    readonly token: string
}

/**
 * Request parameters for coreWipeWipeDone operation in CoreWipeApi.
 * @export
 * @interface CoreWipeApiCoreWipeWipeDoneRequest
 */
export interface CoreWipeApiCoreWipeWipeDoneRequest {
    /**
     * App password
     * @type {string}
     * @memberof CoreWipeApiCoreWipeWipeDone
     */
    readonly token: string
}

/**
 * CoreWipeApi - object-oriented interface
 * @export
 * @class CoreWipeApi
 * @extends {BaseAPI}
 */
export class CoreWipeApi extends BaseAPI {
    /**
     * 
     * @summary Check if the device should be wiped
     * @param {CoreWipeApiCoreWipeCheckWipeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreWipeApi
     */
    public coreWipeCheckWipe(requestParameters: CoreWipeApiCoreWipeCheckWipeRequest, options?: AxiosRequestConfig) {
        return CoreWipeApiFp(this.configuration).coreWipeCheckWipe(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finish the wipe
     * @param {CoreWipeApiCoreWipeWipeDoneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreWipeApi
     */
    public coreWipeWipeDone(requestParameters: CoreWipeApiCoreWipeWipeDoneRequest, options?: AxiosRequestConfig) {
        return CoreWipeApiFp(this.configuration).coreWipeWipeDone(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DashboardDashboardApiApi - axios parameter creator
 * @export
 */
export const DashboardDashboardApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the items for the widgets
         * @param {string} oCSAPIRequest 
         * @param {string} [sinceIds] Array indexed by widget Ids, contains date/id from which we want the new items
         * @param {number} [limit] Limit number of result items per widget
         * @param {Array<string>} [widgets] Limit results to specific widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgetItems: async (oCSAPIRequest: string, sinceIds?: string, limit?: number, widgets?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('dashboardDashboardApiGetWidgetItems', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/dashboard/api/v1/widget-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sinceIds !== undefined) {
                localVarQueryParameter['sinceIds'] = sinceIds;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (widgets) {
                localVarQueryParameter['widgets[]'] = widgets;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the items for the widgets
         * @param {string} oCSAPIRequest 
         * @param {string} [sinceIds] Array indexed by widget Ids, contains date/id from which we want the new items
         * @param {number} [limit] Limit number of result items per widget
         * @param {Array<string>} [widgets] Limit results to specific widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgetItemsV2: async (oCSAPIRequest: string, sinceIds?: string, limit?: number, widgets?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('dashboardDashboardApiGetWidgetItemsV2', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/dashboard/api/v2/widget-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sinceIds !== undefined) {
                localVarQueryParameter['sinceIds'] = sinceIds;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (widgets) {
                localVarQueryParameter['widgets[]'] = widgets;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the widgets
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgets: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('dashboardDashboardApiGetWidgets', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/dashboard/api/v1/widgets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardDashboardApiApi - functional programming interface
 * @export
 */
export const DashboardDashboardApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardDashboardApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the items for the widgets
         * @param {string} oCSAPIRequest 
         * @param {string} [sinceIds] Array indexed by widget Ids, contains date/id from which we want the new items
         * @param {number} [limit] Limit number of result items per widget
         * @param {Array<string>} [widgets] Limit results to specific widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardDashboardApiGetWidgetItems(oCSAPIRequest: string, sinceIds?: string, limit?: number, widgets?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardDashboardApiGetWidgetItems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardDashboardApiGetWidgetItems(oCSAPIRequest, sinceIds, limit, widgets, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the items for the widgets
         * @param {string} oCSAPIRequest 
         * @param {string} [sinceIds] Array indexed by widget Ids, contains date/id from which we want the new items
         * @param {number} [limit] Limit number of result items per widget
         * @param {Array<string>} [widgets] Limit results to specific widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardDashboardApiGetWidgetItemsV2(oCSAPIRequest: string, sinceIds?: string, limit?: number, widgets?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardDashboardApiGetWidgetItemsV2200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardDashboardApiGetWidgetItemsV2(oCSAPIRequest, sinceIds, limit, widgets, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the widgets
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardDashboardApiGetWidgets(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardDashboardApiGetWidgets200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardDashboardApiGetWidgets(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardDashboardApiApi - factory interface
 * @export
 */
export const DashboardDashboardApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardDashboardApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the items for the widgets
         * @param {DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgetItems(requestParameters: DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsRequest, options?: AxiosRequestConfig): AxiosPromise<DashboardDashboardApiGetWidgetItems200Response> {
            return localVarFp.dashboardDashboardApiGetWidgetItems(requestParameters.oCSAPIRequest, requestParameters.sinceIds, requestParameters.limit, requestParameters.widgets, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the items for the widgets
         * @param {DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgetItemsV2(requestParameters: DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2Request, options?: AxiosRequestConfig): AxiosPromise<DashboardDashboardApiGetWidgetItemsV2200Response> {
            return localVarFp.dashboardDashboardApiGetWidgetItemsV2(requestParameters.oCSAPIRequest, requestParameters.sinceIds, requestParameters.limit, requestParameters.widgets, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the widgets
         * @param {DashboardDashboardApiApiDashboardDashboardApiGetWidgetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgets(requestParameters: DashboardDashboardApiApiDashboardDashboardApiGetWidgetsRequest, options?: AxiosRequestConfig): AxiosPromise<DashboardDashboardApiGetWidgets200Response> {
            return localVarFp.dashboardDashboardApiGetWidgets(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for dashboardDashboardApiGetWidgetItems operation in DashboardDashboardApiApi.
 * @export
 * @interface DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsRequest
 */
export interface DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgetItems
     */
    readonly oCSAPIRequest: string

    /**
     * Array indexed by widget Ids, contains date/id from which we want the new items
     * @type {string}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgetItems
     */
    readonly sinceIds?: string

    /**
     * Limit number of result items per widget
     * @type {number}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgetItems
     */
    readonly limit?: number

    /**
     * Limit results to specific widgets
     * @type {Array<string>}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgetItems
     */
    readonly widgets?: Array<string>
}

/**
 * Request parameters for dashboardDashboardApiGetWidgetItemsV2 operation in DashboardDashboardApiApi.
 * @export
 * @interface DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2Request
 */
export interface DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2Request {
    /**
     * 
     * @type {string}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2
     */
    readonly oCSAPIRequest: string

    /**
     * Array indexed by widget Ids, contains date/id from which we want the new items
     * @type {string}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2
     */
    readonly sinceIds?: string

    /**
     * Limit number of result items per widget
     * @type {number}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2
     */
    readonly limit?: number

    /**
     * Limit results to specific widgets
     * @type {Array<string>}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2
     */
    readonly widgets?: Array<string>
}

/**
 * Request parameters for dashboardDashboardApiGetWidgets operation in DashboardDashboardApiApi.
 * @export
 * @interface DashboardDashboardApiApiDashboardDashboardApiGetWidgetsRequest
 */
export interface DashboardDashboardApiApiDashboardDashboardApiGetWidgetsRequest {
    /**
     * 
     * @type {string}
     * @memberof DashboardDashboardApiApiDashboardDashboardApiGetWidgets
     */
    readonly oCSAPIRequest: string
}

/**
 * DashboardDashboardApiApi - object-oriented interface
 * @export
 * @class DashboardDashboardApiApi
 * @extends {BaseAPI}
 */
export class DashboardDashboardApiApi extends BaseAPI {
    /**
     * 
     * @summary Get the items for the widgets
     * @param {DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDashboardApiApi
     */
    public dashboardDashboardApiGetWidgetItems(requestParameters: DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsRequest, options?: AxiosRequestConfig) {
        return DashboardDashboardApiApiFp(this.configuration).dashboardDashboardApiGetWidgetItems(requestParameters.oCSAPIRequest, requestParameters.sinceIds, requestParameters.limit, requestParameters.widgets, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the items for the widgets
     * @param {DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDashboardApiApi
     */
    public dashboardDashboardApiGetWidgetItemsV2(requestParameters: DashboardDashboardApiApiDashboardDashboardApiGetWidgetItemsV2Request, options?: AxiosRequestConfig) {
        return DashboardDashboardApiApiFp(this.configuration).dashboardDashboardApiGetWidgetItemsV2(requestParameters.oCSAPIRequest, requestParameters.sinceIds, requestParameters.limit, requestParameters.widgets, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the widgets
     * @param {DashboardDashboardApiApiDashboardDashboardApiGetWidgetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDashboardApiApi
     */
    public dashboardDashboardApiGetWidgets(requestParameters: DashboardDashboardApiApiDashboardDashboardApiGetWidgetsRequest, options?: AxiosRequestConfig) {
        return DashboardDashboardApiApiFp(this.configuration).dashboardDashboardApiGetWidgets(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DavDirectApi - axios parameter creator
 * @export
 */
export const DavDirectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a direct link to a file
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {number} [expirationTime] Duration until the link expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        davDirectGetUrl: async (fileId: number, oCSAPIRequest: string, expirationTime?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('davDirectGetUrl', 'fileId', fileId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('davDirectGetUrl', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/dav/api/v1/direct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (expirationTime !== undefined) {
                localVarQueryParameter['expirationTime'] = expirationTime;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DavDirectApi - functional programming interface
 * @export
 */
export const DavDirectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DavDirectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a direct link to a file
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {number} [expirationTime] Duration until the link expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async davDirectGetUrl(fileId: number, oCSAPIRequest: string, expirationTime?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DavDirectGetUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.davDirectGetUrl(fileId, oCSAPIRequest, expirationTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DavDirectApi - factory interface
 * @export
 */
export const DavDirectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DavDirectApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a direct link to a file
         * @param {DavDirectApiDavDirectGetUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        davDirectGetUrl(requestParameters: DavDirectApiDavDirectGetUrlRequest, options?: AxiosRequestConfig): AxiosPromise<DavDirectGetUrl200Response> {
            return localVarFp.davDirectGetUrl(requestParameters.fileId, requestParameters.oCSAPIRequest, requestParameters.expirationTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for davDirectGetUrl operation in DavDirectApi.
 * @export
 * @interface DavDirectApiDavDirectGetUrlRequest
 */
export interface DavDirectApiDavDirectGetUrlRequest {
    /**
     * ID of the file
     * @type {number}
     * @memberof DavDirectApiDavDirectGetUrl
     */
    readonly fileId: number

    /**
     * 
     * @type {string}
     * @memberof DavDirectApiDavDirectGetUrl
     */
    readonly oCSAPIRequest: string

    /**
     * Duration until the link expires
     * @type {number}
     * @memberof DavDirectApiDavDirectGetUrl
     */
    readonly expirationTime?: number
}

/**
 * DavDirectApi - object-oriented interface
 * @export
 * @class DavDirectApi
 * @extends {BaseAPI}
 */
export class DavDirectApi extends BaseAPI {
    /**
     * 
     * @summary Get a direct link to a file
     * @param {DavDirectApiDavDirectGetUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DavDirectApi
     */
    public davDirectGetUrl(requestParameters: DavDirectApiDavDirectGetUrlRequest, options?: AxiosRequestConfig) {
        return DavDirectApiFp(this.configuration).davDirectGetUrl(requestParameters.fileId, requestParameters.oCSAPIRequest, requestParameters.expirationTime, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesApiApi - axios parameter creator
 * @export
 */
export const FilesApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets a thumbnail of the specified file
         * @param {number} x Width of the thumbnail
         * @param {number} y Height of the thumbnail
         * @param {string} file URL-encoded filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesApiGetThumbnail: async (x: number, y: number, file: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'x' is not null or undefined
            assertParamExists('filesApiGetThumbnail', 'x', x)
            // verify required parameter 'y' is not null or undefined
            assertParamExists('filesApiGetThumbnail', 'y', y)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('filesApiGetThumbnail', 'file', file)
            const localVarPath = `/index.php/apps/files/api/v1/thumbnail/{x}/{y}/{file}`
                .replace(`{${"x"}}`, encodeURIComponent(String(x)))
                .replace(`{${"y"}}`, encodeURIComponent(String(y)))
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the service-worker Javascript for previews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesApiServiceWorker: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/apps/files/preview-service-worker.js`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApiApi - functional programming interface
 * @export
 */
export const FilesApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets a thumbnail of the specified file
         * @param {number} x Width of the thumbnail
         * @param {number} y Height of the thumbnail
         * @param {string} file URL-encoded filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesApiGetThumbnail(x: number, y: number, file: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesApiGetThumbnail(x, y, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the service-worker Javascript for previews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesApiServiceWorker(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesApiServiceWorker(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApiApi - factory interface
 * @export
 */
export const FilesApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets a thumbnail of the specified file
         * @param {FilesApiApiFilesApiGetThumbnailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesApiGetThumbnail(requestParameters: FilesApiApiFilesApiGetThumbnailRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.filesApiGetThumbnail(requestParameters.x, requestParameters.y, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the service-worker Javascript for previews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesApiServiceWorker(options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.filesApiServiceWorker(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesApiGetThumbnail operation in FilesApiApi.
 * @export
 * @interface FilesApiApiFilesApiGetThumbnailRequest
 */
export interface FilesApiApiFilesApiGetThumbnailRequest {
    /**
     * Width of the thumbnail
     * @type {number}
     * @memberof FilesApiApiFilesApiGetThumbnail
     */
    readonly x: number

    /**
     * Height of the thumbnail
     * @type {number}
     * @memberof FilesApiApiFilesApiGetThumbnail
     */
    readonly y: number

    /**
     * URL-encoded filename
     * @type {string}
     * @memberof FilesApiApiFilesApiGetThumbnail
     */
    readonly file: string
}

/**
 * FilesApiApi - object-oriented interface
 * @export
 * @class FilesApiApi
 * @extends {BaseAPI}
 */
export class FilesApiApi extends BaseAPI {
    /**
     * 
     * @summary Gets a thumbnail of the specified file
     * @param {FilesApiApiFilesApiGetThumbnailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiApi
     */
    public filesApiGetThumbnail(requestParameters: FilesApiApiFilesApiGetThumbnailRequest, options?: AxiosRequestConfig) {
        return FilesApiApiFp(this.configuration).filesApiGetThumbnail(requestParameters.x, requestParameters.y, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the service-worker Javascript for previews
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiApi
     */
    public filesApiServiceWorker(options?: AxiosRequestConfig) {
        return FilesApiApiFp(this.configuration).filesApiServiceWorker(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesDirectEditingApi - axios parameter creator
 * @export
 */
export const FilesDirectEditingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a file for direct editing
         * @param {string} path Path of the file
         * @param {string} editorId ID of the editor
         * @param {string} creatorId ID of the creator
         * @param {string} oCSAPIRequest 
         * @param {string | null} [templateId] ID of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDirectEditingCreate: async (path: string, editorId: string, creatorId: string, oCSAPIRequest: string, templateId?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('filesDirectEditingCreate', 'path', path)
            // verify required parameter 'editorId' is not null or undefined
            assertParamExists('filesDirectEditingCreate', 'editorId', editorId)
            // verify required parameter 'creatorId' is not null or undefined
            assertParamExists('filesDirectEditingCreate', 'creatorId', creatorId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesDirectEditingCreate', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/directEditing/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (editorId !== undefined) {
                localVarQueryParameter['editorId'] = editorId;
            }

            if (creatorId !== undefined) {
                localVarQueryParameter['creatorId'] = creatorId;
            }

            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the direct editing capabilities
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDirectEditingInfo: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesDirectEditingInfo', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/directEditing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Open a file for direct editing
         * @param {string} path Path of the file
         * @param {string} oCSAPIRequest 
         * @param {string | null} [editorId] ID of the editor
         * @param {number | null} [fileId] ID of the file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDirectEditingOpen: async (path: string, oCSAPIRequest: string, editorId?: string | null, fileId?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('filesDirectEditingOpen', 'path', path)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesDirectEditingOpen', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/directEditing/open`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (editorId !== undefined) {
                localVarQueryParameter['editorId'] = editorId;
            }

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the templates for direct editing
         * @param {string} editorId ID of the editor
         * @param {string} creatorId ID of the creator
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDirectEditingTemplates: async (editorId: string, creatorId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editorId' is not null or undefined
            assertParamExists('filesDirectEditingTemplates', 'editorId', editorId)
            // verify required parameter 'creatorId' is not null or undefined
            assertParamExists('filesDirectEditingTemplates', 'creatorId', creatorId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesDirectEditingTemplates', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/directEditing/templates/{editorId}/{creatorId}`
                .replace(`{${"editorId"}}`, encodeURIComponent(String(editorId)))
                .replace(`{${"creatorId"}}`, encodeURIComponent(String(creatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesDirectEditingApi - functional programming interface
 * @export
 */
export const FilesDirectEditingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesDirectEditingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a file for direct editing
         * @param {string} path Path of the file
         * @param {string} editorId ID of the editor
         * @param {string} creatorId ID of the creator
         * @param {string} oCSAPIRequest 
         * @param {string | null} [templateId] ID of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesDirectEditingCreate(path: string, editorId: string, creatorId: string, oCSAPIRequest: string, templateId?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DavDirectGetUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesDirectEditingCreate(path, editorId, creatorId, oCSAPIRequest, templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the direct editing capabilities
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesDirectEditingInfo(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesDirectEditingInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesDirectEditingInfo(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Open a file for direct editing
         * @param {string} path Path of the file
         * @param {string} oCSAPIRequest 
         * @param {string | null} [editorId] ID of the editor
         * @param {number | null} [fileId] ID of the file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesDirectEditingOpen(path: string, oCSAPIRequest: string, editorId?: string | null, fileId?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DavDirectGetUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesDirectEditingOpen(path, oCSAPIRequest, editorId, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the templates for direct editing
         * @param {string} editorId ID of the editor
         * @param {string} creatorId ID of the creator
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesDirectEditingTemplates(editorId: string, creatorId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesDirectEditingTemplates200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesDirectEditingTemplates(editorId, creatorId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesDirectEditingApi - factory interface
 * @export
 */
export const FilesDirectEditingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesDirectEditingApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a file for direct editing
         * @param {FilesDirectEditingApiFilesDirectEditingCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDirectEditingCreate(requestParameters: FilesDirectEditingApiFilesDirectEditingCreateRequest, options?: AxiosRequestConfig): AxiosPromise<DavDirectGetUrl200Response> {
            return localVarFp.filesDirectEditingCreate(requestParameters.path, requestParameters.editorId, requestParameters.creatorId, requestParameters.oCSAPIRequest, requestParameters.templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the direct editing capabilities
         * @param {FilesDirectEditingApiFilesDirectEditingInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDirectEditingInfo(requestParameters: FilesDirectEditingApiFilesDirectEditingInfoRequest, options?: AxiosRequestConfig): AxiosPromise<FilesDirectEditingInfo200Response> {
            return localVarFp.filesDirectEditingInfo(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Open a file for direct editing
         * @param {FilesDirectEditingApiFilesDirectEditingOpenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDirectEditingOpen(requestParameters: FilesDirectEditingApiFilesDirectEditingOpenRequest, options?: AxiosRequestConfig): AxiosPromise<DavDirectGetUrl200Response> {
            return localVarFp.filesDirectEditingOpen(requestParameters.path, requestParameters.oCSAPIRequest, requestParameters.editorId, requestParameters.fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the templates for direct editing
         * @param {FilesDirectEditingApiFilesDirectEditingTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesDirectEditingTemplates(requestParameters: FilesDirectEditingApiFilesDirectEditingTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<FilesDirectEditingTemplates200Response> {
            return localVarFp.filesDirectEditingTemplates(requestParameters.editorId, requestParameters.creatorId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesDirectEditingCreate operation in FilesDirectEditingApi.
 * @export
 * @interface FilesDirectEditingApiFilesDirectEditingCreateRequest
 */
export interface FilesDirectEditingApiFilesDirectEditingCreateRequest {
    /**
     * Path of the file
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingCreate
     */
    readonly path: string

    /**
     * ID of the editor
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingCreate
     */
    readonly editorId: string

    /**
     * ID of the creator
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingCreate
     */
    readonly creatorId: string

    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingCreate
     */
    readonly oCSAPIRequest: string

    /**
     * ID of the template
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingCreate
     */
    readonly templateId?: string | null
}

/**
 * Request parameters for filesDirectEditingInfo operation in FilesDirectEditingApi.
 * @export
 * @interface FilesDirectEditingApiFilesDirectEditingInfoRequest
 */
export interface FilesDirectEditingApiFilesDirectEditingInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingInfo
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesDirectEditingOpen operation in FilesDirectEditingApi.
 * @export
 * @interface FilesDirectEditingApiFilesDirectEditingOpenRequest
 */
export interface FilesDirectEditingApiFilesDirectEditingOpenRequest {
    /**
     * Path of the file
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingOpen
     */
    readonly path: string

    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingOpen
     */
    readonly oCSAPIRequest: string

    /**
     * ID of the editor
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingOpen
     */
    readonly editorId?: string | null

    /**
     * ID of the file
     * @type {number}
     * @memberof FilesDirectEditingApiFilesDirectEditingOpen
     */
    readonly fileId?: number | null
}

/**
 * Request parameters for filesDirectEditingTemplates operation in FilesDirectEditingApi.
 * @export
 * @interface FilesDirectEditingApiFilesDirectEditingTemplatesRequest
 */
export interface FilesDirectEditingApiFilesDirectEditingTemplatesRequest {
    /**
     * ID of the editor
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingTemplates
     */
    readonly editorId: string

    /**
     * ID of the creator
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingTemplates
     */
    readonly creatorId: string

    /**
     * 
     * @type {string}
     * @memberof FilesDirectEditingApiFilesDirectEditingTemplates
     */
    readonly oCSAPIRequest: string
}

/**
 * FilesDirectEditingApi - object-oriented interface
 * @export
 * @class FilesDirectEditingApi
 * @extends {BaseAPI}
 */
export class FilesDirectEditingApi extends BaseAPI {
    /**
     * 
     * @summary Create a file for direct editing
     * @param {FilesDirectEditingApiFilesDirectEditingCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesDirectEditingApi
     */
    public filesDirectEditingCreate(requestParameters: FilesDirectEditingApiFilesDirectEditingCreateRequest, options?: AxiosRequestConfig) {
        return FilesDirectEditingApiFp(this.configuration).filesDirectEditingCreate(requestParameters.path, requestParameters.editorId, requestParameters.creatorId, requestParameters.oCSAPIRequest, requestParameters.templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the direct editing capabilities
     * @param {FilesDirectEditingApiFilesDirectEditingInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesDirectEditingApi
     */
    public filesDirectEditingInfo(requestParameters: FilesDirectEditingApiFilesDirectEditingInfoRequest, options?: AxiosRequestConfig) {
        return FilesDirectEditingApiFp(this.configuration).filesDirectEditingInfo(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Open a file for direct editing
     * @param {FilesDirectEditingApiFilesDirectEditingOpenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesDirectEditingApi
     */
    public filesDirectEditingOpen(requestParameters: FilesDirectEditingApiFilesDirectEditingOpenRequest, options?: AxiosRequestConfig) {
        return FilesDirectEditingApiFp(this.configuration).filesDirectEditingOpen(requestParameters.path, requestParameters.oCSAPIRequest, requestParameters.editorId, requestParameters.fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the templates for direct editing
     * @param {FilesDirectEditingApiFilesDirectEditingTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesDirectEditingApi
     */
    public filesDirectEditingTemplates(requestParameters: FilesDirectEditingApiFilesDirectEditingTemplatesRequest, options?: AxiosRequestConfig) {
        return FilesDirectEditingApiFp(this.configuration).filesDirectEditingTemplates(requestParameters.editorId, requestParameters.creatorId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesExternalApiApi - axios parameter creator
 * @export
 */
export const FilesExternalApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the mount points visible for this user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesExternalApiGetUserMounts: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesExternalApiGetUserMounts', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_external/api/v1/mounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesExternalApiApi - functional programming interface
 * @export
 */
export const FilesExternalApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesExternalApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the mount points visible for this user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesExternalApiGetUserMounts(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesExternalApiGetUserMounts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesExternalApiGetUserMounts(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesExternalApiApi - factory interface
 * @export
 */
export const FilesExternalApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesExternalApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the mount points visible for this user
         * @param {FilesExternalApiApiFilesExternalApiGetUserMountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesExternalApiGetUserMounts(requestParameters: FilesExternalApiApiFilesExternalApiGetUserMountsRequest, options?: AxiosRequestConfig): AxiosPromise<FilesExternalApiGetUserMounts200Response> {
            return localVarFp.filesExternalApiGetUserMounts(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesExternalApiGetUserMounts operation in FilesExternalApiApi.
 * @export
 * @interface FilesExternalApiApiFilesExternalApiGetUserMountsRequest
 */
export interface FilesExternalApiApiFilesExternalApiGetUserMountsRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesExternalApiApiFilesExternalApiGetUserMounts
     */
    readonly oCSAPIRequest: string
}

/**
 * FilesExternalApiApi - object-oriented interface
 * @export
 * @class FilesExternalApiApi
 * @extends {BaseAPI}
 */
export class FilesExternalApiApi extends BaseAPI {
    /**
     * 
     * @summary Get the mount points visible for this user
     * @param {FilesExternalApiApiFilesExternalApiGetUserMountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesExternalApiApi
     */
    public filesExternalApiGetUserMounts(requestParameters: FilesExternalApiApiFilesExternalApiGetUserMountsRequest, options?: AxiosRequestConfig) {
        return FilesExternalApiApiFp(this.configuration).filesExternalApiGetUserMounts(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesOpenLocalEditorApi - axios parameter creator
 * @export
 */
export const FilesOpenLocalEditorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a local editor
         * @param {string} path Path of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesOpenLocalEditorCreate: async (path: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('filesOpenLocalEditorCreate', 'path', path)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesOpenLocalEditorCreate', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/openlocaleditor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate a local editor
         * @param {string} path Path of the file
         * @param {string} token Token of the local editor
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesOpenLocalEditorValidate: async (path: string, token: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('filesOpenLocalEditorValidate', 'path', path)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('filesOpenLocalEditorValidate', 'token', token)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesOpenLocalEditorValidate', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/openlocaleditor/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesOpenLocalEditorApi - functional programming interface
 * @export
 */
export const FilesOpenLocalEditorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesOpenLocalEditorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a local editor
         * @param {string} path Path of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesOpenLocalEditorCreate(path: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesOpenLocalEditorCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesOpenLocalEditorCreate(path, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Validate a local editor
         * @param {string} path Path of the file
         * @param {string} token Token of the local editor
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesOpenLocalEditorValidate(path: string, token: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesOpenLocalEditorValidate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesOpenLocalEditorValidate(path, token, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesOpenLocalEditorApi - factory interface
 * @export
 */
export const FilesOpenLocalEditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesOpenLocalEditorApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a local editor
         * @param {FilesOpenLocalEditorApiFilesOpenLocalEditorCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesOpenLocalEditorCreate(requestParameters: FilesOpenLocalEditorApiFilesOpenLocalEditorCreateRequest, options?: AxiosRequestConfig): AxiosPromise<FilesOpenLocalEditorCreate200Response> {
            return localVarFp.filesOpenLocalEditorCreate(requestParameters.path, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate a local editor
         * @param {FilesOpenLocalEditorApiFilesOpenLocalEditorValidateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesOpenLocalEditorValidate(requestParameters: FilesOpenLocalEditorApiFilesOpenLocalEditorValidateRequest, options?: AxiosRequestConfig): AxiosPromise<FilesOpenLocalEditorValidate200Response> {
            return localVarFp.filesOpenLocalEditorValidate(requestParameters.path, requestParameters.token, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesOpenLocalEditorCreate operation in FilesOpenLocalEditorApi.
 * @export
 * @interface FilesOpenLocalEditorApiFilesOpenLocalEditorCreateRequest
 */
export interface FilesOpenLocalEditorApiFilesOpenLocalEditorCreateRequest {
    /**
     * Path of the file
     * @type {string}
     * @memberof FilesOpenLocalEditorApiFilesOpenLocalEditorCreate
     */
    readonly path: string

    /**
     * 
     * @type {string}
     * @memberof FilesOpenLocalEditorApiFilesOpenLocalEditorCreate
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesOpenLocalEditorValidate operation in FilesOpenLocalEditorApi.
 * @export
 * @interface FilesOpenLocalEditorApiFilesOpenLocalEditorValidateRequest
 */
export interface FilesOpenLocalEditorApiFilesOpenLocalEditorValidateRequest {
    /**
     * Path of the file
     * @type {string}
     * @memberof FilesOpenLocalEditorApiFilesOpenLocalEditorValidate
     */
    readonly path: string

    /**
     * Token of the local editor
     * @type {string}
     * @memberof FilesOpenLocalEditorApiFilesOpenLocalEditorValidate
     */
    readonly token: string

    /**
     * 
     * @type {string}
     * @memberof FilesOpenLocalEditorApiFilesOpenLocalEditorValidate
     */
    readonly oCSAPIRequest: string
}

/**
 * FilesOpenLocalEditorApi - object-oriented interface
 * @export
 * @class FilesOpenLocalEditorApi
 * @extends {BaseAPI}
 */
export class FilesOpenLocalEditorApi extends BaseAPI {
    /**
     * 
     * @summary Create a local editor
     * @param {FilesOpenLocalEditorApiFilesOpenLocalEditorCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesOpenLocalEditorApi
     */
    public filesOpenLocalEditorCreate(requestParameters: FilesOpenLocalEditorApiFilesOpenLocalEditorCreateRequest, options?: AxiosRequestConfig) {
        return FilesOpenLocalEditorApiFp(this.configuration).filesOpenLocalEditorCreate(requestParameters.path, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate a local editor
     * @param {FilesOpenLocalEditorApiFilesOpenLocalEditorValidateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesOpenLocalEditorApi
     */
    public filesOpenLocalEditorValidate(requestParameters: FilesOpenLocalEditorApiFilesOpenLocalEditorValidateRequest, options?: AxiosRequestConfig) {
        return FilesOpenLocalEditorApiFp(this.configuration).filesOpenLocalEditorValidate(requestParameters.path, requestParameters.token, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesRemindersApiApi - axios parameter creator
 * @export
 */
export const FilesRemindersApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a reminder
         * @param {string} version 
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesRemindersApiGet: async (version: string, fileId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('filesRemindersApiGet', 'version', version)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('filesRemindersApiGet', 'fileId', fileId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesRemindersApiGet', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_reminders/api/v{version}/{fileId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a reminder
         * @param {string} version 
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesRemindersApiRemove: async (version: string, fileId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('filesRemindersApiRemove', 'version', version)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('filesRemindersApiRemove', 'fileId', fileId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesRemindersApiRemove', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_reminders/api/v{version}/{fileId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set a reminder
         * @param {string} dueDate ISO 8601 formatted date time string
         * @param {string} version 
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesRemindersApiSet: async (dueDate: string, version: string, fileId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dueDate' is not null or undefined
            assertParamExists('filesRemindersApiSet', 'dueDate', dueDate)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('filesRemindersApiSet', 'version', version)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('filesRemindersApiSet', 'fileId', fileId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesRemindersApiSet', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_reminders/api/v{version}/{fileId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (dueDate !== undefined) {
                localVarQueryParameter['dueDate'] = dueDate;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesRemindersApiApi - functional programming interface
 * @export
 */
export const FilesRemindersApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesRemindersApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a reminder
         * @param {string} version 
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesRemindersApiGet(version: string, fileId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesRemindersApiGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesRemindersApiGet(version, fileId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a reminder
         * @param {string} version 
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesRemindersApiRemove(version: string, fileId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesRemindersApiRemove(version, fileId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set a reminder
         * @param {string} dueDate ISO 8601 formatted date time string
         * @param {string} version 
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesRemindersApiSet(dueDate: string, version: string, fileId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesRemindersApiSet(dueDate, version, fileId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesRemindersApiApi - factory interface
 * @export
 */
export const FilesRemindersApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesRemindersApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a reminder
         * @param {FilesRemindersApiApiFilesRemindersApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesRemindersApiGet(requestParameters: FilesRemindersApiApiFilesRemindersApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<FilesRemindersApiGet200Response> {
            return localVarFp.filesRemindersApiGet(requestParameters.version, requestParameters.fileId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a reminder
         * @param {FilesRemindersApiApiFilesRemindersApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesRemindersApiRemove(requestParameters: FilesRemindersApiApiFilesRemindersApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesRemindersApiRemove(requestParameters.version, requestParameters.fileId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set a reminder
         * @param {FilesRemindersApiApiFilesRemindersApiSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesRemindersApiSet(requestParameters: FilesRemindersApiApiFilesRemindersApiSetRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesRemindersApiSet(requestParameters.dueDate, requestParameters.version, requestParameters.fileId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesRemindersApiGet operation in FilesRemindersApiApi.
 * @export
 * @interface FilesRemindersApiApiFilesRemindersApiGetRequest
 */
export interface FilesRemindersApiApiFilesRemindersApiGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesRemindersApiApiFilesRemindersApiGet
     */
    readonly version: string

    /**
     * ID of the file
     * @type {number}
     * @memberof FilesRemindersApiApiFilesRemindersApiGet
     */
    readonly fileId: number

    /**
     * 
     * @type {string}
     * @memberof FilesRemindersApiApiFilesRemindersApiGet
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesRemindersApiRemove operation in FilesRemindersApiApi.
 * @export
 * @interface FilesRemindersApiApiFilesRemindersApiRemoveRequest
 */
export interface FilesRemindersApiApiFilesRemindersApiRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesRemindersApiApiFilesRemindersApiRemove
     */
    readonly version: string

    /**
     * ID of the file
     * @type {number}
     * @memberof FilesRemindersApiApiFilesRemindersApiRemove
     */
    readonly fileId: number

    /**
     * 
     * @type {string}
     * @memberof FilesRemindersApiApiFilesRemindersApiRemove
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesRemindersApiSet operation in FilesRemindersApiApi.
 * @export
 * @interface FilesRemindersApiApiFilesRemindersApiSetRequest
 */
export interface FilesRemindersApiApiFilesRemindersApiSetRequest {
    /**
     * ISO 8601 formatted date time string
     * @type {string}
     * @memberof FilesRemindersApiApiFilesRemindersApiSet
     */
    readonly dueDate: string

    /**
     * 
     * @type {string}
     * @memberof FilesRemindersApiApiFilesRemindersApiSet
     */
    readonly version: string

    /**
     * ID of the file
     * @type {number}
     * @memberof FilesRemindersApiApiFilesRemindersApiSet
     */
    readonly fileId: number

    /**
     * 
     * @type {string}
     * @memberof FilesRemindersApiApiFilesRemindersApiSet
     */
    readonly oCSAPIRequest: string
}

/**
 * FilesRemindersApiApi - object-oriented interface
 * @export
 * @class FilesRemindersApiApi
 * @extends {BaseAPI}
 */
export class FilesRemindersApiApi extends BaseAPI {
    /**
     * 
     * @summary Get a reminder
     * @param {FilesRemindersApiApiFilesRemindersApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesRemindersApiApi
     */
    public filesRemindersApiGet(requestParameters: FilesRemindersApiApiFilesRemindersApiGetRequest, options?: AxiosRequestConfig) {
        return FilesRemindersApiApiFp(this.configuration).filesRemindersApiGet(requestParameters.version, requestParameters.fileId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a reminder
     * @param {FilesRemindersApiApiFilesRemindersApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesRemindersApiApi
     */
    public filesRemindersApiRemove(requestParameters: FilesRemindersApiApiFilesRemindersApiRemoveRequest, options?: AxiosRequestConfig) {
        return FilesRemindersApiApiFp(this.configuration).filesRemindersApiRemove(requestParameters.version, requestParameters.fileId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set a reminder
     * @param {FilesRemindersApiApiFilesRemindersApiSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesRemindersApiApi
     */
    public filesRemindersApiSet(requestParameters: FilesRemindersApiApiFilesRemindersApiSetRequest, options?: AxiosRequestConfig) {
        return FilesRemindersApiApiFp(this.configuration).filesRemindersApiSet(requestParameters.dueDate, requestParameters.version, requestParameters.fileId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesSharingDeletedShareapiApi - axios parameter creator
 * @export
 */
export const FilesSharingDeletedShareapiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of all deleted shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingDeletedShareapiList: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingDeletedShareapiList', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/deletedshares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Undelete a deleted share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingDeletedShareapiUndelete: async (id: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingDeletedShareapiUndelete', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingDeletedShareapiUndelete', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/deletedshares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingDeletedShareapiApi - functional programming interface
 * @export
 */
export const FilesSharingDeletedShareapiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingDeletedShareapiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of all deleted shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingDeletedShareapiList(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingDeletedShareapiList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingDeletedShareapiList(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Undelete a deleted share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingDeletedShareapiUndelete(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingDeletedShareapiUndelete(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingDeletedShareapiApi - factory interface
 * @export
 */
export const FilesSharingDeletedShareapiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingDeletedShareapiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of all deleted shares
         * @param {FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingDeletedShareapiList(requestParameters: FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiListRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingDeletedShareapiList200Response> {
            return localVarFp.filesSharingDeletedShareapiList(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Undelete a deleted share
         * @param {FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiUndeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingDeletedShareapiUndelete(requestParameters: FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiUndeleteRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingDeletedShareapiUndelete(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesSharingDeletedShareapiList operation in FilesSharingDeletedShareapiApi.
 * @export
 * @interface FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiListRequest
 */
export interface FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiListRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiList
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingDeletedShareapiUndelete operation in FilesSharingDeletedShareapiApi.
 * @export
 * @interface FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiUndeleteRequest
 */
export interface FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiUndeleteRequest {
    /**
     * ID of the share
     * @type {string}
     * @memberof FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiUndelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiUndelete
     */
    readonly oCSAPIRequest: string
}

/**
 * FilesSharingDeletedShareapiApi - object-oriented interface
 * @export
 * @class FilesSharingDeletedShareapiApi
 * @extends {BaseAPI}
 */
export class FilesSharingDeletedShareapiApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of all deleted shares
     * @param {FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingDeletedShareapiApi
     */
    public filesSharingDeletedShareapiList(requestParameters: FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiListRequest, options?: AxiosRequestConfig) {
        return FilesSharingDeletedShareapiApiFp(this.configuration).filesSharingDeletedShareapiList(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Undelete a deleted share
     * @param {FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiUndeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingDeletedShareapiApi
     */
    public filesSharingDeletedShareapiUndelete(requestParameters: FilesSharingDeletedShareapiApiFilesSharingDeletedShareapiUndeleteRequest, options?: AxiosRequestConfig) {
        return FilesSharingDeletedShareapiApiFp(this.configuration).filesSharingDeletedShareapiUndelete(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesSharingPublicPreviewApi - axios parameter creator
 * @export
 */
export const FilesSharingPublicPreviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a direct link preview for a shared file
         * @param {string} token Token of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingPublicPreviewDirectLink: async (token: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('filesSharingPublicPreviewDirectLink', 'token', token)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingPublicPreviewDirectLink', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/index.php/s/{token}/preview`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a preview for a shared file
         * @param {string} token Token of the share
         * @param {string} oCSAPIRequest 
         * @param {string} [file] File in the share
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Whether to not crop the preview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingPublicPreviewGetPreview: async (token: string, oCSAPIRequest: string, file?: string, x?: number, y?: number, a?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('filesSharingPublicPreviewGetPreview', 'token', token)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingPublicPreviewGetPreview', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/index.php/apps/files_sharing/publicpreview/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (a !== undefined) {
                localVarQueryParameter['a'] = a;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingPublicPreviewApi - functional programming interface
 * @export
 */
export const FilesSharingPublicPreviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingPublicPreviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a direct link preview for a shared file
         * @param {string} token Token of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingPublicPreviewDirectLink(token: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingPublicPreviewDirectLink(token, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a preview for a shared file
         * @param {string} token Token of the share
         * @param {string} oCSAPIRequest 
         * @param {string} [file] File in the share
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Whether to not crop the preview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingPublicPreviewGetPreview(token: string, oCSAPIRequest: string, file?: string, x?: number, y?: number, a?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingPublicPreviewGetPreview(token, oCSAPIRequest, file, x, y, a, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingPublicPreviewApi - factory interface
 * @export
 */
export const FilesSharingPublicPreviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingPublicPreviewApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a direct link preview for a shared file
         * @param {FilesSharingPublicPreviewApiFilesSharingPublicPreviewDirectLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingPublicPreviewDirectLink(requestParameters: FilesSharingPublicPreviewApiFilesSharingPublicPreviewDirectLinkRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.filesSharingPublicPreviewDirectLink(requestParameters.token, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a preview for a shared file
         * @param {FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingPublicPreviewGetPreview(requestParameters: FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreviewRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.filesSharingPublicPreviewGetPreview(requestParameters.token, requestParameters.oCSAPIRequest, requestParameters.file, requestParameters.x, requestParameters.y, requestParameters.a, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesSharingPublicPreviewDirectLink operation in FilesSharingPublicPreviewApi.
 * @export
 * @interface FilesSharingPublicPreviewApiFilesSharingPublicPreviewDirectLinkRequest
 */
export interface FilesSharingPublicPreviewApiFilesSharingPublicPreviewDirectLinkRequest {
    /**
     * Token of the share
     * @type {string}
     * @memberof FilesSharingPublicPreviewApiFilesSharingPublicPreviewDirectLink
     */
    readonly token: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingPublicPreviewApiFilesSharingPublicPreviewDirectLink
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingPublicPreviewGetPreview operation in FilesSharingPublicPreviewApi.
 * @export
 * @interface FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreviewRequest
 */
export interface FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreviewRequest {
    /**
     * Token of the share
     * @type {string}
     * @memberof FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreview
     */
    readonly token: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreview
     */
    readonly oCSAPIRequest: string

    /**
     * File in the share
     * @type {string}
     * @memberof FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreview
     */
    readonly file?: string

    /**
     * Width of the preview
     * @type {number}
     * @memberof FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreview
     */
    readonly x?: number

    /**
     * Height of the preview
     * @type {number}
     * @memberof FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreview
     */
    readonly y?: number

    /**
     * Whether to not crop the preview
     * @type {number}
     * @memberof FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreview
     */
    readonly a?: number
}

/**
 * FilesSharingPublicPreviewApi - object-oriented interface
 * @export
 * @class FilesSharingPublicPreviewApi
 * @extends {BaseAPI}
 */
export class FilesSharingPublicPreviewApi extends BaseAPI {
    /**
     * 
     * @summary Get a direct link preview for a shared file
     * @param {FilesSharingPublicPreviewApiFilesSharingPublicPreviewDirectLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingPublicPreviewApi
     */
    public filesSharingPublicPreviewDirectLink(requestParameters: FilesSharingPublicPreviewApiFilesSharingPublicPreviewDirectLinkRequest, options?: AxiosRequestConfig) {
        return FilesSharingPublicPreviewApiFp(this.configuration).filesSharingPublicPreviewDirectLink(requestParameters.token, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a preview for a shared file
     * @param {FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingPublicPreviewApi
     */
    public filesSharingPublicPreviewGetPreview(requestParameters: FilesSharingPublicPreviewApiFilesSharingPublicPreviewGetPreviewRequest, options?: AxiosRequestConfig) {
        return FilesSharingPublicPreviewApiFp(this.configuration).filesSharingPublicPreviewGetPreview(requestParameters.token, requestParameters.oCSAPIRequest, requestParameters.file, requestParameters.x, requestParameters.y, requestParameters.a, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesSharingRemoteApi - axios parameter creator
 * @export
 */
export const FilesSharingRemoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteAcceptShare: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingRemoteAcceptShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteAcceptShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/pending/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteDeclineShare: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingRemoteDeclineShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteDeclineShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/pending/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of pending remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetOpenShares: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteGetOpenShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get info of a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetShare: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingRemoteGetShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteGetShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of accepted remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetShares: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteGetShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unshare a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteUnshare: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingRemoteUnshare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteUnshare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingRemoteApi - functional programming interface
 * @export
 */
export const FilesSharingRemoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingRemoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteAcceptShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteAcceptShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Decline a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteDeclineShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteDeclineShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of pending remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteGetOpenShares(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingRemoteGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteGetOpenShares(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get info of a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteGetShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingRemoteGetShare200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteGetShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of accepted remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteGetShares(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingRemoteGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteGetShares(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unshare a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteUnshare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteUnshare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingRemoteApi - factory interface
 * @export
 */
export const FilesSharingRemoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingRemoteApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept a remote share
         * @param {FilesSharingRemoteApiFilesSharingRemoteAcceptShareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteAcceptShare(requestParameters: FilesSharingRemoteApiFilesSharingRemoteAcceptShareRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingRemoteAcceptShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline a remote share
         * @param {FilesSharingRemoteApiFilesSharingRemoteDeclineShareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteDeclineShare(requestParameters: FilesSharingRemoteApiFilesSharingRemoteDeclineShareRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingRemoteDeclineShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of pending remote shares
         * @param {FilesSharingRemoteApiFilesSharingRemoteGetOpenSharesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetOpenShares(requestParameters: FilesSharingRemoteApiFilesSharingRemoteGetOpenSharesRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingRemoteGetShares200Response> {
            return localVarFp.filesSharingRemoteGetOpenShares(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get info of a remote share
         * @param {FilesSharingRemoteApiFilesSharingRemoteGetShareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetShare(requestParameters: FilesSharingRemoteApiFilesSharingRemoteGetShareRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingRemoteGetShare200Response> {
            return localVarFp.filesSharingRemoteGetShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of accepted remote shares
         * @param {FilesSharingRemoteApiFilesSharingRemoteGetSharesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetShares(requestParameters: FilesSharingRemoteApiFilesSharingRemoteGetSharesRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingRemoteGetShares200Response> {
            return localVarFp.filesSharingRemoteGetShares(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unshare a remote share
         * @param {FilesSharingRemoteApiFilesSharingRemoteUnshareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteUnshare(requestParameters: FilesSharingRemoteApiFilesSharingRemoteUnshareRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingRemoteUnshare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesSharingRemoteAcceptShare operation in FilesSharingRemoteApi.
 * @export
 * @interface FilesSharingRemoteApiFilesSharingRemoteAcceptShareRequest
 */
export interface FilesSharingRemoteApiFilesSharingRemoteAcceptShareRequest {
    /**
     * ID of the share
     * @type {number}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteAcceptShare
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteAcceptShare
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingRemoteDeclineShare operation in FilesSharingRemoteApi.
 * @export
 * @interface FilesSharingRemoteApiFilesSharingRemoteDeclineShareRequest
 */
export interface FilesSharingRemoteApiFilesSharingRemoteDeclineShareRequest {
    /**
     * ID of the share
     * @type {number}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteDeclineShare
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteDeclineShare
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingRemoteGetOpenShares operation in FilesSharingRemoteApi.
 * @export
 * @interface FilesSharingRemoteApiFilesSharingRemoteGetOpenSharesRequest
 */
export interface FilesSharingRemoteApiFilesSharingRemoteGetOpenSharesRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteGetOpenShares
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingRemoteGetShare operation in FilesSharingRemoteApi.
 * @export
 * @interface FilesSharingRemoteApiFilesSharingRemoteGetShareRequest
 */
export interface FilesSharingRemoteApiFilesSharingRemoteGetShareRequest {
    /**
     * ID of the share
     * @type {number}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteGetShare
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteGetShare
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingRemoteGetShares operation in FilesSharingRemoteApi.
 * @export
 * @interface FilesSharingRemoteApiFilesSharingRemoteGetSharesRequest
 */
export interface FilesSharingRemoteApiFilesSharingRemoteGetSharesRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteGetShares
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingRemoteUnshare operation in FilesSharingRemoteApi.
 * @export
 * @interface FilesSharingRemoteApiFilesSharingRemoteUnshareRequest
 */
export interface FilesSharingRemoteApiFilesSharingRemoteUnshareRequest {
    /**
     * ID of the share
     * @type {number}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteUnshare
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteApiFilesSharingRemoteUnshare
     */
    readonly oCSAPIRequest: string
}

/**
 * FilesSharingRemoteApi - object-oriented interface
 * @export
 * @class FilesSharingRemoteApi
 * @extends {BaseAPI}
 */
export class FilesSharingRemoteApi extends BaseAPI {
    /**
     * 
     * @summary Accept a remote share
     * @param {FilesSharingRemoteApiFilesSharingRemoteAcceptShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteAcceptShare(requestParameters: FilesSharingRemoteApiFilesSharingRemoteAcceptShareRequest, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteAcceptShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline a remote share
     * @param {FilesSharingRemoteApiFilesSharingRemoteDeclineShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteDeclineShare(requestParameters: FilesSharingRemoteApiFilesSharingRemoteDeclineShareRequest, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteDeclineShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of pending remote shares
     * @param {FilesSharingRemoteApiFilesSharingRemoteGetOpenSharesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteGetOpenShares(requestParameters: FilesSharingRemoteApiFilesSharingRemoteGetOpenSharesRequest, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteGetOpenShares(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get info of a remote share
     * @param {FilesSharingRemoteApiFilesSharingRemoteGetShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteGetShare(requestParameters: FilesSharingRemoteApiFilesSharingRemoteGetShareRequest, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteGetShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of accepted remote shares
     * @param {FilesSharingRemoteApiFilesSharingRemoteGetSharesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteGetShares(requestParameters: FilesSharingRemoteApiFilesSharingRemoteGetSharesRequest, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteGetShares(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unshare a remote share
     * @param {FilesSharingRemoteApiFilesSharingRemoteUnshareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteUnshare(requestParameters: FilesSharingRemoteApiFilesSharingRemoteUnshareRequest, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteUnshare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesSharingShareInfoApi - axios parameter creator
 * @export
 */
export const FilesSharingShareInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the info about a share
         * @param {string} t Token of the share
         * @param {string | null} [password] Password of the share
         * @param {string | null} [dir] Subdirectory to get info about
         * @param {number} [depth] Maximum depth to get info about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareInfoInfo: async (t: string, password?: string | null, dir?: string | null, depth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 't' is not null or undefined
            assertParamExists('filesSharingShareInfoInfo', 't', t)
            const localVarPath = `/index.php/apps/files_sharing/shareinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (dir !== undefined) {
                localVarQueryParameter['dir'] = dir;
            }

            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingShareInfoApi - functional programming interface
 * @export
 */
export const FilesSharingShareInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingShareInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the info about a share
         * @param {string} t Token of the share
         * @param {string | null} [password] Password of the share
         * @param {string | null} [dir] Subdirectory to get info about
         * @param {number} [depth] Maximum depth to get info about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareInfoInfo(t: string, password?: string | null, dir?: string | null, depth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareInfoInfo(t, password, dir, depth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingShareInfoApi - factory interface
 * @export
 */
export const FilesSharingShareInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingShareInfoApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the info about a share
         * @param {FilesSharingShareInfoApiFilesSharingShareInfoInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareInfoInfo(requestParameters: FilesSharingShareInfoApiFilesSharingShareInfoInfoRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareInfo> {
            return localVarFp.filesSharingShareInfoInfo(requestParameters.t, requestParameters.password, requestParameters.dir, requestParameters.depth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesSharingShareInfoInfo operation in FilesSharingShareInfoApi.
 * @export
 * @interface FilesSharingShareInfoApiFilesSharingShareInfoInfoRequest
 */
export interface FilesSharingShareInfoApiFilesSharingShareInfoInfoRequest {
    /**
     * Token of the share
     * @type {string}
     * @memberof FilesSharingShareInfoApiFilesSharingShareInfoInfo
     */
    readonly t: string

    /**
     * Password of the share
     * @type {string}
     * @memberof FilesSharingShareInfoApiFilesSharingShareInfoInfo
     */
    readonly password?: string | null

    /**
     * Subdirectory to get info about
     * @type {string}
     * @memberof FilesSharingShareInfoApiFilesSharingShareInfoInfo
     */
    readonly dir?: string | null

    /**
     * Maximum depth to get info about
     * @type {number}
     * @memberof FilesSharingShareInfoApiFilesSharingShareInfoInfo
     */
    readonly depth?: number
}

/**
 * FilesSharingShareInfoApi - object-oriented interface
 * @export
 * @class FilesSharingShareInfoApi
 * @extends {BaseAPI}
 */
export class FilesSharingShareInfoApi extends BaseAPI {
    /**
     * 
     * @summary Get the info about a share
     * @param {FilesSharingShareInfoApiFilesSharingShareInfoInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareInfoApi
     */
    public filesSharingShareInfoInfo(requestParameters: FilesSharingShareInfoApiFilesSharingShareInfoInfoRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareInfoApiFp(this.configuration).filesSharingShareInfoInfo(requestParameters.t, requestParameters.password, requestParameters.dir, requestParameters.depth, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesSharingShareapiApi - axios parameter creator
 * @export
 */
export const FilesSharingShareapiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiAcceptShare: async (id: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingShareapiAcceptShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiAcceptShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/pending/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a share
         * @param {string} oCSAPIRequest 
         * @param {string | null} [path] Path of the share
         * @param {number | null} [permissions] Permissions for the share
         * @param {number} [shareType] Type of the share
         * @param {string | null} [shareWith] The entity this should be shared with
         * @param {string} [publicUpload] If public uploading is allowed
         * @param {string} [password] Password for the share
         * @param {string | null} [sendPasswordByTalk] Send the password for the share over Talk
         * @param {string} [expireDate] Expiry date of the share
         * @param {string} [note] Note for the share
         * @param {string} [label] Label for the share (only used in link and email)
         * @param {string | null} [attributes] Additional attributes for the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiCreateShare: async (oCSAPIRequest: string, path?: string | null, permissions?: number | null, shareType?: number, shareWith?: string | null, publicUpload?: string, password?: string, sendPasswordByTalk?: string | null, expireDate?: string, note?: string, label?: string, attributes?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiCreateShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (permissions !== undefined) {
                localVarQueryParameter['permissions'] = permissions;
            }

            if (shareType !== undefined) {
                localVarQueryParameter['shareType'] = shareType;
            }

            if (shareWith !== undefined) {
                localVarQueryParameter['shareWith'] = shareWith;
            }

            if (publicUpload !== undefined) {
                localVarQueryParameter['publicUpload'] = publicUpload;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (sendPasswordByTalk !== undefined) {
                localVarQueryParameter['sendPasswordByTalk'] = sendPasswordByTalk;
            }

            if (expireDate !== undefined) {
                localVarQueryParameter['expireDate'] = expireDate;
            }

            if (note !== undefined) {
                localVarQueryParameter['note'] = note;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiDeleteShare: async (id: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingShareapiDeleteShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiDeleteShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all shares relative to a file, including parent folders shares rights
         * @param {string} path Path all shares will be relative to
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetInheritedShares: async (path: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('filesSharingShareapiGetInheritedShares', 'path', path)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiGetInheritedShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/inherited`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific share by id
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetShare: async (id: string, oCSAPIRequest: string, includeTags?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingShareapiGetShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiGetShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeTags !== undefined) {
                localVarQueryParameter['include_tags'] = includeTags;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get shares of the current user
         * @param {string} oCSAPIRequest 
         * @param {string} [sharedWithMe] Only get shares with the current user
         * @param {string} [reshares] Only get shares by the current user and reshares
         * @param {string} [subfiles] Only get all shares in a folder
         * @param {string} [path] Get shares for a specific path
         * @param {string} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetShares: async (oCSAPIRequest: string, sharedWithMe?: string, reshares?: string, subfiles?: string, path?: string, includeTags?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiGetShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sharedWithMe !== undefined) {
                localVarQueryParameter['shared_with_me'] = sharedWithMe;
            }

            if (reshares !== undefined) {
                localVarQueryParameter['reshares'] = reshares;
            }

            if (subfiles !== undefined) {
                localVarQueryParameter['subfiles'] = subfiles;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (includeTags !== undefined) {
                localVarQueryParameter['include_tags'] = includeTags;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all shares that are still pending
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiPendingShares: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiPendingShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number | null} [permissions] New permissions
         * @param {string | null} [password] New password
         * @param {string | null} [sendPasswordByTalk] New condition if the password should be send over Talk
         * @param {string | null} [publicUpload] New condition if public uploading is allowed
         * @param {string | null} [expireDate] New expiry date
         * @param {string | null} [note] New note
         * @param {string | null} [label] New label
         * @param {string | null} [hideDownload] New condition if the download should be hidden
         * @param {string | null} [attributes] New additional attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiUpdateShare: async (id: string, oCSAPIRequest: string, permissions?: number | null, password?: string | null, sendPasswordByTalk?: string | null, publicUpload?: string | null, expireDate?: string | null, note?: string | null, label?: string | null, hideDownload?: string | null, attributes?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingShareapiUpdateShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiUpdateShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (permissions !== undefined) {
                localVarQueryParameter['permissions'] = permissions;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (sendPasswordByTalk !== undefined) {
                localVarQueryParameter['sendPasswordByTalk'] = sendPasswordByTalk;
            }

            if (publicUpload !== undefined) {
                localVarQueryParameter['publicUpload'] = publicUpload;
            }

            if (expireDate !== undefined) {
                localVarQueryParameter['expireDate'] = expireDate;
            }

            if (note !== undefined) {
                localVarQueryParameter['note'] = note;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (hideDownload !== undefined) {
                localVarQueryParameter['hideDownload'] = hideDownload;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingShareapiApi - functional programming interface
 * @export
 */
export const FilesSharingShareapiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingShareapiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiAcceptShare(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiAcceptShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a share
         * @param {string} oCSAPIRequest 
         * @param {string | null} [path] Path of the share
         * @param {number | null} [permissions] Permissions for the share
         * @param {number} [shareType] Type of the share
         * @param {string | null} [shareWith] The entity this should be shared with
         * @param {string} [publicUpload] If public uploading is allowed
         * @param {string} [password] Password for the share
         * @param {string | null} [sendPasswordByTalk] Send the password for the share over Talk
         * @param {string} [expireDate] Expiry date of the share
         * @param {string} [note] Note for the share
         * @param {string} [label] Label for the share (only used in link and email)
         * @param {string | null} [attributes] Additional attributes for the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiCreateShare(oCSAPIRequest: string, path?: string | null, permissions?: number | null, shareType?: number, shareWith?: string | null, publicUpload?: string, password?: string, sendPasswordByTalk?: string | null, expireDate?: string, note?: string, label?: string, attributes?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiCreateShare200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiCreateShare(oCSAPIRequest, path, permissions, shareType, shareWith, publicUpload, password, sendPasswordByTalk, expireDate, note, label, attributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiDeleteShare(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiDeleteShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all shares relative to a file, including parent folders shares rights
         * @param {string} path Path all shares will be relative to
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiGetInheritedShares(path: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiGetInheritedShares(path, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a specific share by id
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiGetShare(id: string, oCSAPIRequest: string, includeTags?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiCreateShare200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiGetShare(id, oCSAPIRequest, includeTags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get shares of the current user
         * @param {string} oCSAPIRequest 
         * @param {string} [sharedWithMe] Only get shares with the current user
         * @param {string} [reshares] Only get shares by the current user and reshares
         * @param {string} [subfiles] Only get all shares in a folder
         * @param {string} [path] Get shares for a specific path
         * @param {string} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiGetShares(oCSAPIRequest: string, sharedWithMe?: string, reshares?: string, subfiles?: string, path?: string, includeTags?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiGetShares(oCSAPIRequest, sharedWithMe, reshares, subfiles, path, includeTags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all shares that are still pending
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiPendingShares(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiPendingShares(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number | null} [permissions] New permissions
         * @param {string | null} [password] New password
         * @param {string | null} [sendPasswordByTalk] New condition if the password should be send over Talk
         * @param {string | null} [publicUpload] New condition if public uploading is allowed
         * @param {string | null} [expireDate] New expiry date
         * @param {string | null} [note] New note
         * @param {string | null} [label] New label
         * @param {string | null} [hideDownload] New condition if the download should be hidden
         * @param {string | null} [attributes] New additional attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiUpdateShare(id: string, oCSAPIRequest: string, permissions?: number | null, password?: string | null, sendPasswordByTalk?: string | null, publicUpload?: string | null, expireDate?: string | null, note?: string | null, label?: string | null, hideDownload?: string | null, attributes?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiCreateShare200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiUpdateShare(id, oCSAPIRequest, permissions, password, sendPasswordByTalk, publicUpload, expireDate, note, label, hideDownload, attributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingShareapiApi - factory interface
 * @export
 */
export const FilesSharingShareapiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingShareapiApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept a share
         * @param {FilesSharingShareapiApiFilesSharingShareapiAcceptShareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiAcceptShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiAcceptShareRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingShareapiAcceptShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a share
         * @param {FilesSharingShareapiApiFilesSharingShareapiCreateShareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiCreateShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiCreateShareRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareapiCreateShare200Response> {
            return localVarFp.filesSharingShareapiCreateShare(requestParameters.oCSAPIRequest, requestParameters.path, requestParameters.permissions, requestParameters.shareType, requestParameters.shareWith, requestParameters.publicUpload, requestParameters.password, requestParameters.sendPasswordByTalk, requestParameters.expireDate, requestParameters.note, requestParameters.label, requestParameters.attributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a share
         * @param {FilesSharingShareapiApiFilesSharingShareapiDeleteShareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiDeleteShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiDeleteShareRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingShareapiDeleteShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all shares relative to a file, including parent folders shares rights
         * @param {FilesSharingShareapiApiFilesSharingShareapiGetInheritedSharesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetInheritedShares(requestParameters: FilesSharingShareapiApiFilesSharingShareapiGetInheritedSharesRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareapiGetShares200Response> {
            return localVarFp.filesSharingShareapiGetInheritedShares(requestParameters.path, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific share by id
         * @param {FilesSharingShareapiApiFilesSharingShareapiGetShareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiGetShareRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareapiCreateShare200Response> {
            return localVarFp.filesSharingShareapiGetShare(requestParameters.id, requestParameters.oCSAPIRequest, requestParameters.includeTags, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get shares of the current user
         * @param {FilesSharingShareapiApiFilesSharingShareapiGetSharesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetShares(requestParameters: FilesSharingShareapiApiFilesSharingShareapiGetSharesRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareapiGetShares200Response> {
            return localVarFp.filesSharingShareapiGetShares(requestParameters.oCSAPIRequest, requestParameters.sharedWithMe, requestParameters.reshares, requestParameters.subfiles, requestParameters.path, requestParameters.includeTags, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all shares that are still pending
         * @param {FilesSharingShareapiApiFilesSharingShareapiPendingSharesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiPendingShares(requestParameters: FilesSharingShareapiApiFilesSharingShareapiPendingSharesRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareapiGetShares200Response> {
            return localVarFp.filesSharingShareapiPendingShares(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a share
         * @param {FilesSharingShareapiApiFilesSharingShareapiUpdateShareRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiUpdateShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiUpdateShareRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareapiCreateShare200Response> {
            return localVarFp.filesSharingShareapiUpdateShare(requestParameters.id, requestParameters.oCSAPIRequest, requestParameters.permissions, requestParameters.password, requestParameters.sendPasswordByTalk, requestParameters.publicUpload, requestParameters.expireDate, requestParameters.note, requestParameters.label, requestParameters.hideDownload, requestParameters.attributes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesSharingShareapiAcceptShare operation in FilesSharingShareapiApi.
 * @export
 * @interface FilesSharingShareapiApiFilesSharingShareapiAcceptShareRequest
 */
export interface FilesSharingShareapiApiFilesSharingShareapiAcceptShareRequest {
    /**
     * ID of the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiAcceptShare
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiAcceptShare
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingShareapiCreateShare operation in FilesSharingShareapiApi.
 * @export
 * @interface FilesSharingShareapiApiFilesSharingShareapiCreateShareRequest
 */
export interface FilesSharingShareapiApiFilesSharingShareapiCreateShareRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly oCSAPIRequest: string

    /**
     * Path of the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly path?: string | null

    /**
     * Permissions for the share
     * @type {number}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly permissions?: number | null

    /**
     * Type of the share
     * @type {number}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly shareType?: number

    /**
     * The entity this should be shared with
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly shareWith?: string | null

    /**
     * If public uploading is allowed
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly publicUpload?: string

    /**
     * Password for the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly password?: string

    /**
     * Send the password for the share over Talk
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly sendPasswordByTalk?: string | null

    /**
     * Expiry date of the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly expireDate?: string

    /**
     * Note for the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly note?: string

    /**
     * Label for the share (only used in link and email)
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly label?: string

    /**
     * Additional attributes for the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiCreateShare
     */
    readonly attributes?: string | null
}

/**
 * Request parameters for filesSharingShareapiDeleteShare operation in FilesSharingShareapiApi.
 * @export
 * @interface FilesSharingShareapiApiFilesSharingShareapiDeleteShareRequest
 */
export interface FilesSharingShareapiApiFilesSharingShareapiDeleteShareRequest {
    /**
     * ID of the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiDeleteShare
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiDeleteShare
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingShareapiGetInheritedShares operation in FilesSharingShareapiApi.
 * @export
 * @interface FilesSharingShareapiApiFilesSharingShareapiGetInheritedSharesRequest
 */
export interface FilesSharingShareapiApiFilesSharingShareapiGetInheritedSharesRequest {
    /**
     * Path all shares will be relative to
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetInheritedShares
     */
    readonly path: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetInheritedShares
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingShareapiGetShare operation in FilesSharingShareapiApi.
 * @export
 * @interface FilesSharingShareapiApiFilesSharingShareapiGetShareRequest
 */
export interface FilesSharingShareapiApiFilesSharingShareapiGetShareRequest {
    /**
     * ID of the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShare
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShare
     */
    readonly oCSAPIRequest: string

    /**
     * Include tags in the share
     * @type {number}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShare
     */
    readonly includeTags?: number
}

/**
 * Request parameters for filesSharingShareapiGetShares operation in FilesSharingShareapiApi.
 * @export
 * @interface FilesSharingShareapiApiFilesSharingShareapiGetSharesRequest
 */
export interface FilesSharingShareapiApiFilesSharingShareapiGetSharesRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShares
     */
    readonly oCSAPIRequest: string

    /**
     * Only get shares with the current user
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShares
     */
    readonly sharedWithMe?: string

    /**
     * Only get shares by the current user and reshares
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShares
     */
    readonly reshares?: string

    /**
     * Only get all shares in a folder
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShares
     */
    readonly subfiles?: string

    /**
     * Get shares for a specific path
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShares
     */
    readonly path?: string

    /**
     * Include tags in the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiGetShares
     */
    readonly includeTags?: string
}

/**
 * Request parameters for filesSharingShareapiPendingShares operation in FilesSharingShareapiApi.
 * @export
 * @interface FilesSharingShareapiApiFilesSharingShareapiPendingSharesRequest
 */
export interface FilesSharingShareapiApiFilesSharingShareapiPendingSharesRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiPendingShares
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesSharingShareapiUpdateShare operation in FilesSharingShareapiApi.
 * @export
 * @interface FilesSharingShareapiApiFilesSharingShareapiUpdateShareRequest
 */
export interface FilesSharingShareapiApiFilesSharingShareapiUpdateShareRequest {
    /**
     * ID of the share
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly oCSAPIRequest: string

    /**
     * New permissions
     * @type {number}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly permissions?: number | null

    /**
     * New password
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly password?: string | null

    /**
     * New condition if the password should be send over Talk
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly sendPasswordByTalk?: string | null

    /**
     * New condition if public uploading is allowed
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly publicUpload?: string | null

    /**
     * New expiry date
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly expireDate?: string | null

    /**
     * New note
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly note?: string | null

    /**
     * New label
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly label?: string | null

    /**
     * New condition if the download should be hidden
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly hideDownload?: string | null

    /**
     * New additional attributes
     * @type {string}
     * @memberof FilesSharingShareapiApiFilesSharingShareapiUpdateShare
     */
    readonly attributes?: string | null
}

/**
 * FilesSharingShareapiApi - object-oriented interface
 * @export
 * @class FilesSharingShareapiApi
 * @extends {BaseAPI}
 */
export class FilesSharingShareapiApi extends BaseAPI {
    /**
     * 
     * @summary Accept a share
     * @param {FilesSharingShareapiApiFilesSharingShareapiAcceptShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiAcceptShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiAcceptShareRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiAcceptShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a share
     * @param {FilesSharingShareapiApiFilesSharingShareapiCreateShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiCreateShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiCreateShareRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiCreateShare(requestParameters.oCSAPIRequest, requestParameters.path, requestParameters.permissions, requestParameters.shareType, requestParameters.shareWith, requestParameters.publicUpload, requestParameters.password, requestParameters.sendPasswordByTalk, requestParameters.expireDate, requestParameters.note, requestParameters.label, requestParameters.attributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a share
     * @param {FilesSharingShareapiApiFilesSharingShareapiDeleteShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiDeleteShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiDeleteShareRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiDeleteShare(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all shares relative to a file, including parent folders shares rights
     * @param {FilesSharingShareapiApiFilesSharingShareapiGetInheritedSharesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiGetInheritedShares(requestParameters: FilesSharingShareapiApiFilesSharingShareapiGetInheritedSharesRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiGetInheritedShares(requestParameters.path, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific share by id
     * @param {FilesSharingShareapiApiFilesSharingShareapiGetShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiGetShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiGetShareRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiGetShare(requestParameters.id, requestParameters.oCSAPIRequest, requestParameters.includeTags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get shares of the current user
     * @param {FilesSharingShareapiApiFilesSharingShareapiGetSharesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiGetShares(requestParameters: FilesSharingShareapiApiFilesSharingShareapiGetSharesRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiGetShares(requestParameters.oCSAPIRequest, requestParameters.sharedWithMe, requestParameters.reshares, requestParameters.subfiles, requestParameters.path, requestParameters.includeTags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all shares that are still pending
     * @param {FilesSharingShareapiApiFilesSharingShareapiPendingSharesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiPendingShares(requestParameters: FilesSharingShareapiApiFilesSharingShareapiPendingSharesRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiPendingShares(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a share
     * @param {FilesSharingShareapiApiFilesSharingShareapiUpdateShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiUpdateShare(requestParameters: FilesSharingShareapiApiFilesSharingShareapiUpdateShareRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiUpdateShare(requestParameters.id, requestParameters.oCSAPIRequest, requestParameters.permissions, requestParameters.password, requestParameters.sendPasswordByTalk, requestParameters.publicUpload, requestParameters.expireDate, requestParameters.note, requestParameters.label, requestParameters.hideDownload, requestParameters.attributes, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesSharingShareesapiApi - axios parameter creator
 * @export
 */
export const FilesSharingShareesapiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find recommended sharees
         * @param {string} itemType Limit to specific item types
         * @param {string} oCSAPIRequest 
         * @param {string | null} [shareType] Limit to specific share types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareesapiFindRecommended: async (itemType: string, oCSAPIRequest: string, shareType?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('filesSharingShareesapiFindRecommended', 'itemType', itemType)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareesapiFindRecommended', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/sharees_recommended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (shareType !== undefined) {
                localVarQueryParameter['shareType'] = shareType;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search for sharees
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {string | null} [itemType] Limit to specific item types
         * @param {number} [page] Page offset for searching
         * @param {number} [perPage] Limit amount of search results per page
         * @param {string | null} [shareType] Limit to specific share types
         * @param {number} [lookup] If a global lookup should be performed too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareesapiSearch: async (oCSAPIRequest: string, search?: string, itemType?: string | null, page?: number, perPage?: number, shareType?: string | null, lookup?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareesapiSearch', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/sharees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (shareType !== undefined) {
                localVarQueryParameter['shareType'] = shareType;
            }

            if (lookup !== undefined) {
                localVarQueryParameter['lookup'] = lookup;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingShareesapiApi - functional programming interface
 * @export
 */
export const FilesSharingShareesapiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingShareesapiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find recommended sharees
         * @param {string} itemType Limit to specific item types
         * @param {string} oCSAPIRequest 
         * @param {string | null} [shareType] Limit to specific share types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareesapiFindRecommended(itemType: string, oCSAPIRequest: string, shareType?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareesapiFindRecommended200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareesapiFindRecommended(itemType, oCSAPIRequest, shareType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search for sharees
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {string | null} [itemType] Limit to specific item types
         * @param {number} [page] Page offset for searching
         * @param {number} [perPage] Limit amount of search results per page
         * @param {string | null} [shareType] Limit to specific share types
         * @param {number} [lookup] If a global lookup should be performed too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareesapiSearch(oCSAPIRequest: string, search?: string, itemType?: string | null, page?: number, perPage?: number, shareType?: string | null, lookup?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareesapiSearch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareesapiSearch(oCSAPIRequest, search, itemType, page, perPage, shareType, lookup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingShareesapiApi - factory interface
 * @export
 */
export const FilesSharingShareesapiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingShareesapiApiFp(configuration)
    return {
        /**
         * 
         * @summary Find recommended sharees
         * @param {FilesSharingShareesapiApiFilesSharingShareesapiFindRecommendedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareesapiFindRecommended(requestParameters: FilesSharingShareesapiApiFilesSharingShareesapiFindRecommendedRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareesapiFindRecommended200Response> {
            return localVarFp.filesSharingShareesapiFindRecommended(requestParameters.itemType, requestParameters.oCSAPIRequest, requestParameters.shareType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search for sharees
         * @param {FilesSharingShareesapiApiFilesSharingShareesapiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareesapiSearch(requestParameters: FilesSharingShareesapiApiFilesSharingShareesapiSearchRequest, options?: AxiosRequestConfig): AxiosPromise<FilesSharingShareesapiSearch200Response> {
            return localVarFp.filesSharingShareesapiSearch(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.itemType, requestParameters.page, requestParameters.perPage, requestParameters.shareType, requestParameters.lookup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesSharingShareesapiFindRecommended operation in FilesSharingShareesapiApi.
 * @export
 * @interface FilesSharingShareesapiApiFilesSharingShareesapiFindRecommendedRequest
 */
export interface FilesSharingShareesapiApiFilesSharingShareesapiFindRecommendedRequest {
    /**
     * Limit to specific item types
     * @type {string}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiFindRecommended
     */
    readonly itemType: string

    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiFindRecommended
     */
    readonly oCSAPIRequest: string

    /**
     * Limit to specific share types
     * @type {string}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiFindRecommended
     */
    readonly shareType?: string | null
}

/**
 * Request parameters for filesSharingShareesapiSearch operation in FilesSharingShareesapiApi.
 * @export
 * @interface FilesSharingShareesapiApiFilesSharingShareesapiSearchRequest
 */
export interface FilesSharingShareesapiApiFilesSharingShareesapiSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiSearch
     */
    readonly oCSAPIRequest: string

    /**
     * Text to search for
     * @type {string}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiSearch
     */
    readonly search?: string

    /**
     * Limit to specific item types
     * @type {string}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiSearch
     */
    readonly itemType?: string | null

    /**
     * Page offset for searching
     * @type {number}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiSearch
     */
    readonly page?: number

    /**
     * Limit amount of search results per page
     * @type {number}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiSearch
     */
    readonly perPage?: number

    /**
     * Limit to specific share types
     * @type {string}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiSearch
     */
    readonly shareType?: string | null

    /**
     * If a global lookup should be performed too
     * @type {number}
     * @memberof FilesSharingShareesapiApiFilesSharingShareesapiSearch
     */
    readonly lookup?: number
}

/**
 * FilesSharingShareesapiApi - object-oriented interface
 * @export
 * @class FilesSharingShareesapiApi
 * @extends {BaseAPI}
 */
export class FilesSharingShareesapiApi extends BaseAPI {
    /**
     * 
     * @summary Find recommended sharees
     * @param {FilesSharingShareesapiApiFilesSharingShareesapiFindRecommendedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareesapiApi
     */
    public filesSharingShareesapiFindRecommended(requestParameters: FilesSharingShareesapiApiFilesSharingShareesapiFindRecommendedRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareesapiApiFp(this.configuration).filesSharingShareesapiFindRecommended(requestParameters.itemType, requestParameters.oCSAPIRequest, requestParameters.shareType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search for sharees
     * @param {FilesSharingShareesapiApiFilesSharingShareesapiSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareesapiApi
     */
    public filesSharingShareesapiSearch(requestParameters: FilesSharingShareesapiApiFilesSharingShareesapiSearchRequest, options?: AxiosRequestConfig) {
        return FilesSharingShareesapiApiFp(this.configuration).filesSharingShareesapiSearch(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.itemType, requestParameters.page, requestParameters.perPage, requestParameters.shareType, requestParameters.lookup, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesTemplateApi - axios parameter creator
 * @export
 */
export const FilesTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a template
         * @param {string} filePath Path of the file
         * @param {string} oCSAPIRequest 
         * @param {string} [templatePath] Name of the template
         * @param {string} [templateType] Type of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTemplateCreate: async (filePath: string, oCSAPIRequest: string, templatePath?: string, templateType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filePath' is not null or undefined
            assertParamExists('filesTemplateCreate', 'filePath', filePath)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesTemplateCreate', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/templates/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filePath !== undefined) {
                localVarQueryParameter['filePath'] = filePath;
            }

            if (templatePath !== undefined) {
                localVarQueryParameter['templatePath'] = templatePath;
            }

            if (templateType !== undefined) {
                localVarQueryParameter['templateType'] = templateType;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List the available templates
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTemplateList: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesTemplateList', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initialize the template directory
         * @param {string} oCSAPIRequest 
         * @param {string} [templatePath] Path of the template directory
         * @param {number} [copySystemTemplates] Whether to copy the system templates to the template directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTemplatePath: async (oCSAPIRequest: string, templatePath?: string, copySystemTemplates?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesTemplatePath', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/templates/path`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (templatePath !== undefined) {
                localVarQueryParameter['templatePath'] = templatePath;
            }

            if (copySystemTemplates !== undefined) {
                localVarQueryParameter['copySystemTemplates'] = copySystemTemplates;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesTemplateApi - functional programming interface
 * @export
 */
export const FilesTemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesTemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a template
         * @param {string} filePath Path of the file
         * @param {string} oCSAPIRequest 
         * @param {string} [templatePath] Name of the template
         * @param {string} [templateType] Type of the template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesTemplateCreate(filePath: string, oCSAPIRequest: string, templatePath?: string, templateType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesTemplateCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesTemplateCreate(filePath, oCSAPIRequest, templatePath, templateType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List the available templates
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesTemplateList(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesTemplateList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesTemplateList(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Initialize the template directory
         * @param {string} oCSAPIRequest 
         * @param {string} [templatePath] Path of the template directory
         * @param {number} [copySystemTemplates] Whether to copy the system templates to the template directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesTemplatePath(oCSAPIRequest: string, templatePath?: string, copySystemTemplates?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesTemplatePath200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesTemplatePath(oCSAPIRequest, templatePath, copySystemTemplates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesTemplateApi - factory interface
 * @export
 */
export const FilesTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesTemplateApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a template
         * @param {FilesTemplateApiFilesTemplateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTemplateCreate(requestParameters: FilesTemplateApiFilesTemplateCreateRequest, options?: AxiosRequestConfig): AxiosPromise<FilesTemplateCreate200Response> {
            return localVarFp.filesTemplateCreate(requestParameters.filePath, requestParameters.oCSAPIRequest, requestParameters.templatePath, requestParameters.templateType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List the available templates
         * @param {FilesTemplateApiFilesTemplateListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTemplateList(requestParameters: FilesTemplateApiFilesTemplateListRequest, options?: AxiosRequestConfig): AxiosPromise<FilesTemplateList200Response> {
            return localVarFp.filesTemplateList(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initialize the template directory
         * @param {FilesTemplateApiFilesTemplatePathRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTemplatePath(requestParameters: FilesTemplateApiFilesTemplatePathRequest, options?: AxiosRequestConfig): AxiosPromise<FilesTemplatePath200Response> {
            return localVarFp.filesTemplatePath(requestParameters.oCSAPIRequest, requestParameters.templatePath, requestParameters.copySystemTemplates, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesTemplateCreate operation in FilesTemplateApi.
 * @export
 * @interface FilesTemplateApiFilesTemplateCreateRequest
 */
export interface FilesTemplateApiFilesTemplateCreateRequest {
    /**
     * Path of the file
     * @type {string}
     * @memberof FilesTemplateApiFilesTemplateCreate
     */
    readonly filePath: string

    /**
     * 
     * @type {string}
     * @memberof FilesTemplateApiFilesTemplateCreate
     */
    readonly oCSAPIRequest: string

    /**
     * Name of the template
     * @type {string}
     * @memberof FilesTemplateApiFilesTemplateCreate
     */
    readonly templatePath?: string

    /**
     * Type of the template
     * @type {string}
     * @memberof FilesTemplateApiFilesTemplateCreate
     */
    readonly templateType?: string
}

/**
 * Request parameters for filesTemplateList operation in FilesTemplateApi.
 * @export
 * @interface FilesTemplateApiFilesTemplateListRequest
 */
export interface FilesTemplateApiFilesTemplateListRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateApiFilesTemplateList
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesTemplatePath operation in FilesTemplateApi.
 * @export
 * @interface FilesTemplateApiFilesTemplatePathRequest
 */
export interface FilesTemplateApiFilesTemplatePathRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesTemplateApiFilesTemplatePath
     */
    readonly oCSAPIRequest: string

    /**
     * Path of the template directory
     * @type {string}
     * @memberof FilesTemplateApiFilesTemplatePath
     */
    readonly templatePath?: string

    /**
     * Whether to copy the system templates to the template directory
     * @type {number}
     * @memberof FilesTemplateApiFilesTemplatePath
     */
    readonly copySystemTemplates?: number
}

/**
 * FilesTemplateApi - object-oriented interface
 * @export
 * @class FilesTemplateApi
 * @extends {BaseAPI}
 */
export class FilesTemplateApi extends BaseAPI {
    /**
     * 
     * @summary Create a template
     * @param {FilesTemplateApiFilesTemplateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesTemplateApi
     */
    public filesTemplateCreate(requestParameters: FilesTemplateApiFilesTemplateCreateRequest, options?: AxiosRequestConfig) {
        return FilesTemplateApiFp(this.configuration).filesTemplateCreate(requestParameters.filePath, requestParameters.oCSAPIRequest, requestParameters.templatePath, requestParameters.templateType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List the available templates
     * @param {FilesTemplateApiFilesTemplateListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesTemplateApi
     */
    public filesTemplateList(requestParameters: FilesTemplateApiFilesTemplateListRequest, options?: AxiosRequestConfig) {
        return FilesTemplateApiFp(this.configuration).filesTemplateList(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initialize the template directory
     * @param {FilesTemplateApiFilesTemplatePathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesTemplateApi
     */
    public filesTemplatePath(requestParameters: FilesTemplateApiFilesTemplatePathRequest, options?: AxiosRequestConfig) {
        return FilesTemplateApiFp(this.configuration).filesTemplatePath(requestParameters.oCSAPIRequest, requestParameters.templatePath, requestParameters.copySystemTemplates, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesTransferOwnershipApi - axios parameter creator
 * @export
 */
export const FilesTransferOwnershipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept an ownership transfer
         * @param {number} id ID of the ownership transfer
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTransferOwnershipAccept: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesTransferOwnershipAccept', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesTransferOwnershipAccept', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/transferownership/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reject an ownership transfer
         * @param {number} id ID of the ownership transfer
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTransferOwnershipReject: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesTransferOwnershipReject', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesTransferOwnershipReject', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/transferownership/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transfer the ownership to another user
         * @param {string} recipient Username of the recipient
         * @param {string} path Path of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTransferOwnershipTransfer: async (recipient: string, path: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipient' is not null or undefined
            assertParamExists('filesTransferOwnershipTransfer', 'recipient', recipient)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('filesTransferOwnershipTransfer', 'path', path)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesTransferOwnershipTransfer', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files/api/v1/transferownership`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesTransferOwnershipApi - functional programming interface
 * @export
 */
export const FilesTransferOwnershipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesTransferOwnershipApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept an ownership transfer
         * @param {number} id ID of the ownership transfer
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesTransferOwnershipAccept(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesTransferOwnershipAccept(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reject an ownership transfer
         * @param {number} id ID of the ownership transfer
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesTransferOwnershipReject(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesTransferOwnershipReject(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Transfer the ownership to another user
         * @param {string} recipient Username of the recipient
         * @param {string} path Path of the file
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesTransferOwnershipTransfer(recipient: string, path: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesTransferOwnershipTransfer(recipient, path, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesTransferOwnershipApi - factory interface
 * @export
 */
export const FilesTransferOwnershipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesTransferOwnershipApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept an ownership transfer
         * @param {FilesTransferOwnershipApiFilesTransferOwnershipAcceptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTransferOwnershipAccept(requestParameters: FilesTransferOwnershipApiFilesTransferOwnershipAcceptRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesTransferOwnershipAccept(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reject an ownership transfer
         * @param {FilesTransferOwnershipApiFilesTransferOwnershipRejectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTransferOwnershipReject(requestParameters: FilesTransferOwnershipApiFilesTransferOwnershipRejectRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesTransferOwnershipReject(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transfer the ownership to another user
         * @param {FilesTransferOwnershipApiFilesTransferOwnershipTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTransferOwnershipTransfer(requestParameters: FilesTransferOwnershipApiFilesTransferOwnershipTransferRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesTransferOwnershipTransfer(requestParameters.recipient, requestParameters.path, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesTransferOwnershipAccept operation in FilesTransferOwnershipApi.
 * @export
 * @interface FilesTransferOwnershipApiFilesTransferOwnershipAcceptRequest
 */
export interface FilesTransferOwnershipApiFilesTransferOwnershipAcceptRequest {
    /**
     * ID of the ownership transfer
     * @type {number}
     * @memberof FilesTransferOwnershipApiFilesTransferOwnershipAccept
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof FilesTransferOwnershipApiFilesTransferOwnershipAccept
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesTransferOwnershipReject operation in FilesTransferOwnershipApi.
 * @export
 * @interface FilesTransferOwnershipApiFilesTransferOwnershipRejectRequest
 */
export interface FilesTransferOwnershipApiFilesTransferOwnershipRejectRequest {
    /**
     * ID of the ownership transfer
     * @type {number}
     * @memberof FilesTransferOwnershipApiFilesTransferOwnershipReject
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof FilesTransferOwnershipApiFilesTransferOwnershipReject
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for filesTransferOwnershipTransfer operation in FilesTransferOwnershipApi.
 * @export
 * @interface FilesTransferOwnershipApiFilesTransferOwnershipTransferRequest
 */
export interface FilesTransferOwnershipApiFilesTransferOwnershipTransferRequest {
    /**
     * Username of the recipient
     * @type {string}
     * @memberof FilesTransferOwnershipApiFilesTransferOwnershipTransfer
     */
    readonly recipient: string

    /**
     * Path of the file
     * @type {string}
     * @memberof FilesTransferOwnershipApiFilesTransferOwnershipTransfer
     */
    readonly path: string

    /**
     * 
     * @type {string}
     * @memberof FilesTransferOwnershipApiFilesTransferOwnershipTransfer
     */
    readonly oCSAPIRequest: string
}

/**
 * FilesTransferOwnershipApi - object-oriented interface
 * @export
 * @class FilesTransferOwnershipApi
 * @extends {BaseAPI}
 */
export class FilesTransferOwnershipApi extends BaseAPI {
    /**
     * 
     * @summary Accept an ownership transfer
     * @param {FilesTransferOwnershipApiFilesTransferOwnershipAcceptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesTransferOwnershipApi
     */
    public filesTransferOwnershipAccept(requestParameters: FilesTransferOwnershipApiFilesTransferOwnershipAcceptRequest, options?: AxiosRequestConfig) {
        return FilesTransferOwnershipApiFp(this.configuration).filesTransferOwnershipAccept(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reject an ownership transfer
     * @param {FilesTransferOwnershipApiFilesTransferOwnershipRejectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesTransferOwnershipApi
     */
    public filesTransferOwnershipReject(requestParameters: FilesTransferOwnershipApiFilesTransferOwnershipRejectRequest, options?: AxiosRequestConfig) {
        return FilesTransferOwnershipApiFp(this.configuration).filesTransferOwnershipReject(requestParameters.id, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transfer the ownership to another user
     * @param {FilesTransferOwnershipApiFilesTransferOwnershipTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesTransferOwnershipApi
     */
    public filesTransferOwnershipTransfer(requestParameters: FilesTransferOwnershipApiFilesTransferOwnershipTransferRequest, options?: AxiosRequestConfig) {
        return FilesTransferOwnershipApiFp(this.configuration).filesTransferOwnershipTransfer(requestParameters.recipient, requestParameters.path, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesTrashbinPreviewApi - axios parameter creator
 * @export
 */
export const FilesTrashbinPreviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the preview for a file
         * @param {number} [fileId] ID of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Whether to not crop the preview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTrashbinPreviewGetPreview: async (fileId?: number, x?: number, y?: number, a?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/apps/files_trashbin/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (a !== undefined) {
                localVarQueryParameter['a'] = a;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesTrashbinPreviewApi - functional programming interface
 * @export
 */
export const FilesTrashbinPreviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesTrashbinPreviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the preview for a file
         * @param {number} [fileId] ID of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Whether to not crop the preview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesTrashbinPreviewGetPreview(fileId?: number, x?: number, y?: number, a?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesTrashbinPreviewGetPreview(fileId, x, y, a, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesTrashbinPreviewApi - factory interface
 * @export
 */
export const FilesTrashbinPreviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesTrashbinPreviewApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the preview for a file
         * @param {FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTrashbinPreviewGetPreview(requestParameters: FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreviewRequest = {}, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.filesTrashbinPreviewGetPreview(requestParameters.fileId, requestParameters.x, requestParameters.y, requestParameters.a, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesTrashbinPreviewGetPreview operation in FilesTrashbinPreviewApi.
 * @export
 * @interface FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreviewRequest
 */
export interface FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreviewRequest {
    /**
     * ID of the file
     * @type {number}
     * @memberof FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreview
     */
    readonly fileId?: number

    /**
     * Width of the preview
     * @type {number}
     * @memberof FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreview
     */
    readonly x?: number

    /**
     * Height of the preview
     * @type {number}
     * @memberof FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreview
     */
    readonly y?: number

    /**
     * Whether to not crop the preview
     * @type {number}
     * @memberof FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreview
     */
    readonly a?: number
}

/**
 * FilesTrashbinPreviewApi - object-oriented interface
 * @export
 * @class FilesTrashbinPreviewApi
 * @extends {BaseAPI}
 */
export class FilesTrashbinPreviewApi extends BaseAPI {
    /**
     * 
     * @summary Get the preview for a file
     * @param {FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesTrashbinPreviewApi
     */
    public filesTrashbinPreviewGetPreview(requestParameters: FilesTrashbinPreviewApiFilesTrashbinPreviewGetPreviewRequest = {}, options?: AxiosRequestConfig) {
        return FilesTrashbinPreviewApiFp(this.configuration).filesTrashbinPreviewGetPreview(requestParameters.fileId, requestParameters.x, requestParameters.y, requestParameters.a, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesVersionsPreviewApi - axios parameter creator
 * @export
 */
export const FilesVersionsPreviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the preview for a file version
         * @param {string} [file] Path of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {string} [version] Version of the file to get the preview for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesVersionsPreviewGetPreview: async (file?: string, x?: number, y?: number, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/apps/files_versions/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesVersionsPreviewApi - functional programming interface
 * @export
 */
export const FilesVersionsPreviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesVersionsPreviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the preview for a file version
         * @param {string} [file] Path of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {string} [version] Version of the file to get the preview for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesVersionsPreviewGetPreview(file?: string, x?: number, y?: number, version?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesVersionsPreviewGetPreview(file, x, y, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesVersionsPreviewApi - factory interface
 * @export
 */
export const FilesVersionsPreviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesVersionsPreviewApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the preview for a file version
         * @param {FilesVersionsPreviewApiFilesVersionsPreviewGetPreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesVersionsPreviewGetPreview(requestParameters: FilesVersionsPreviewApiFilesVersionsPreviewGetPreviewRequest = {}, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.filesVersionsPreviewGetPreview(requestParameters.file, requestParameters.x, requestParameters.y, requestParameters.version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesVersionsPreviewGetPreview operation in FilesVersionsPreviewApi.
 * @export
 * @interface FilesVersionsPreviewApiFilesVersionsPreviewGetPreviewRequest
 */
export interface FilesVersionsPreviewApiFilesVersionsPreviewGetPreviewRequest {
    /**
     * Path of the file
     * @type {string}
     * @memberof FilesVersionsPreviewApiFilesVersionsPreviewGetPreview
     */
    readonly file?: string

    /**
     * Width of the preview
     * @type {number}
     * @memberof FilesVersionsPreviewApiFilesVersionsPreviewGetPreview
     */
    readonly x?: number

    /**
     * Height of the preview
     * @type {number}
     * @memberof FilesVersionsPreviewApiFilesVersionsPreviewGetPreview
     */
    readonly y?: number

    /**
     * Version of the file to get the preview for
     * @type {string}
     * @memberof FilesVersionsPreviewApiFilesVersionsPreviewGetPreview
     */
    readonly version?: string
}

/**
 * FilesVersionsPreviewApi - object-oriented interface
 * @export
 * @class FilesVersionsPreviewApi
 * @extends {BaseAPI}
 */
export class FilesVersionsPreviewApi extends BaseAPI {
    /**
     * 
     * @summary Get the preview for a file version
     * @param {FilesVersionsPreviewApiFilesVersionsPreviewGetPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesVersionsPreviewApi
     */
    public filesVersionsPreviewGetPreview(requestParameters: FilesVersionsPreviewApiFilesVersionsPreviewGetPreviewRequest = {}, options?: AxiosRequestConfig) {
        return FilesVersionsPreviewApiFp(this.configuration).filesVersionsPreviewGetPreview(requestParameters.file, requestParameters.x, requestParameters.y, requestParameters.version, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProvisioningApiAppConfigApi - axios parameter creator
 * @export
 */
export const ProvisioningApiAppConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary Delete a config key of an app
         * @param {string} app ID of the app
         * @param {string} key Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigDeleteKey: async (app: string, key: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppConfigDeleteKey', 'app', app)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiAppConfigDeleteKey', 'key', key)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigDeleteKey', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of apps
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetApps: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetApps', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get the config keys of an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetKeys: async (app: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetKeys', 'app', app)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetKeys', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get a the config value of an app
         * @param {string} app ID of the app
         * @param {string} key Key
         * @param {string} oCSAPIRequest 
         * @param {string} [defaultValue] Default returned value if the value is empty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetValue: async (app: string, key: string, oCSAPIRequest: string, defaultValue?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetValue', 'app', app)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetValue', 'key', key)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetValue', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (defaultValue !== undefined) {
                localVarQueryParameter['defaultValue'] = defaultValue;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the config value of an app
         * @param {string} value New value for the key
         * @param {string} app ID of the app
         * @param {string} key Key to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigSetValue: async (value: string, app: string, key: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'value' is not null or undefined
            assertParamExists('provisioningApiAppConfigSetValue', 'value', value)
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppConfigSetValue', 'app', app)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiAppConfigSetValue', 'key', key)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigSetValue', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiAppConfigApi - functional programming interface
 * @export
 */
export const ProvisioningApiAppConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiAppConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Delete a config key of an app
         * @param {string} app ID of the app
         * @param {string} key Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigDeleteKey(app: string, key: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigDeleteKey(app, key, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of apps
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigGetApps(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppConfigGetApps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigGetApps(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get the config keys of an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigGetKeys(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppConfigGetApps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigGetKeys(app, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get a the config value of an app
         * @param {string} app ID of the app
         * @param {string} key Key
         * @param {string} oCSAPIRequest 
         * @param {string} [defaultValue] Default returned value if the value is empty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigGetValue(app: string, key: string, oCSAPIRequest: string, defaultValue?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppConfigGetValue200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigGetValue(app, key, oCSAPIRequest, defaultValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the config value of an app
         * @param {string} value New value for the key
         * @param {string} app ID of the app
         * @param {string} key Key to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigSetValue(value: string, app: string, key: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigSetValue(value, app, key, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiAppConfigApi - factory interface
 * @export
 */
export const ProvisioningApiAppConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiAppConfigApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Delete a config key of an app
         * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigDeleteKey(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKeyRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiAppConfigDeleteKey(requestParameters.app, requestParameters.key, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of apps
         * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigGetAppsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetApps(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigGetAppsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiAppConfigGetApps200Response> {
            return localVarFp.provisioningApiAppConfigGetApps(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get the config keys of an app
         * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigGetKeysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetKeys(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigGetKeysRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiAppConfigGetApps200Response> {
            return localVarFp.provisioningApiAppConfigGetKeys(requestParameters.app, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get a the config value of an app
         * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetValue(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValueRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiAppConfigGetValue200Response> {
            return localVarFp.provisioningApiAppConfigGetValue(requestParameters.app, requestParameters.key, requestParameters.oCSAPIRequest, requestParameters.defaultValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the config value of an app
         * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigSetValue(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValueRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiAppConfigSetValue(requestParameters.value, requestParameters.app, requestParameters.key, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for provisioningApiAppConfigDeleteKey operation in ProvisioningApiAppConfigApi.
 * @export
 * @interface ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKeyRequest
 */
export interface ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKeyRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKey
     */
    readonly app: string

    /**
     * Key to delete
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKey
     */
    readonly key: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKey
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiAppConfigGetApps operation in ProvisioningApiAppConfigApi.
 * @export
 * @interface ProvisioningApiAppConfigApiProvisioningApiAppConfigGetAppsRequest
 */
export interface ProvisioningApiAppConfigApiProvisioningApiAppConfigGetAppsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigGetApps
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiAppConfigGetKeys operation in ProvisioningApiAppConfigApi.
 * @export
 * @interface ProvisioningApiAppConfigApiProvisioningApiAppConfigGetKeysRequest
 */
export interface ProvisioningApiAppConfigApiProvisioningApiAppConfigGetKeysRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigGetKeys
     */
    readonly app: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigGetKeys
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiAppConfigGetValue operation in ProvisioningApiAppConfigApi.
 * @export
 * @interface ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValueRequest
 */
export interface ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValueRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValue
     */
    readonly app: string

    /**
     * Key
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValue
     */
    readonly key: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValue
     */
    readonly oCSAPIRequest: string

    /**
     * Default returned value if the value is empty
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValue
     */
    readonly defaultValue?: string
}

/**
 * Request parameters for provisioningApiAppConfigSetValue operation in ProvisioningApiAppConfigApi.
 * @export
 * @interface ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValueRequest
 */
export interface ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValueRequest {
    /**
     * New value for the key
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValue
     */
    readonly value: string

    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValue
     */
    readonly app: string

    /**
     * Key to update
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValue
     */
    readonly key: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValue
     */
    readonly oCSAPIRequest: string
}

/**
 * ProvisioningApiAppConfigApi - object-oriented interface
 * @export
 * @class ProvisioningApiAppConfigApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiAppConfigApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary Delete a config key of an app
     * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigDeleteKey(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigDeleteKeyRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigDeleteKey(requestParameters.app, requestParameters.key, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get a list of apps
     * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigGetAppsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigGetApps(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigGetAppsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigGetApps(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get the config keys of an app
     * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigGetKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigGetKeys(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigGetKeysRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigGetKeys(requestParameters.app, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get a the config value of an app
     * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigGetValue(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigGetValueRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigGetValue(requestParameters.app, requestParameters.key, requestParameters.oCSAPIRequest, requestParameters.defaultValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the config value of an app
     * @param {ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigSetValue(requestParameters: ProvisioningApiAppConfigApiProvisioningApiAppConfigSetValueRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigSetValue(requestParameters.value, requestParameters.app, requestParameters.key, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProvisioningApiAppsApi - axios parameter creator
 * @export
 */
export const ProvisioningApiAppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary Disable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsDisable: async (app: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppsDisable', 'app', app)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppsDisable', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/apps/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Enable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsEnable: async (app: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppsEnable', 'app', app)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppsEnable', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/apps/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get the app info for an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsGetAppInfo: async (app: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppsGetAppInfo', 'app', app)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppsGetAppInfo', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/apps/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of installed apps
         * @param {string} oCSAPIRequest 
         * @param {string | null} [filter] Filter for enabled or disabled apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsGetApps: async (oCSAPIRequest: string, filter?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppsGetApps', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiAppsApi - functional programming interface
 * @export
 */
export const ProvisioningApiAppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiAppsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Disable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppsDisable(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppsDisable(app, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Enable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppsEnable(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppsEnable(app, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get the app info for an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppsGetAppInfo(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppsGetAppInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppsGetAppInfo(app, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of installed apps
         * @param {string} oCSAPIRequest 
         * @param {string | null} [filter] Filter for enabled or disabled apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppsGetApps(oCSAPIRequest: string, filter?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppsGetApps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppsGetApps(oCSAPIRequest, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiAppsApi - factory interface
 * @export
 */
export const ProvisioningApiAppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiAppsApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Disable an app
         * @param {ProvisioningApiAppsApiProvisioningApiAppsDisableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsDisable(requestParameters: ProvisioningApiAppsApiProvisioningApiAppsDisableRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiAppsDisable(requestParameters.app, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Enable an app
         * @param {ProvisioningApiAppsApiProvisioningApiAppsEnableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsEnable(requestParameters: ProvisioningApiAppsApiProvisioningApiAppsEnableRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiAppsEnable(requestParameters.app, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get the app info for an app
         * @param {ProvisioningApiAppsApiProvisioningApiAppsGetAppInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsGetAppInfo(requestParameters: ProvisioningApiAppsApiProvisioningApiAppsGetAppInfoRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiAppsGetAppInfo200Response> {
            return localVarFp.provisioningApiAppsGetAppInfo(requestParameters.app, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of installed apps
         * @param {ProvisioningApiAppsApiProvisioningApiAppsGetAppsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsGetApps(requestParameters: ProvisioningApiAppsApiProvisioningApiAppsGetAppsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiAppsGetApps200Response> {
            return localVarFp.provisioningApiAppsGetApps(requestParameters.oCSAPIRequest, requestParameters.filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for provisioningApiAppsDisable operation in ProvisioningApiAppsApi.
 * @export
 * @interface ProvisioningApiAppsApiProvisioningApiAppsDisableRequest
 */
export interface ProvisioningApiAppsApiProvisioningApiAppsDisableRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiAppsApiProvisioningApiAppsDisable
     */
    readonly app: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppsApiProvisioningApiAppsDisable
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiAppsEnable operation in ProvisioningApiAppsApi.
 * @export
 * @interface ProvisioningApiAppsApiProvisioningApiAppsEnableRequest
 */
export interface ProvisioningApiAppsApiProvisioningApiAppsEnableRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiAppsApiProvisioningApiAppsEnable
     */
    readonly app: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppsApiProvisioningApiAppsEnable
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiAppsGetAppInfo operation in ProvisioningApiAppsApi.
 * @export
 * @interface ProvisioningApiAppsApiProvisioningApiAppsGetAppInfoRequest
 */
export interface ProvisioningApiAppsApiProvisioningApiAppsGetAppInfoRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiAppsApiProvisioningApiAppsGetAppInfo
     */
    readonly app: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppsApiProvisioningApiAppsGetAppInfo
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiAppsGetApps operation in ProvisioningApiAppsApi.
 * @export
 * @interface ProvisioningApiAppsApiProvisioningApiAppsGetAppsRequest
 */
export interface ProvisioningApiAppsApiProvisioningApiAppsGetAppsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppsApiProvisioningApiAppsGetApps
     */
    readonly oCSAPIRequest: string

    /**
     * Filter for enabled or disabled apps
     * @type {string}
     * @memberof ProvisioningApiAppsApiProvisioningApiAppsGetApps
     */
    readonly filter?: string | null
}

/**
 * ProvisioningApiAppsApi - object-oriented interface
 * @export
 * @class ProvisioningApiAppsApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiAppsApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary Disable an app
     * @param {ProvisioningApiAppsApiProvisioningApiAppsDisableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppsApi
     */
    public provisioningApiAppsDisable(requestParameters: ProvisioningApiAppsApiProvisioningApiAppsDisableRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppsApiFp(this.configuration).provisioningApiAppsDisable(requestParameters.app, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Enable an app
     * @param {ProvisioningApiAppsApiProvisioningApiAppsEnableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppsApi
     */
    public provisioningApiAppsEnable(requestParameters: ProvisioningApiAppsApiProvisioningApiAppsEnableRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppsApiFp(this.configuration).provisioningApiAppsEnable(requestParameters.app, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get the app info for an app
     * @param {ProvisioningApiAppsApiProvisioningApiAppsGetAppInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppsApi
     */
    public provisioningApiAppsGetAppInfo(requestParameters: ProvisioningApiAppsApiProvisioningApiAppsGetAppInfoRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppsApiFp(this.configuration).provisioningApiAppsGetAppInfo(requestParameters.app, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get a list of installed apps
     * @param {ProvisioningApiAppsApiProvisioningApiAppsGetAppsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppsApi
     */
    public provisioningApiAppsGetApps(requestParameters: ProvisioningApiAppsApiProvisioningApiAppsGetAppsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiAppsApiFp(this.configuration).provisioningApiAppsGetApps(requestParameters.oCSAPIRequest, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProvisioningApiGroupsApi - axios parameter creator
 * @export
 */
export const ProvisioningApiGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary Create a new group
         * @param {string} groupid ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [displayname] Display name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsAddGroup: async (groupid: string, oCSAPIRequest: string, displayname?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('provisioningApiGroupsAddGroup', 'groupid', groupid)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsAddGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (displayname !== undefined) {
                localVarQueryParameter['displayname'] = displayname;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Delete a group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsDeleteGroup: async (groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsDeleteGroup', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsDeleteGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroup: async (groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroup', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupUsers: async (groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupUsers', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupUsers', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}/users`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users details in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupUsersDetails: async (groupId: string, oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupUsersDetails', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupUsersDetails', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}/users/details`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of groups
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroups: async (oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroups', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of groups details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupsDetails: async (oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupsDetails', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get the list of user IDs that are a subadmin of the group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetSubAdminsOfGroup: async (groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsGetSubAdminsOfGroup', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetSubAdminsOfGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}/subadmins`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Update a group
         * @param {string} key Key to update, only \&#39;displayname\&#39;
         * @param {string} value New value for the key
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsUpdateGroup: async (key: string, value: string, groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiGroupsUpdateGroup', 'key', key)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('provisioningApiGroupsUpdateGroup', 'value', value)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsUpdateGroup', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsUpdateGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiGroupsApi - functional programming interface
 * @export
 */
export const ProvisioningApiGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Create a new group
         * @param {string} groupid ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [displayname] Display name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsAddGroup(groupid: string, oCSAPIRequest: string, displayname?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsAddGroup(groupid, oCSAPIRequest, displayname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Delete a group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsDeleteGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsDeleteGroup(groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroup(groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroupUsers(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroupUsers(groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users details in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroupUsersDetails(groupId: string, oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsersDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroupUsersDetails(groupId, oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of groups
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroups(oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroups200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroups(oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of groups details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroupsDetails(oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupsDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroupsDetails(oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get the list of user IDs that are a subadmin of the group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetSubAdminsOfGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetSubAdminsOfGroup(groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Update a group
         * @param {string} key Key to update, only \&#39;displayname\&#39;
         * @param {string} value New value for the key
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsUpdateGroup(key: string, value: string, groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsUpdateGroup(key, value, groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiGroupsApi - factory interface
 * @export
 */
export const ProvisioningApiGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiGroupsApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Create a new group
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsAddGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsAddGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsAddGroupRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiGroupsAddGroup(requestParameters.groupid, requestParameters.oCSAPIRequest, requestParameters.displayname, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Delete a group
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsDeleteGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsDeleteGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsDeleteGroupRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiGroupsDeleteGroup(requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response> {
            return localVarFp.provisioningApiGroupsGetGroup(requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupUsers(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response> {
            return localVarFp.provisioningApiGroupsGetGroupUsers(requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users details in the specified group
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupUsersDetails(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetGroupUsersDetails200Response> {
            return localVarFp.provisioningApiGroupsGetGroupUsersDetails(requestParameters.groupId, requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of groups
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroups(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetGroups200Response> {
            return localVarFp.provisioningApiGroupsGetGroups(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of groups details
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupsDetails(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetGroupsDetails200Response> {
            return localVarFp.provisioningApiGroupsGetGroupsDetails(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get the list of user IDs that are a subadmin of the group
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetSubAdminsOfGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetSubAdminsOfGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetSubAdminsOfGroupRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.provisioningApiGroupsGetSubAdminsOfGroup(requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Update a group
         * @param {ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsUpdateGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroupRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiGroupsUpdateGroup(requestParameters.key, requestParameters.value, requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for provisioningApiGroupsAddGroup operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsAddGroupRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsAddGroupRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsAddGroup
     */
    readonly groupid: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsAddGroup
     */
    readonly oCSAPIRequest: string

    /**
     * Display name of the group
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsAddGroup
     */
    readonly displayname?: string
}

/**
 * Request parameters for provisioningApiGroupsDeleteGroup operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsDeleteGroupRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsDeleteGroupRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsDeleteGroup
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsDeleteGroup
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiGroupsGetGroup operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroup
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroup
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiGroupsGetGroupUsers operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsers
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsers
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiGroupsGetGroupUsersDetails operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetailsRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetailsRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetails
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetails
     */
    readonly oCSAPIRequest: string

    /**
     * Text to search for
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetails
     */
    readonly search?: string

    /**
     * Limit the amount of groups returned
     * @type {number}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetails
     */
    readonly limit?: number | null

    /**
     * Offset for searching for groups
     * @type {number}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetails
     */
    readonly offset?: number
}

/**
 * Request parameters for provisioningApiGroupsGetGroups operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroups
     */
    readonly oCSAPIRequest: string

    /**
     * Text to search for
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroups
     */
    readonly search?: string

    /**
     * Limit the amount of groups returned
     * @type {number}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroups
     */
    readonly limit?: number | null

    /**
     * Offset for searching for groups
     * @type {number}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroups
     */
    readonly offset?: number
}

/**
 * Request parameters for provisioningApiGroupsGetGroupsDetails operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetailsRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetailsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetails
     */
    readonly oCSAPIRequest: string

    /**
     * Text to search for
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetails
     */
    readonly search?: string

    /**
     * Limit the amount of groups returned
     * @type {number}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetails
     */
    readonly limit?: number | null

    /**
     * Offset for searching for groups
     * @type {number}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetails
     */
    readonly offset?: number
}

/**
 * Request parameters for provisioningApiGroupsGetSubAdminsOfGroup operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsGetSubAdminsOfGroupRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsGetSubAdminsOfGroupRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetSubAdminsOfGroup
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsGetSubAdminsOfGroup
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiGroupsUpdateGroup operation in ProvisioningApiGroupsApi.
 * @export
 * @interface ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroupRequest
 */
export interface ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroupRequest {
    /**
     * Key to update, only \&#39;displayname\&#39;
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroup
     */
    readonly key: string

    /**
     * New value for the key
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroup
     */
    readonly value: string

    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroup
     */
    readonly groupId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroup
     */
    readonly oCSAPIRequest: string
}

/**
 * ProvisioningApiGroupsApi - object-oriented interface
 * @export
 * @class ProvisioningApiGroupsApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiGroupsApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary Create a new group
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsAddGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsAddGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsAddGroupRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsAddGroup(requestParameters.groupid, requestParameters.oCSAPIRequest, requestParameters.displayname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Delete a group
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsDeleteGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsDeleteGroupRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsDeleteGroup(requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users in the specified group
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroup(requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users in the specified group
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroupUsers(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroupUsers(requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users details in the specified group
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroupUsersDetails(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupUsersDetailsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroupUsersDetails(requestParameters.groupId, requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of groups
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroups(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroups(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of groups details
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroupsDetails(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetGroupsDetailsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroupsDetails(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get the list of user IDs that are a subadmin of the group
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsGetSubAdminsOfGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetSubAdminsOfGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsGetSubAdminsOfGroupRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetSubAdminsOfGroup(requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Update a group
     * @param {ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsUpdateGroup(requestParameters: ProvisioningApiGroupsApiProvisioningApiGroupsUpdateGroupRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsUpdateGroup(requestParameters.key, requestParameters.value, requestParameters.groupId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProvisioningApiPreferencesApi - axios parameter creator
 * @export
 */
export const ProvisioningApiPreferencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete multiple preferences for an app
         * @param {Array<string>} configKeys Keys to delete
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesDeleteMultiplePreference: async (configKeys: Array<string>, appId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configKeys' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeleteMultiplePreference', 'configKeys', configKeys)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeleteMultiplePreference', 'appId', appId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeleteMultiplePreference', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (configKeys) {
                localVarQueryParameter['configKeys[]'] = configKeys;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a preference for an app
         * @param {string} appId ID of the app
         * @param {string} configKey Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesDeletePreference: async (appId: string, configKey: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeletePreference', 'appId', appId)
            // verify required parameter 'configKey' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeletePreference', 'configKey', configKey)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeletePreference', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"configKey"}}`, encodeURIComponent(String(configKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple preference values of an app
         * @param {string} configs Key-value pairs of the preferences
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesSetMultiplePreferences: async (configs: string, appId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configs' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetMultiplePreferences', 'configs', configs)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetMultiplePreferences', 'appId', appId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetMultiplePreferences', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (configs !== undefined) {
                localVarQueryParameter['configs'] = configs;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a preference value of an app
         * @param {string} configValue New value
         * @param {string} appId ID of the app
         * @param {string} configKey Key of the preference
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesSetPreference: async (configValue: string, appId: string, configKey: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configValue' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetPreference', 'configValue', configValue)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetPreference', 'appId', appId)
            // verify required parameter 'configKey' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetPreference', 'configKey', configKey)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetPreference', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"configKey"}}`, encodeURIComponent(String(configKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (configValue !== undefined) {
                localVarQueryParameter['configValue'] = configValue;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiPreferencesApi - functional programming interface
 * @export
 */
export const ProvisioningApiPreferencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiPreferencesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete multiple preferences for an app
         * @param {Array<string>} configKeys Keys to delete
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiPreferencesDeleteMultiplePreference(configKeys: Array<string>, appId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiPreferencesDeleteMultiplePreference(configKeys, appId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a preference for an app
         * @param {string} appId ID of the app
         * @param {string} configKey Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiPreferencesDeletePreference(appId: string, configKey: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiPreferencesDeletePreference(appId, configKey, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update multiple preference values of an app
         * @param {string} configs Key-value pairs of the preferences
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiPreferencesSetMultiplePreferences(configs: string, appId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiPreferencesSetMultiplePreferences(configs, appId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a preference value of an app
         * @param {string} configValue New value
         * @param {string} appId ID of the app
         * @param {string} configKey Key of the preference
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiPreferencesSetPreference(configValue: string, appId: string, configKey: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiPreferencesSetPreference(configValue, appId, configKey, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiPreferencesApi - factory interface
 * @export
 */
export const ProvisioningApiPreferencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiPreferencesApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete multiple preferences for an app
         * @param {ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesDeleteMultiplePreference(requestParameters: ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreferenceRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiPreferencesDeleteMultiplePreference(requestParameters.configKeys, requestParameters.appId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a preference for an app
         * @param {ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesDeletePreference(requestParameters: ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreferenceRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiPreferencesDeletePreference(requestParameters.appId, requestParameters.configKey, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple preference values of an app
         * @param {ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesSetMultiplePreferences(requestParameters: ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferencesRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiPreferencesSetMultiplePreferences(requestParameters.configs, requestParameters.appId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a preference value of an app
         * @param {ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesSetPreference(requestParameters: ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreferenceRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiPreferencesSetPreference(requestParameters.configValue, requestParameters.appId, requestParameters.configKey, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for provisioningApiPreferencesDeleteMultiplePreference operation in ProvisioningApiPreferencesApi.
 * @export
 * @interface ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreferenceRequest
 */
export interface ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreferenceRequest {
    /**
     * Keys to delete
     * @type {Array<string>}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreference
     */
    readonly configKeys: Array<string>

    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreference
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreference
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiPreferencesDeletePreference operation in ProvisioningApiPreferencesApi.
 * @export
 * @interface ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreferenceRequest
 */
export interface ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreferenceRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreference
     */
    readonly appId: string

    /**
     * Key to delete
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreference
     */
    readonly configKey: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreference
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiPreferencesSetMultiplePreferences operation in ProvisioningApiPreferencesApi.
 * @export
 * @interface ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferencesRequest
 */
export interface ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferencesRequest {
    /**
     * Key-value pairs of the preferences
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferences
     */
    readonly configs: string

    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferences
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferences
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiPreferencesSetPreference operation in ProvisioningApiPreferencesApi.
 * @export
 * @interface ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreferenceRequest
 */
export interface ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreferenceRequest {
    /**
     * New value
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreference
     */
    readonly configValue: string

    /**
     * ID of the app
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreference
     */
    readonly appId: string

    /**
     * Key of the preference
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreference
     */
    readonly configKey: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreference
     */
    readonly oCSAPIRequest: string
}

/**
 * ProvisioningApiPreferencesApi - object-oriented interface
 * @export
 * @class ProvisioningApiPreferencesApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiPreferencesApi extends BaseAPI {
    /**
     * 
     * @summary Delete multiple preferences for an app
     * @param {ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiPreferencesApi
     */
    public provisioningApiPreferencesDeleteMultiplePreference(requestParameters: ProvisioningApiPreferencesApiProvisioningApiPreferencesDeleteMultiplePreferenceRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiPreferencesApiFp(this.configuration).provisioningApiPreferencesDeleteMultiplePreference(requestParameters.configKeys, requestParameters.appId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a preference for an app
     * @param {ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiPreferencesApi
     */
    public provisioningApiPreferencesDeletePreference(requestParameters: ProvisioningApiPreferencesApiProvisioningApiPreferencesDeletePreferenceRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiPreferencesApiFp(this.configuration).provisioningApiPreferencesDeletePreference(requestParameters.appId, requestParameters.configKey, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple preference values of an app
     * @param {ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiPreferencesApi
     */
    public provisioningApiPreferencesSetMultiplePreferences(requestParameters: ProvisioningApiPreferencesApiProvisioningApiPreferencesSetMultiplePreferencesRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiPreferencesApiFp(this.configuration).provisioningApiPreferencesSetMultiplePreferences(requestParameters.configs, requestParameters.appId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a preference value of an app
     * @param {ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiPreferencesApi
     */
    public provisioningApiPreferencesSetPreference(requestParameters: ProvisioningApiPreferencesApiProvisioningApiPreferencesSetPreferenceRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiPreferencesApiFp(this.configuration).provisioningApiPreferencesSetPreference(requestParameters.configValue, requestParameters.appId, requestParameters.configKey, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProvisioningApiUsersApi - axios parameter creator
 * @export
 */
export const ProvisioningApiUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary Make a user a subadmin of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddSubAdmin: async (groupid: string, userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('provisioningApiUsersAddSubAdmin', 'groupid', groupid)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersAddSubAdmin', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersAddSubAdmin', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/subadmins`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a user to a group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [groupid] ID of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddToGroup: async (userId: string, oCSAPIRequest: string, groupid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersAddToGroup', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersAddToGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/groups`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new user
         * @param {string} userid ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [password] Password of the user
         * @param {string} [displayName] Display name of the user
         * @param {string} [email] Email of the user
         * @param {Array<string>} [groups] Groups of the user
         * @param {Array<string>} [subadmin] Groups where the user is subadmin
         * @param {string} [quota] Quota of the user
         * @param {string} [language] Language of the user
         * @param {string | null} [manager] Manager of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddUser: async (userid: string, oCSAPIRequest: string, password?: string, displayName?: string, email?: string, groups?: Array<string>, subadmin?: Array<string>, quota?: string, language?: string, manager?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('provisioningApiUsersAddUser', 'userid', userid)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersAddUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userid !== undefined) {
                localVarQueryParameter['userid'] = userid;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (groups) {
                localVarQueryParameter['groups[]'] = groups;
            }

            if (subadmin) {
                localVarQueryParameter['subadmin[]'] = subadmin;
            }

            if (quota !== undefined) {
                localVarQueryParameter['quota'] = quota;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (manager !== undefined) {
                localVarQueryParameter['manager'] = manager;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersDeleteUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersDeleteUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersDeleteUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersDisableUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersDisableUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersDisableUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/disable`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a value of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEditUser: async (key: string, value: string, userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiUsersEditUser', 'key', key)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('provisioningApiUsersEditUser', 'value', value)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersEditUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersEditUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple values of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} collectionName Collection to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEditUserMultiValue: async (key: string, value: string, userId: string, collectionName: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'key', key)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'value', value)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'userId', userId)
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'collectionName', collectionName)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/{collectionName}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"collectionName"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEnableUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersEnableUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersEnableUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/enable`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetCurrentUser: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetCurrentUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of fields that are editable for the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetEditableFields: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetEditableFields', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/user/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of fields that are editable for a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetEditableFieldsForUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersGetEditableFieldsForUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetEditableFieldsForUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/user/fields/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersGetUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get the groups a user is a subadmin of
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUserSubAdminGroups: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersGetUserSubAdminGroups', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUserSubAdminGroups', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/subadmins`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsers: async (oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUsers', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users and their details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsersDetails: async (oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUsersDetails', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of groups the user belongs to
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsersGroups: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersGetUsersGroups', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUsersGroups', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/groups`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a user from a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersRemoveFromGroup: async (groupid: string, userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveFromGroup', 'groupid', groupid)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveFromGroup', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveFromGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/groups`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Remove a user from the subadmins of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersRemoveSubAdmin: async (groupid: string, userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveSubAdmin', 'groupid', groupid)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveSubAdmin', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveSubAdmin', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/subadmins`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resend the welcome message
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersResendWelcomeMessage: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersResendWelcomeMessage', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersResendWelcomeMessage', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/welcome`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search users by their phone numbers
         * @param {string} location Location of the phone number (for country code)
         * @param {string} search Phone numbers to search for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersSearchByPhoneNumbers: async (location: string, search: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'location' is not null or undefined
            assertParamExists('provisioningApiUsersSearchByPhoneNumbers', 'location', location)
            // verify required parameter 'search' is not null or undefined
            assertParamExists('provisioningApiUsersSearchByPhoneNumbers', 'search', search)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersSearchByPhoneNumbers', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/search/by-phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Wipe all devices of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersWipeUserDevices: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersWipeUserDevices', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersWipeUserDevices', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/wipe`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiUsersApi - functional programming interface
 * @export
 */
export const ProvisioningApiUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Make a user a subadmin of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersAddSubAdmin(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersAddSubAdmin(groupid, userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a user to a group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [groupid] ID of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersAddToGroup(userId: string, oCSAPIRequest: string, groupid?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersAddToGroup(userId, oCSAPIRequest, groupid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new user
         * @param {string} userid ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [password] Password of the user
         * @param {string} [displayName] Display name of the user
         * @param {string} [email] Email of the user
         * @param {Array<string>} [groups] Groups of the user
         * @param {Array<string>} [subadmin] Groups where the user is subadmin
         * @param {string} [quota] Quota of the user
         * @param {string} [language] Language of the user
         * @param {string | null} [manager] Manager of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersAddUser(userid: string, oCSAPIRequest: string, password?: string, displayName?: string, email?: string, groups?: Array<string>, subadmin?: Array<string>, quota?: string, language?: string, manager?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiUsersAddUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersAddUser(userid, oCSAPIRequest, password, displayName, email, groups, subadmin, quota, language, manager, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersDeleteUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersDeleteUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Disable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersDisableUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersDisableUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a value of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersEditUser(key: string, value: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersEditUser(key, value, userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update multiple values of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} collectionName Collection to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersEditUserMultiValue(key: string, value: string, userId: string, collectionName: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersEditUserMultiValue(key, value, userId, collectionName, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Enable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersEnableUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersEnableUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the details of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetCurrentUser(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiUsersGetUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetCurrentUser(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of fields that are editable for the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetEditableFields(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetEditableFields(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of fields that are editable for a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetEditableFieldsForUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetEditableFieldsForUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the details of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiUsersGetUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get the groups a user is a subadmin of
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUserSubAdminGroups(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUserSubAdminGroups(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUsers(oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUsers(oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users and their details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number | null} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUsersDetails(oCSAPIRequest: string, search?: string, limit?: number | null, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsersDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUsersDetails(oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of groups the user belongs to
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUsersGroups(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroups200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUsersGroups(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a user from a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersRemoveFromGroup(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersRemoveFromGroup(groupid, userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Remove a user from the subadmins of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersRemoveSubAdmin(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersRemoveSubAdmin(groupid, userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resend the welcome message
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersResendWelcomeMessage(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersResendWelcomeMessage(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search users by their phone numbers
         * @param {string} location Location of the phone number (for country code)
         * @param {string} search Phone numbers to search for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersSearchByPhoneNumbers(location: string, search: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiUsersSearchByPhoneNumbers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersSearchByPhoneNumbers(location, search, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Wipe all devices of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersWipeUserDevices(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersWipeUserDevices(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiUsersApi - factory interface
 * @export
 */
export const ProvisioningApiUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiUsersApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Make a user a subadmin of a group
         * @param {ProvisioningApiUsersApiProvisioningApiUsersAddSubAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddSubAdmin(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersAddSubAdminRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersAddSubAdmin(requestParameters.groupid, requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a user to a group
         * @param {ProvisioningApiUsersApiProvisioningApiUsersAddToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddToGroup(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersAddToGroupRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersAddToGroup(requestParameters.userId, requestParameters.oCSAPIRequest, requestParameters.groupid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersAddUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersAddUserRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiUsersAddUser200Response> {
            return localVarFp.provisioningApiUsersAddUser(requestParameters.userid, requestParameters.oCSAPIRequest, requestParameters.password, requestParameters.displayName, requestParameters.email, requestParameters.groups, requestParameters.subadmin, requestParameters.quota, requestParameters.language, requestParameters.manager, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersDeleteUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersDeleteUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable a user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersDisableUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersDisableUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersDisableUserRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersDisableUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a value of the user\'s details
         * @param {ProvisioningApiUsersApiProvisioningApiUsersEditUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEditUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersEditUserRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersEditUser(requestParameters.key, requestParameters.value, requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple values of the user\'s details
         * @param {ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEditUserMultiValue(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValueRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersEditUserMultiValue(requestParameters.key, requestParameters.value, requestParameters.userId, requestParameters.collectionName, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable a user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersEnableUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEnableUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersEnableUserRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersEnableUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details of the current user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersGetCurrentUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetCurrentUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetCurrentUserRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiUsersGetUser200Response> {
            return localVarFp.provisioningApiUsersGetCurrentUser(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of fields that are editable for the current user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetEditableFields(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.provisioningApiUsersGetEditableFields(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of fields that are editable for a user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetEditableFieldsForUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsForUserRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.provisioningApiUsersGetEditableFieldsForUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details of a user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiUsersGetUser200Response> {
            return localVarFp.provisioningApiUsersGetUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get the groups a user is a subadmin of
         * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUserSubAdminGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUserSubAdminGroups(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUserSubAdminGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.provisioningApiUsersGetUserSubAdminGroups(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users
         * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsers(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUsersRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response> {
            return localVarFp.provisioningApiUsersGetUsers(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users and their details
         * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsersDetails(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetGroupUsersDetails200Response> {
            return localVarFp.provisioningApiUsersGetUsersDetails(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of groups the user belongs to
         * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUsersGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsersGroups(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUsersGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetGroups200Response> {
            return localVarFp.provisioningApiUsersGetUsersGroups(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a user from a group
         * @param {ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersRemoveFromGroup(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroupRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersRemoveFromGroup(requestParameters.groupid, requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Remove a user from the subadmins of a group
         * @param {ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersRemoveSubAdmin(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdminRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersRemoveSubAdmin(requestParameters.groupid, requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resend the welcome message
         * @param {ProvisioningApiUsersApiProvisioningApiUsersResendWelcomeMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersResendWelcomeMessage(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersResendWelcomeMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersResendWelcomeMessage(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search users by their phone numbers
         * @param {ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersSearchByPhoneNumbers(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbersRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiUsersSearchByPhoneNumbers200Response> {
            return localVarFp.provisioningApiUsersSearchByPhoneNumbers(requestParameters.location, requestParameters.search, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Wipe all devices of a user
         * @param {ProvisioningApiUsersApiProvisioningApiUsersWipeUserDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersWipeUserDevices(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersWipeUserDevicesRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersWipeUserDevices(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for provisioningApiUsersAddSubAdmin operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersAddSubAdminRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersAddSubAdminRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddSubAdmin
     */
    readonly groupid: string

    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddSubAdmin
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddSubAdmin
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersAddToGroup operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersAddToGroupRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersAddToGroupRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddToGroup
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddToGroup
     */
    readonly oCSAPIRequest: string

    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddToGroup
     */
    readonly groupid?: string
}

/**
 * Request parameters for provisioningApiUsersAddUser operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersAddUserRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersAddUserRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly userid: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly oCSAPIRequest: string

    /**
     * Password of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly password?: string

    /**
     * Display name of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly displayName?: string

    /**
     * Email of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly email?: string

    /**
     * Groups of the user
     * @type {Array<string>}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly groups?: Array<string>

    /**
     * Groups where the user is subadmin
     * @type {Array<string>}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly subadmin?: Array<string>

    /**
     * Quota of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly quota?: string

    /**
     * Language of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly language?: string

    /**
     * Manager of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersAddUser
     */
    readonly manager?: string | null
}

/**
 * Request parameters for provisioningApiUsersDeleteUser operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersDeleteUserRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersDeleteUserRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersDeleteUser
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersDeleteUser
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersDisableUser operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersDisableUserRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersDisableUserRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersDisableUser
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersDisableUser
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersEditUser operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersEditUserRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersEditUserRequest {
    /**
     * Key that will be updated
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUser
     */
    readonly key: string

    /**
     * New value for the key
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUser
     */
    readonly value: string

    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUser
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUser
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersEditUserMultiValue operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValueRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValueRequest {
    /**
     * Key that will be updated
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValue
     */
    readonly key: string

    /**
     * New value for the key
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValue
     */
    readonly value: string

    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValue
     */
    readonly userId: string

    /**
     * Collection to update
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValue
     */
    readonly collectionName: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValue
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersEnableUser operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersEnableUserRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersEnableUserRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEnableUser
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersEnableUser
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersGetCurrentUser operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersGetCurrentUserRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersGetCurrentUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetCurrentUser
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersGetEditableFields operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetEditableFields
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersGetEditableFieldsForUser operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsForUserRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsForUserRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsForUser
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsForUser
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersGetUser operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersGetUserRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersGetUserRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUser
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUser
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersGetUserSubAdminGroups operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersGetUserSubAdminGroupsRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersGetUserSubAdminGroupsRequest {
    /**
     * ID if the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUserSubAdminGroups
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUserSubAdminGroups
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersGetUsers operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersGetUsersRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersGetUsersRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsers
     */
    readonly oCSAPIRequest: string

    /**
     * Text to search for
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsers
     */
    readonly search?: string

    /**
     * Limit the amount of groups returned
     * @type {number}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsers
     */
    readonly limit?: number | null

    /**
     * Offset for searching for groups
     * @type {number}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsers
     */
    readonly offset?: number
}

/**
 * Request parameters for provisioningApiUsersGetUsersDetails operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetailsRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetailsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetails
     */
    readonly oCSAPIRequest: string

    /**
     * Text to search for
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetails
     */
    readonly search?: string

    /**
     * Limit the amount of groups returned
     * @type {number}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetails
     */
    readonly limit?: number | null

    /**
     * Offset for searching for groups
     * @type {number}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetails
     */
    readonly offset?: number
}

/**
 * Request parameters for provisioningApiUsersGetUsersGroups operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersGetUsersGroupsRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersGetUsersGroupsRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsersGroups
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersGetUsersGroups
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersRemoveFromGroup operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroupRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroupRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroup
     */
    readonly groupid: string

    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroup
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroup
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersRemoveSubAdmin operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdminRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdminRequest {
    /**
     * ID of the group
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdmin
     */
    readonly groupid: string

    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdmin
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdmin
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersResendWelcomeMessage operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersResendWelcomeMessageRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersResendWelcomeMessageRequest {
    /**
     * ID if the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersResendWelcomeMessage
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersResendWelcomeMessage
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersSearchByPhoneNumbers operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbersRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbersRequest {
    /**
     * Location of the phone number (for country code)
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbers
     */
    readonly location: string

    /**
     * Phone numbers to search for
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbers
     */
    readonly search: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbers
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for provisioningApiUsersWipeUserDevices operation in ProvisioningApiUsersApi.
 * @export
 * @interface ProvisioningApiUsersApiProvisioningApiUsersWipeUserDevicesRequest
 */
export interface ProvisioningApiUsersApiProvisioningApiUsersWipeUserDevicesRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersWipeUserDevices
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUsersApiProvisioningApiUsersWipeUserDevices
     */
    readonly oCSAPIRequest: string
}

/**
 * ProvisioningApiUsersApi - object-oriented interface
 * @export
 * @class ProvisioningApiUsersApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiUsersApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary Make a user a subadmin of a group
     * @param {ProvisioningApiUsersApiProvisioningApiUsersAddSubAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersAddSubAdmin(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersAddSubAdminRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersAddSubAdmin(requestParameters.groupid, requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a user to a group
     * @param {ProvisioningApiUsersApiProvisioningApiUsersAddToGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersAddToGroup(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersAddToGroupRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersAddToGroup(requestParameters.userId, requestParameters.oCSAPIRequest, requestParameters.groupid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersAddUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersAddUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersAddUserRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersAddUser(requestParameters.userid, requestParameters.oCSAPIRequest, requestParameters.password, requestParameters.displayName, requestParameters.email, requestParameters.groups, requestParameters.subadmin, requestParameters.quota, requestParameters.language, requestParameters.manager, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersDeleteUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersDeleteUserRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersDeleteUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable a user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersDisableUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersDisableUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersDisableUserRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersDisableUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a value of the user\'s details
     * @param {ProvisioningApiUsersApiProvisioningApiUsersEditUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersEditUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersEditUserRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersEditUser(requestParameters.key, requestParameters.value, requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple values of the user\'s details
     * @param {ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersEditUserMultiValue(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersEditUserMultiValueRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersEditUserMultiValue(requestParameters.key, requestParameters.value, requestParameters.userId, requestParameters.collectionName, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable a user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersEnableUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersEnableUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersEnableUserRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersEnableUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details of the current user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersGetCurrentUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetCurrentUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetCurrentUserRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetCurrentUser(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of fields that are editable for the current user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetEditableFields(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetEditableFields(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of fields that are editable for a user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetEditableFieldsForUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetEditableFieldsForUserRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetEditableFieldsForUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details of a user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUser(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUserRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUser(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get the groups a user is a subadmin of
     * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUserSubAdminGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUserSubAdminGroups(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUserSubAdminGroupsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUserSubAdminGroups(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users
     * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUsers(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUsersRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUsers(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users and their details
     * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUsersDetails(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUsersDetailsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUsersDetails(requestParameters.oCSAPIRequest, requestParameters.search, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of groups the user belongs to
     * @param {ProvisioningApiUsersApiProvisioningApiUsersGetUsersGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUsersGroups(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersGetUsersGroupsRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUsersGroups(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a user from a group
     * @param {ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersRemoveFromGroup(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersRemoveFromGroupRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersRemoveFromGroup(requestParameters.groupid, requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Remove a user from the subadmins of a group
     * @param {ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersRemoveSubAdmin(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersRemoveSubAdminRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersRemoveSubAdmin(requestParameters.groupid, requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resend the welcome message
     * @param {ProvisioningApiUsersApiProvisioningApiUsersResendWelcomeMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersResendWelcomeMessage(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersResendWelcomeMessageRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersResendWelcomeMessage(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search users by their phone numbers
     * @param {ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersSearchByPhoneNumbers(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersSearchByPhoneNumbersRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersSearchByPhoneNumbers(requestParameters.location, requestParameters.search, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Wipe all devices of a user
     * @param {ProvisioningApiUsersApiProvisioningApiUsersWipeUserDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersWipeUserDevices(requestParameters: ProvisioningApiUsersApiProvisioningApiUsersWipeUserDevicesRequest, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersWipeUserDevices(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingsLogSettingsApi - axios parameter creator
 * @export
 */
export const SettingsLogSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary download logfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLogSettingsDownload: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/settings/admin/log/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsLogSettingsApi - functional programming interface
 * @export
 */
export const SettingsLogSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsLogSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary download logfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsLogSettingsDownload(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsLogSettingsDownload(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsLogSettingsApi - factory interface
 * @export
 */
export const SettingsLogSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsLogSettingsApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary download logfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLogSettingsDownload(options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.settingsLogSettingsDownload(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsLogSettingsApi - object-oriented interface
 * @export
 * @class SettingsLogSettingsApi
 * @extends {BaseAPI}
 */
export class SettingsLogSettingsApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary download logfile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsLogSettingsApi
     */
    public settingsLogSettingsDownload(options?: AxiosRequestConfig) {
        return SettingsLogSettingsApiFp(this.configuration).settingsLogSettingsDownload(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ThemingIconApi - axios parameter creator
 * @export
 */
export const ThemingIconApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return a 32x32 favicon as png
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetFavicon: async (app: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('themingIconGetFavicon', 'app', app)
            const localVarPath = `/index.php/apps/theming/favicon/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a themed icon
         * @param {string} app ID of the app
         * @param {string} image image file name (svg required)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetThemedIcon: async (app: string, image: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('themingIconGetThemedIcon', 'app', app)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('themingIconGetThemedIcon', 'image', image)
            const localVarPath = `/index.php/apps/theming/img/{app}/{image}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"image"}}`, encodeURIComponent(String(image)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return a 512x512 icon for touch devices
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetTouchIcon: async (app: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('themingIconGetTouchIcon', 'app', app)
            const localVarPath = `/index.php/apps/theming/icon/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThemingIconApi - functional programming interface
 * @export
 */
export const ThemingIconApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThemingIconApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return a 32x32 favicon as png
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingIconGetFavicon(app: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingIconGetFavicon(app, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a themed icon
         * @param {string} app ID of the app
         * @param {string} image image file name (svg required)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingIconGetThemedIcon(app: string, image: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingIconGetThemedIcon(app, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return a 512x512 icon for touch devices
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingIconGetTouchIcon(app: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingIconGetTouchIcon(app, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThemingIconApi - factory interface
 * @export
 */
export const ThemingIconApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThemingIconApiFp(configuration)
    return {
        /**
         * 
         * @summary Return a 32x32 favicon as png
         * @param {ThemingIconApiThemingIconGetFaviconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetFavicon(requestParameters: ThemingIconApiThemingIconGetFaviconRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.themingIconGetFavicon(requestParameters.app, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a themed icon
         * @param {ThemingIconApiThemingIconGetThemedIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetThemedIcon(requestParameters: ThemingIconApiThemingIconGetThemedIconRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.themingIconGetThemedIcon(requestParameters.app, requestParameters.image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return a 512x512 icon for touch devices
         * @param {ThemingIconApiThemingIconGetTouchIconRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetTouchIcon(requestParameters: ThemingIconApiThemingIconGetTouchIconRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.themingIconGetTouchIcon(requestParameters.app, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for themingIconGetFavicon operation in ThemingIconApi.
 * @export
 * @interface ThemingIconApiThemingIconGetFaviconRequest
 */
export interface ThemingIconApiThemingIconGetFaviconRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ThemingIconApiThemingIconGetFavicon
     */
    readonly app: string
}

/**
 * Request parameters for themingIconGetThemedIcon operation in ThemingIconApi.
 * @export
 * @interface ThemingIconApiThemingIconGetThemedIconRequest
 */
export interface ThemingIconApiThemingIconGetThemedIconRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ThemingIconApiThemingIconGetThemedIcon
     */
    readonly app: string

    /**
     * image file name (svg required)
     * @type {string}
     * @memberof ThemingIconApiThemingIconGetThemedIcon
     */
    readonly image: string
}

/**
 * Request parameters for themingIconGetTouchIcon operation in ThemingIconApi.
 * @export
 * @interface ThemingIconApiThemingIconGetTouchIconRequest
 */
export interface ThemingIconApiThemingIconGetTouchIconRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ThemingIconApiThemingIconGetTouchIcon
     */
    readonly app: string
}

/**
 * ThemingIconApi - object-oriented interface
 * @export
 * @class ThemingIconApi
 * @extends {BaseAPI}
 */
export class ThemingIconApi extends BaseAPI {
    /**
     * 
     * @summary Return a 32x32 favicon as png
     * @param {ThemingIconApiThemingIconGetFaviconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingIconApi
     */
    public themingIconGetFavicon(requestParameters: ThemingIconApiThemingIconGetFaviconRequest, options?: AxiosRequestConfig) {
        return ThemingIconApiFp(this.configuration).themingIconGetFavicon(requestParameters.app, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a themed icon
     * @param {ThemingIconApiThemingIconGetThemedIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingIconApi
     */
    public themingIconGetThemedIcon(requestParameters: ThemingIconApiThemingIconGetThemedIconRequest, options?: AxiosRequestConfig) {
        return ThemingIconApiFp(this.configuration).themingIconGetThemedIcon(requestParameters.app, requestParameters.image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return a 512x512 icon for touch devices
     * @param {ThemingIconApiThemingIconGetTouchIconRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingIconApi
     */
    public themingIconGetTouchIcon(requestParameters: ThemingIconApiThemingIconGetTouchIconRequest, options?: AxiosRequestConfig) {
        return ThemingIconApiFp(this.configuration).themingIconGetTouchIcon(requestParameters.app, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ThemingThemingApi - axios parameter creator
 * @export
 */
export const ThemingThemingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an image
         * @param {string} key Key of the image
         * @param {number} [useSvg] Return image as SVG
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetImage: async (key: string, useSvg?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('themingThemingGetImage', 'key', key)
            const localVarPath = `/index.php/apps/theming/image/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (useSvg !== undefined) {
                localVarQueryParameter['useSvg'] = useSvg;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the manifest for an app
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetManifest: async (app: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('themingThemingGetManifest', 'app', app)
            const localVarPath = `/index.php/apps/theming/manifest/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the CSS stylesheet for a theme
         * @param {string} themeId ID of the theme
         * @param {number} [plain] Let the browser decide the CSS priority
         * @param {number} [withCustomCss] Include custom CSS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetThemeStylesheet: async (themeId: string, plain?: number, withCustomCss?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'themeId' is not null or undefined
            assertParamExists('themingThemingGetThemeStylesheet', 'themeId', themeId)
            const localVarPath = `/index.php/apps/theming/theme/{themeId}.css`
                .replace(`{${"themeId"}}`, encodeURIComponent(String(themeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (plain !== undefined) {
                localVarQueryParameter['plain'] = plain;
            }

            if (withCustomCss !== undefined) {
                localVarQueryParameter['withCustomCss'] = withCustomCss;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThemingThemingApi - functional programming interface
 * @export
 */
export const ThemingThemingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThemingThemingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get an image
         * @param {string} key Key of the image
         * @param {number} [useSvg] Return image as SVG
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingThemingGetImage(key: string, useSvg?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingThemingGetImage(key, useSvg, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the manifest for an app
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingThemingGetManifest(app: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThemingThemingGetManifest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingThemingGetManifest(app, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the CSS stylesheet for a theme
         * @param {string} themeId ID of the theme
         * @param {number} [plain] Let the browser decide the CSS priority
         * @param {number} [withCustomCss] Include custom CSS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingThemingGetThemeStylesheet(themeId: string, plain?: number, withCustomCss?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingThemingGetThemeStylesheet(themeId, plain, withCustomCss, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThemingThemingApi - factory interface
 * @export
 */
export const ThemingThemingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThemingThemingApiFp(configuration)
    return {
        /**
         * 
         * @summary Get an image
         * @param {ThemingThemingApiThemingThemingGetImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetImage(requestParameters: ThemingThemingApiThemingThemingGetImageRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.themingThemingGetImage(requestParameters.key, requestParameters.useSvg, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the manifest for an app
         * @param {ThemingThemingApiThemingThemingGetManifestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetManifest(requestParameters: ThemingThemingApiThemingThemingGetManifestRequest, options?: AxiosRequestConfig): AxiosPromise<ThemingThemingGetManifest200Response> {
            return localVarFp.themingThemingGetManifest(requestParameters.app, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the CSS stylesheet for a theme
         * @param {ThemingThemingApiThemingThemingGetThemeStylesheetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetThemeStylesheet(requestParameters: ThemingThemingApiThemingThemingGetThemeStylesheetRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.themingThemingGetThemeStylesheet(requestParameters.themeId, requestParameters.plain, requestParameters.withCustomCss, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for themingThemingGetImage operation in ThemingThemingApi.
 * @export
 * @interface ThemingThemingApiThemingThemingGetImageRequest
 */
export interface ThemingThemingApiThemingThemingGetImageRequest {
    /**
     * Key of the image
     * @type {string}
     * @memberof ThemingThemingApiThemingThemingGetImage
     */
    readonly key: string

    /**
     * Return image as SVG
     * @type {number}
     * @memberof ThemingThemingApiThemingThemingGetImage
     */
    readonly useSvg?: number
}

/**
 * Request parameters for themingThemingGetManifest operation in ThemingThemingApi.
 * @export
 * @interface ThemingThemingApiThemingThemingGetManifestRequest
 */
export interface ThemingThemingApiThemingThemingGetManifestRequest {
    /**
     * ID of the app
     * @type {string}
     * @memberof ThemingThemingApiThemingThemingGetManifest
     */
    readonly app: string
}

/**
 * Request parameters for themingThemingGetThemeStylesheet operation in ThemingThemingApi.
 * @export
 * @interface ThemingThemingApiThemingThemingGetThemeStylesheetRequest
 */
export interface ThemingThemingApiThemingThemingGetThemeStylesheetRequest {
    /**
     * ID of the theme
     * @type {string}
     * @memberof ThemingThemingApiThemingThemingGetThemeStylesheet
     */
    readonly themeId: string

    /**
     * Let the browser decide the CSS priority
     * @type {number}
     * @memberof ThemingThemingApiThemingThemingGetThemeStylesheet
     */
    readonly plain?: number

    /**
     * Include custom CSS
     * @type {number}
     * @memberof ThemingThemingApiThemingThemingGetThemeStylesheet
     */
    readonly withCustomCss?: number
}

/**
 * ThemingThemingApi - object-oriented interface
 * @export
 * @class ThemingThemingApi
 * @extends {BaseAPI}
 */
export class ThemingThemingApi extends BaseAPI {
    /**
     * 
     * @summary Get an image
     * @param {ThemingThemingApiThemingThemingGetImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingThemingApi
     */
    public themingThemingGetImage(requestParameters: ThemingThemingApiThemingThemingGetImageRequest, options?: AxiosRequestConfig) {
        return ThemingThemingApiFp(this.configuration).themingThemingGetImage(requestParameters.key, requestParameters.useSvg, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the manifest for an app
     * @param {ThemingThemingApiThemingThemingGetManifestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingThemingApi
     */
    public themingThemingGetManifest(requestParameters: ThemingThemingApiThemingThemingGetManifestRequest, options?: AxiosRequestConfig) {
        return ThemingThemingApiFp(this.configuration).themingThemingGetManifest(requestParameters.app, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the CSS stylesheet for a theme
     * @param {ThemingThemingApiThemingThemingGetThemeStylesheetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingThemingApi
     */
    public themingThemingGetThemeStylesheet(requestParameters: ThemingThemingApiThemingThemingGetThemeStylesheetRequest, options?: AxiosRequestConfig) {
        return ThemingThemingApiFp(this.configuration).themingThemingGetThemeStylesheet(requestParameters.themeId, requestParameters.plain, requestParameters.withCustomCss, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ThemingUserThemeApi - axios parameter creator
 * @export
 */
export const ThemingUserThemeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the background
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeDeleteBackground: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeDeleteBackground', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/index.php/apps/theming/background/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeDisableTheme: async (themeId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'themeId' is not null or undefined
            assertParamExists('themingUserThemeDisableTheme', 'themeId', themeId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeDisableTheme', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/theming/api/v1/theme/{themeId}`
                .replace(`{${"themeId"}}`, encodeURIComponent(String(themeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeEnableTheme: async (themeId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'themeId' is not null or undefined
            assertParamExists('themingUserThemeEnableTheme', 'themeId', themeId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeEnableTheme', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/theming/api/v1/theme/{themeId}/enable`
                .replace(`{${"themeId"}}`, encodeURIComponent(String(themeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the background image
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeGetBackground: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeGetBackground', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/index.php/apps/theming/background`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the background
         * @param {string} type Type of background
         * @param {string} oCSAPIRequest 
         * @param {string} [value] Path of the background image
         * @param {string | null} [color] Color for the background
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeSetBackground: async (type: string, oCSAPIRequest: string, value?: string, color?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('themingUserThemeSetBackground', 'type', type)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeSetBackground', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/index.php/apps/theming/background/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThemingUserThemeApi - functional programming interface
 * @export
 */
export const ThemingUserThemeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThemingUserThemeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete the background
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeDeleteBackground(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThemingBackground>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeDeleteBackground(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Disable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeDisableTheme(themeId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeDisableTheme(themeId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Enable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeEnableTheme(themeId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeEnableTheme(themeId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the background image
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeGetBackground(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeGetBackground(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set the background
         * @param {string} type Type of background
         * @param {string} oCSAPIRequest 
         * @param {string} [value] Path of the background image
         * @param {string | null} [color] Color for the background
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeSetBackground(type: string, oCSAPIRequest: string, value?: string, color?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThemingBackground>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeSetBackground(type, oCSAPIRequest, value, color, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThemingUserThemeApi - factory interface
 * @export
 */
export const ThemingUserThemeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThemingUserThemeApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete the background
         * @param {ThemingUserThemeApiThemingUserThemeDeleteBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeDeleteBackground(requestParameters: ThemingUserThemeApiThemingUserThemeDeleteBackgroundRequest, options?: AxiosRequestConfig): AxiosPromise<ThemingBackground> {
            return localVarFp.themingUserThemeDeleteBackground(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable theme
         * @param {ThemingUserThemeApiThemingUserThemeDisableThemeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeDisableTheme(requestParameters: ThemingUserThemeApiThemingUserThemeDisableThemeRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.themingUserThemeDisableTheme(requestParameters.themeId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable theme
         * @param {ThemingUserThemeApiThemingUserThemeEnableThemeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeEnableTheme(requestParameters: ThemingUserThemeApiThemingUserThemeEnableThemeRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.themingUserThemeEnableTheme(requestParameters.themeId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the background image
         * @param {ThemingUserThemeApiThemingUserThemeGetBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeGetBackground(requestParameters: ThemingUserThemeApiThemingUserThemeGetBackgroundRequest, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.themingUserThemeGetBackground(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the background
         * @param {ThemingUserThemeApiThemingUserThemeSetBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeSetBackground(requestParameters: ThemingUserThemeApiThemingUserThemeSetBackgroundRequest, options?: AxiosRequestConfig): AxiosPromise<ThemingBackground> {
            return localVarFp.themingUserThemeSetBackground(requestParameters.type, requestParameters.oCSAPIRequest, requestParameters.value, requestParameters.color, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for themingUserThemeDeleteBackground operation in ThemingUserThemeApi.
 * @export
 * @interface ThemingUserThemeApiThemingUserThemeDeleteBackgroundRequest
 */
export interface ThemingUserThemeApiThemingUserThemeDeleteBackgroundRequest {
    /**
     * 
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeDeleteBackground
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for themingUserThemeDisableTheme operation in ThemingUserThemeApi.
 * @export
 * @interface ThemingUserThemeApiThemingUserThemeDisableThemeRequest
 */
export interface ThemingUserThemeApiThemingUserThemeDisableThemeRequest {
    /**
     * the theme ID
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeDisableTheme
     */
    readonly themeId: string

    /**
     * 
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeDisableTheme
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for themingUserThemeEnableTheme operation in ThemingUserThemeApi.
 * @export
 * @interface ThemingUserThemeApiThemingUserThemeEnableThemeRequest
 */
export interface ThemingUserThemeApiThemingUserThemeEnableThemeRequest {
    /**
     * the theme ID
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeEnableTheme
     */
    readonly themeId: string

    /**
     * 
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeEnableTheme
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for themingUserThemeGetBackground operation in ThemingUserThemeApi.
 * @export
 * @interface ThemingUserThemeApiThemingUserThemeGetBackgroundRequest
 */
export interface ThemingUserThemeApiThemingUserThemeGetBackgroundRequest {
    /**
     * 
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeGetBackground
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for themingUserThemeSetBackground operation in ThemingUserThemeApi.
 * @export
 * @interface ThemingUserThemeApiThemingUserThemeSetBackgroundRequest
 */
export interface ThemingUserThemeApiThemingUserThemeSetBackgroundRequest {
    /**
     * Type of background
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeSetBackground
     */
    readonly type: string

    /**
     * 
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeSetBackground
     */
    readonly oCSAPIRequest: string

    /**
     * Path of the background image
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeSetBackground
     */
    readonly value?: string

    /**
     * Color for the background
     * @type {string}
     * @memberof ThemingUserThemeApiThemingUserThemeSetBackground
     */
    readonly color?: string | null
}

/**
 * ThemingUserThemeApi - object-oriented interface
 * @export
 * @class ThemingUserThemeApi
 * @extends {BaseAPI}
 */
export class ThemingUserThemeApi extends BaseAPI {
    /**
     * 
     * @summary Delete the background
     * @param {ThemingUserThemeApiThemingUserThemeDeleteBackgroundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeDeleteBackground(requestParameters: ThemingUserThemeApiThemingUserThemeDeleteBackgroundRequest, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeDeleteBackground(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable theme
     * @param {ThemingUserThemeApiThemingUserThemeDisableThemeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeDisableTheme(requestParameters: ThemingUserThemeApiThemingUserThemeDisableThemeRequest, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeDisableTheme(requestParameters.themeId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable theme
     * @param {ThemingUserThemeApiThemingUserThemeEnableThemeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeEnableTheme(requestParameters: ThemingUserThemeApiThemingUserThemeEnableThemeRequest, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeEnableTheme(requestParameters.themeId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the background image
     * @param {ThemingUserThemeApiThemingUserThemeGetBackgroundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeGetBackground(requestParameters: ThemingUserThemeApiThemingUserThemeGetBackgroundRequest, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeGetBackground(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set the background
     * @param {ThemingUserThemeApiThemingUserThemeSetBackgroundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeSetBackground(requestParameters: ThemingUserThemeApiThemingUserThemeSetBackgroundRequest, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeSetBackground(requestParameters.type, requestParameters.oCSAPIRequest, requestParameters.value, requestParameters.color, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UpdatenotificationApiApi - axios parameter creator
 * @export
 */
export const UpdatenotificationApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary List available updates for apps
         * @param {UpdatenotificationApiGetAppListApiVersionEnum} apiVersion 
         * @param {string} newVersion Server version to check updates for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatenotificationApiGetAppList: async (apiVersion: UpdatenotificationApiGetAppListApiVersionEnum, newVersion: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiVersion' is not null or undefined
            assertParamExists('updatenotificationApiGetAppList', 'apiVersion', apiVersion)
            // verify required parameter 'newVersion' is not null or undefined
            assertParamExists('updatenotificationApiGetAppList', 'newVersion', newVersion)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('updatenotificationApiGetAppList', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/updatenotification/api/{apiVersion}/applist/{newVersion}`
                .replace(`{${"apiVersion"}}`, encodeURIComponent(String(apiVersion)))
                .replace(`{${"newVersion"}}`, encodeURIComponent(String(newVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdatenotificationApiApi - functional programming interface
 * @export
 */
export const UpdatenotificationApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdatenotificationApiApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary List available updates for apps
         * @param {UpdatenotificationApiGetAppListApiVersionEnum} apiVersion 
         * @param {string} newVersion Server version to check updates for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatenotificationApiGetAppList(apiVersion: UpdatenotificationApiGetAppListApiVersionEnum, newVersion: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdatenotificationApiGetAppList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatenotificationApiGetAppList(apiVersion, newVersion, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdatenotificationApiApi - factory interface
 * @export
 */
export const UpdatenotificationApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdatenotificationApiApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary List available updates for apps
         * @param {UpdatenotificationApiApiUpdatenotificationApiGetAppListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatenotificationApiGetAppList(requestParameters: UpdatenotificationApiApiUpdatenotificationApiGetAppListRequest, options?: AxiosRequestConfig): AxiosPromise<UpdatenotificationApiGetAppList200Response> {
            return localVarFp.updatenotificationApiGetAppList(requestParameters.apiVersion, requestParameters.newVersion, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updatenotificationApiGetAppList operation in UpdatenotificationApiApi.
 * @export
 * @interface UpdatenotificationApiApiUpdatenotificationApiGetAppListRequest
 */
export interface UpdatenotificationApiApiUpdatenotificationApiGetAppListRequest {
    /**
     * 
     * @type {'v1'}
     * @memberof UpdatenotificationApiApiUpdatenotificationApiGetAppList
     */
    readonly apiVersion: UpdatenotificationApiGetAppListApiVersionEnum

    /**
     * Server version to check updates for
     * @type {string}
     * @memberof UpdatenotificationApiApiUpdatenotificationApiGetAppList
     */
    readonly newVersion: string

    /**
     * 
     * @type {string}
     * @memberof UpdatenotificationApiApiUpdatenotificationApiGetAppList
     */
    readonly oCSAPIRequest: string
}

/**
 * UpdatenotificationApiApi - object-oriented interface
 * @export
 * @class UpdatenotificationApiApi
 * @extends {BaseAPI}
 */
export class UpdatenotificationApiApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary List available updates for apps
     * @param {UpdatenotificationApiApiUpdatenotificationApiGetAppListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdatenotificationApiApi
     */
    public updatenotificationApiGetAppList(requestParameters: UpdatenotificationApiApiUpdatenotificationApiGetAppListRequest, options?: AxiosRequestConfig) {
        return UpdatenotificationApiApiFp(this.configuration).updatenotificationApiGetAppList(requestParameters.apiVersion, requestParameters.newVersion, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UpdatenotificationApiGetAppListApiVersionEnum = {
    V1: 'v1'
} as const;
export type UpdatenotificationApiGetAppListApiVersionEnum = typeof UpdatenotificationApiGetAppListApiVersionEnum[keyof typeof UpdatenotificationApiGetAppListApiVersionEnum];


/**
 * UserStatusHeartbeatApi - axios parameter creator
 * @export
 */
export const UserStatusHeartbeatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Keep the status alive
         * @param {string} status Only online, away
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusHeartbeatHeartbeat: async (status: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('userStatusHeartbeatHeartbeat', 'status', status)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusHeartbeatHeartbeat', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/heartbeat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusHeartbeatApi - functional programming interface
 * @export
 */
export const UserStatusHeartbeatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusHeartbeatApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Keep the status alive
         * @param {string} status Only online, away
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusHeartbeatHeartbeat(status: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusHeartbeatHeartbeat(status, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStatusHeartbeatApi - factory interface
 * @export
 */
export const UserStatusHeartbeatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusHeartbeatApiFp(configuration)
    return {
        /**
         * 
         * @summary Keep the status alive
         * @param {UserStatusHeartbeatApiUserStatusHeartbeatHeartbeatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusHeartbeatHeartbeat(requestParameters: UserStatusHeartbeatApiUserStatusHeartbeatHeartbeatRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusHeartbeatHeartbeat(requestParameters.status, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userStatusHeartbeatHeartbeat operation in UserStatusHeartbeatApi.
 * @export
 * @interface UserStatusHeartbeatApiUserStatusHeartbeatHeartbeatRequest
 */
export interface UserStatusHeartbeatApiUserStatusHeartbeatHeartbeatRequest {
    /**
     * Only online, away
     * @type {string}
     * @memberof UserStatusHeartbeatApiUserStatusHeartbeatHeartbeat
     */
    readonly status: string

    /**
     * 
     * @type {string}
     * @memberof UserStatusHeartbeatApiUserStatusHeartbeatHeartbeat
     */
    readonly oCSAPIRequest: string
}

/**
 * UserStatusHeartbeatApi - object-oriented interface
 * @export
 * @class UserStatusHeartbeatApi
 * @extends {BaseAPI}
 */
export class UserStatusHeartbeatApi extends BaseAPI {
    /**
     * 
     * @summary Keep the status alive
     * @param {UserStatusHeartbeatApiUserStatusHeartbeatHeartbeatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusHeartbeatApi
     */
    public userStatusHeartbeatHeartbeat(requestParameters: UserStatusHeartbeatApiUserStatusHeartbeatHeartbeatRequest, options?: AxiosRequestConfig) {
        return UserStatusHeartbeatApiFp(this.configuration).userStatusHeartbeatHeartbeat(requestParameters.status, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserStatusPredefinedStatusApi - axios parameter creator
 * @export
 */
export const UserStatusPredefinedStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all predefined messages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusPredefinedStatusFindAll: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusPredefinedStatusFindAll', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/predefined_statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusPredefinedStatusApi - functional programming interface
 * @export
 */
export const UserStatusPredefinedStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusPredefinedStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all predefined messages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusPredefinedStatusFindAll(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusPredefinedStatusFindAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusPredefinedStatusFindAll(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStatusPredefinedStatusApi - factory interface
 * @export
 */
export const UserStatusPredefinedStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusPredefinedStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all predefined messages
         * @param {UserStatusPredefinedStatusApiUserStatusPredefinedStatusFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusPredefinedStatusFindAll(requestParameters: UserStatusPredefinedStatusApiUserStatusPredefinedStatusFindAllRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusPredefinedStatusFindAll200Response> {
            return localVarFp.userStatusPredefinedStatusFindAll(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userStatusPredefinedStatusFindAll operation in UserStatusPredefinedStatusApi.
 * @export
 * @interface UserStatusPredefinedStatusApiUserStatusPredefinedStatusFindAllRequest
 */
export interface UserStatusPredefinedStatusApiUserStatusPredefinedStatusFindAllRequest {
    /**
     * 
     * @type {string}
     * @memberof UserStatusPredefinedStatusApiUserStatusPredefinedStatusFindAll
     */
    readonly oCSAPIRequest: string
}

/**
 * UserStatusPredefinedStatusApi - object-oriented interface
 * @export
 * @class UserStatusPredefinedStatusApi
 * @extends {BaseAPI}
 */
export class UserStatusPredefinedStatusApi extends BaseAPI {
    /**
     * 
     * @summary Get all predefined messages
     * @param {UserStatusPredefinedStatusApiUserStatusPredefinedStatusFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusPredefinedStatusApi
     */
    public userStatusPredefinedStatusFindAll(requestParameters: UserStatusPredefinedStatusApiUserStatusPredefinedStatusFindAllRequest, options?: AxiosRequestConfig) {
        return UserStatusPredefinedStatusApiFp(this.configuration).userStatusPredefinedStatusFindAll(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserStatusStatusesApi - axios parameter creator
 * @export
 */
export const UserStatusStatusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find the status of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusStatusesFind: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userStatusStatusesFind', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusStatusesFind', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/statuses/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find statuses of users
         * @param {string} oCSAPIRequest 
         * @param {number | null} [limit] Maximum number of statuses to find
         * @param {number | null} [offset] Offset for finding statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusStatusesFindAll: async (oCSAPIRequest: string, limit?: number | null, offset?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusStatusesFindAll', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusStatusesApi - functional programming interface
 * @export
 */
export const UserStatusStatusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusStatusesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find the status of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusStatusesFind(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusStatusesFind200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusStatusesFind(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find statuses of users
         * @param {string} oCSAPIRequest 
         * @param {number | null} [limit] Maximum number of statuses to find
         * @param {number | null} [offset] Offset for finding statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusStatusesFindAll(oCSAPIRequest: string, limit?: number | null, offset?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusStatusesFindAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusStatusesFindAll(oCSAPIRequest, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStatusStatusesApi - factory interface
 * @export
 */
export const UserStatusStatusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusStatusesApiFp(configuration)
    return {
        /**
         * 
         * @summary Find the status of a user
         * @param {UserStatusStatusesApiUserStatusStatusesFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusStatusesFind(requestParameters: UserStatusStatusesApiUserStatusStatusesFindRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusStatusesFind200Response> {
            return localVarFp.userStatusStatusesFind(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find statuses of users
         * @param {UserStatusStatusesApiUserStatusStatusesFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusStatusesFindAll(requestParameters: UserStatusStatusesApiUserStatusStatusesFindAllRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusStatusesFindAll200Response> {
            return localVarFp.userStatusStatusesFindAll(requestParameters.oCSAPIRequest, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userStatusStatusesFind operation in UserStatusStatusesApi.
 * @export
 * @interface UserStatusStatusesApiUserStatusStatusesFindRequest
 */
export interface UserStatusStatusesApiUserStatusStatusesFindRequest {
    /**
     * ID of the user
     * @type {string}
     * @memberof UserStatusStatusesApiUserStatusStatusesFind
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof UserStatusStatusesApiUserStatusStatusesFind
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for userStatusStatusesFindAll operation in UserStatusStatusesApi.
 * @export
 * @interface UserStatusStatusesApiUserStatusStatusesFindAllRequest
 */
export interface UserStatusStatusesApiUserStatusStatusesFindAllRequest {
    /**
     * 
     * @type {string}
     * @memberof UserStatusStatusesApiUserStatusStatusesFindAll
     */
    readonly oCSAPIRequest: string

    /**
     * Maximum number of statuses to find
     * @type {number}
     * @memberof UserStatusStatusesApiUserStatusStatusesFindAll
     */
    readonly limit?: number | null

    /**
     * Offset for finding statuses
     * @type {number}
     * @memberof UserStatusStatusesApiUserStatusStatusesFindAll
     */
    readonly offset?: number | null
}

/**
 * UserStatusStatusesApi - object-oriented interface
 * @export
 * @class UserStatusStatusesApi
 * @extends {BaseAPI}
 */
export class UserStatusStatusesApi extends BaseAPI {
    /**
     * 
     * @summary Find the status of a user
     * @param {UserStatusStatusesApiUserStatusStatusesFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusStatusesApi
     */
    public userStatusStatusesFind(requestParameters: UserStatusStatusesApiUserStatusStatusesFindRequest, options?: AxiosRequestConfig) {
        return UserStatusStatusesApiFp(this.configuration).userStatusStatusesFind(requestParameters.userId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find statuses of users
     * @param {UserStatusStatusesApiUserStatusStatusesFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusStatusesApi
     */
    public userStatusStatusesFindAll(requestParameters: UserStatusStatusesApiUserStatusStatusesFindAllRequest, options?: AxiosRequestConfig) {
        return UserStatusStatusesApiFp(this.configuration).userStatusStatusesFindAll(requestParameters.oCSAPIRequest, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserStatusUserStatusApi - axios parameter creator
 * @export
 */
export const UserStatusUserStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clear the message of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusClearMessage: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusClearMessage', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the status of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusGetStatus: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusGetStatus', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revert the status to the previous status
         * @param {string} messageId ID of the message to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusRevertStatus: async (messageId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('userStatusUserStatusRevertStatus', 'messageId', messageId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusRevertStatus', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/revert/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the message to a custom message for the current user
         * @param {string} oCSAPIRequest 
         * @param {string | null} [statusIcon] Icon of the status
         * @param {string | null} [message] Message of the status
         * @param {number | null} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetCustomMessage: async (oCSAPIRequest: string, statusIcon?: string | null, message?: string | null, clearAt?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusSetCustomMessage', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/message/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statusIcon !== undefined) {
                localVarQueryParameter['statusIcon'] = statusIcon;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (clearAt !== undefined) {
                localVarQueryParameter['clearAt'] = clearAt;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the message to a predefined message for the current user
         * @param {string} messageId ID of the predefined message
         * @param {string} oCSAPIRequest 
         * @param {number | null} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetPredefinedMessage: async (messageId: string, oCSAPIRequest: string, clearAt?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('userStatusUserStatusSetPredefinedMessage', 'messageId', messageId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusSetPredefinedMessage', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/message/predefined`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (messageId !== undefined) {
                localVarQueryParameter['messageId'] = messageId;
            }

            if (clearAt !== undefined) {
                localVarQueryParameter['clearAt'] = clearAt;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the status type of the current user
         * @param {string} statusType The new status type
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetStatus: async (statusType: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statusType' is not null or undefined
            assertParamExists('userStatusUserStatusSetStatus', 'statusType', statusType)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusSetStatus', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statusType !== undefined) {
                localVarQueryParameter['statusType'] = statusType;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusUserStatusApi - functional programming interface
 * @export
 */
export const UserStatusUserStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusUserStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Clear the message of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusClearMessage(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusClearMessage(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the status of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusGetStatus(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusGetStatus(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revert the status to the previous status
         * @param {string} messageId ID of the message to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusRevertStatus(messageId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusRevertStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusRevertStatus(messageId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set the message to a custom message for the current user
         * @param {string} oCSAPIRequest 
         * @param {string | null} [statusIcon] Icon of the status
         * @param {string | null} [message] Message of the status
         * @param {number | null} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusSetCustomMessage(oCSAPIRequest: string, statusIcon?: string | null, message?: string | null, clearAt?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusSetCustomMessage(oCSAPIRequest, statusIcon, message, clearAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set the message to a predefined message for the current user
         * @param {string} messageId ID of the predefined message
         * @param {string} oCSAPIRequest 
         * @param {number | null} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusSetPredefinedMessage(messageId: string, oCSAPIRequest: string, clearAt?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusSetPredefinedMessage(messageId, oCSAPIRequest, clearAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the status type of the current user
         * @param {string} statusType The new status type
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusSetStatus(statusType: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusSetStatus(statusType, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStatusUserStatusApi - factory interface
 * @export
 */
export const UserStatusUserStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusUserStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Clear the message of the current user
         * @param {UserStatusUserStatusApiUserStatusUserStatusClearMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusClearMessage(requestParameters: UserStatusUserStatusApiUserStatusUserStatusClearMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.userStatusUserStatusClearMessage(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the status of the current user
         * @param {UserStatusUserStatusApiUserStatusUserStatusGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusGetStatus(requestParameters: UserStatusUserStatusApiUserStatusUserStatusGetStatusRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusGetStatus(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revert the status to the previous status
         * @param {UserStatusUserStatusApiUserStatusUserStatusRevertStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusRevertStatus(requestParameters: UserStatusUserStatusApiUserStatusUserStatusRevertStatusRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusUserStatusRevertStatus200Response> {
            return localVarFp.userStatusUserStatusRevertStatus(requestParameters.messageId, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the message to a custom message for the current user
         * @param {UserStatusUserStatusApiUserStatusUserStatusSetCustomMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetCustomMessage(requestParameters: UserStatusUserStatusApiUserStatusUserStatusSetCustomMessageRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusSetCustomMessage(requestParameters.oCSAPIRequest, requestParameters.statusIcon, requestParameters.message, requestParameters.clearAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the message to a predefined message for the current user
         * @param {UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetPredefinedMessage(requestParameters: UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessageRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusSetPredefinedMessage(requestParameters.messageId, requestParameters.oCSAPIRequest, requestParameters.clearAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the status type of the current user
         * @param {UserStatusUserStatusApiUserStatusUserStatusSetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetStatus(requestParameters: UserStatusUserStatusApiUserStatusUserStatusSetStatusRequest, options?: AxiosRequestConfig): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusSetStatus(requestParameters.statusType, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userStatusUserStatusClearMessage operation in UserStatusUserStatusApi.
 * @export
 * @interface UserStatusUserStatusApiUserStatusUserStatusClearMessageRequest
 */
export interface UserStatusUserStatusApiUserStatusUserStatusClearMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusClearMessage
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for userStatusUserStatusGetStatus operation in UserStatusUserStatusApi.
 * @export
 * @interface UserStatusUserStatusApiUserStatusUserStatusGetStatusRequest
 */
export interface UserStatusUserStatusApiUserStatusUserStatusGetStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusGetStatus
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for userStatusUserStatusRevertStatus operation in UserStatusUserStatusApi.
 * @export
 * @interface UserStatusUserStatusApiUserStatusUserStatusRevertStatusRequest
 */
export interface UserStatusUserStatusApiUserStatusUserStatusRevertStatusRequest {
    /**
     * ID of the message to delete
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusRevertStatus
     */
    readonly messageId: string

    /**
     * 
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusRevertStatus
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for userStatusUserStatusSetCustomMessage operation in UserStatusUserStatusApi.
 * @export
 * @interface UserStatusUserStatusApiUserStatusUserStatusSetCustomMessageRequest
 */
export interface UserStatusUserStatusApiUserStatusUserStatusSetCustomMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetCustomMessage
     */
    readonly oCSAPIRequest: string

    /**
     * Icon of the status
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetCustomMessage
     */
    readonly statusIcon?: string | null

    /**
     * Message of the status
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetCustomMessage
     */
    readonly message?: string | null

    /**
     * When the message should be cleared
     * @type {number}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetCustomMessage
     */
    readonly clearAt?: number | null
}

/**
 * Request parameters for userStatusUserStatusSetPredefinedMessage operation in UserStatusUserStatusApi.
 * @export
 * @interface UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessageRequest
 */
export interface UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessageRequest {
    /**
     * ID of the predefined message
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessage
     */
    readonly messageId: string

    /**
     * 
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessage
     */
    readonly oCSAPIRequest: string

    /**
     * When the message should be cleared
     * @type {number}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessage
     */
    readonly clearAt?: number | null
}

/**
 * Request parameters for userStatusUserStatusSetStatus operation in UserStatusUserStatusApi.
 * @export
 * @interface UserStatusUserStatusApiUserStatusUserStatusSetStatusRequest
 */
export interface UserStatusUserStatusApiUserStatusUserStatusSetStatusRequest {
    /**
     * The new status type
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetStatus
     */
    readonly statusType: string

    /**
     * 
     * @type {string}
     * @memberof UserStatusUserStatusApiUserStatusUserStatusSetStatus
     */
    readonly oCSAPIRequest: string
}

/**
 * UserStatusUserStatusApi - object-oriented interface
 * @export
 * @class UserStatusUserStatusApi
 * @extends {BaseAPI}
 */
export class UserStatusUserStatusApi extends BaseAPI {
    /**
     * 
     * @summary Clear the message of the current user
     * @param {UserStatusUserStatusApiUserStatusUserStatusClearMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusClearMessage(requestParameters: UserStatusUserStatusApiUserStatusUserStatusClearMessageRequest, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusClearMessage(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the status of the current user
     * @param {UserStatusUserStatusApiUserStatusUserStatusGetStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusGetStatus(requestParameters: UserStatusUserStatusApiUserStatusUserStatusGetStatusRequest, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusGetStatus(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revert the status to the previous status
     * @param {UserStatusUserStatusApiUserStatusUserStatusRevertStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusRevertStatus(requestParameters: UserStatusUserStatusApiUserStatusUserStatusRevertStatusRequest, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusRevertStatus(requestParameters.messageId, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set the message to a custom message for the current user
     * @param {UserStatusUserStatusApiUserStatusUserStatusSetCustomMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusSetCustomMessage(requestParameters: UserStatusUserStatusApiUserStatusUserStatusSetCustomMessageRequest, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusSetCustomMessage(requestParameters.oCSAPIRequest, requestParameters.statusIcon, requestParameters.message, requestParameters.clearAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set the message to a predefined message for the current user
     * @param {UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusSetPredefinedMessage(requestParameters: UserStatusUserStatusApiUserStatusUserStatusSetPredefinedMessageRequest, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusSetPredefinedMessage(requestParameters.messageId, requestParameters.oCSAPIRequest, requestParameters.clearAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the status type of the current user
     * @param {UserStatusUserStatusApiUserStatusUserStatusSetStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusSetStatus(requestParameters: UserStatusUserStatusApiUserStatusUserStatusSetStatusRequest, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusSetStatus(requestParameters.statusType, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WeatherStatusWeatherStatusApi - axios parameter creator
 * @export
 */
export const WeatherStatusWeatherStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get favorites list
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetFavorites: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusGetFavorites', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get forecast for current location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetForecast: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusGetForecast', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/forecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get stored user location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetLocation: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusGetLocation', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set favorites list
         * @param {Array<string>} favorites Favorite addresses
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetFavorites: async (favorites: Array<string>, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'favorites' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetFavorites', 'favorites', favorites)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetFavorites', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (favorites) {
                localVarQueryParameter['favorites[]'] = favorites;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding
         * @param {string} oCSAPIRequest 
         * @param {string | null} [address] Any approximative or exact address
         * @param {number | null} [lat] Latitude in decimal degree format
         * @param {number | null} [lon] Longitude in decimal degree format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetLocation: async (oCSAPIRequest: string, address?: string | null, lat?: number | null, lon?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetLocation', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address
         * @param {number} mode New mode
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetMode: async (mode: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mode' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetMode', 'mode', mode)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetMode', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/mode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Try to use the address set in user personal settings as weather location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusUsePersonalAddress: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusUsePersonalAddress', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/use-personal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherStatusWeatherStatusApi - functional programming interface
 * @export
 */
export const WeatherStatusWeatherStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherStatusWeatherStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get favorites list
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusGetFavorites(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusGetFavorites(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get forecast for current location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusGetForecast(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherStatusWeatherStatusGetForecast200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusGetForecast(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get stored user location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusGetLocation(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherStatusWeatherStatusGetLocation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusGetLocation(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set favorites list
         * @param {Array<string>} favorites Favorite addresses
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusSetFavorites(favorites: Array<string>, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiTouchProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusSetFavorites(favorites, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding
         * @param {string} oCSAPIRequest 
         * @param {string | null} [address] Any approximative or exact address
         * @param {number | null} [lat] Latitude in decimal degree format
         * @param {number | null} [lon] Longitude in decimal degree format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusSetLocation(oCSAPIRequest: string, address?: string | null, lat?: number | null, lon?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherStatusWeatherStatusUsePersonalAddress200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusSetLocation(oCSAPIRequest, address, lat, lon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address
         * @param {number} mode New mode
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusSetMode(mode: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiTouchProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusSetMode(mode, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Try to use the address set in user personal settings as weather location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusUsePersonalAddress(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherStatusWeatherStatusUsePersonalAddress200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusUsePersonalAddress(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WeatherStatusWeatherStatusApi - factory interface
 * @export
 */
export const WeatherStatusWeatherStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherStatusWeatherStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Get favorites list
         * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetFavoritesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetFavorites(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetFavoritesRequest, options?: AxiosRequestConfig): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.weatherStatusWeatherStatusGetFavorites(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get forecast for current location
         * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetForecastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetForecast(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetForecastRequest, options?: AxiosRequestConfig): AxiosPromise<WeatherStatusWeatherStatusGetForecast200Response> {
            return localVarFp.weatherStatusWeatherStatusGetForecast(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get stored user location
         * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetLocation(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetLocationRequest, options?: AxiosRequestConfig): AxiosPromise<WeatherStatusWeatherStatusGetLocation200Response> {
            return localVarFp.weatherStatusWeatherStatusGetLocation(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set favorites list
         * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetFavoritesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetFavorites(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetFavoritesRequest, options?: AxiosRequestConfig): AxiosPromise<CoreReferenceApiTouchProvider200Response> {
            return localVarFp.weatherStatusWeatherStatusSetFavorites(requestParameters.favorites, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding
         * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetLocation(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocationRequest, options?: AxiosRequestConfig): AxiosPromise<WeatherStatusWeatherStatusUsePersonalAddress200Response> {
            return localVarFp.weatherStatusWeatherStatusSetLocation(requestParameters.oCSAPIRequest, requestParameters.address, requestParameters.lat, requestParameters.lon, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address
         * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetModeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetMode(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetModeRequest, options?: AxiosRequestConfig): AxiosPromise<CoreReferenceApiTouchProvider200Response> {
            return localVarFp.weatherStatusWeatherStatusSetMode(requestParameters.mode, requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Try to use the address set in user personal settings as weather location
         * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusUsePersonalAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusUsePersonalAddress(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusUsePersonalAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WeatherStatusWeatherStatusUsePersonalAddress200Response> {
            return localVarFp.weatherStatusWeatherStatusUsePersonalAddress(requestParameters.oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for weatherStatusWeatherStatusGetFavorites operation in WeatherStatusWeatherStatusApi.
 * @export
 * @interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetFavoritesRequest
 */
export interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetFavoritesRequest {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetFavorites
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for weatherStatusWeatherStatusGetForecast operation in WeatherStatusWeatherStatusApi.
 * @export
 * @interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetForecastRequest
 */
export interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetForecastRequest {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetForecast
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for weatherStatusWeatherStatusGetLocation operation in WeatherStatusWeatherStatusApi.
 * @export
 * @interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetLocationRequest
 */
export interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetLocation
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for weatherStatusWeatherStatusSetFavorites operation in WeatherStatusWeatherStatusApi.
 * @export
 * @interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetFavoritesRequest
 */
export interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetFavoritesRequest {
    /**
     * Favorite addresses
     * @type {Array<string>}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetFavorites
     */
    readonly favorites: Array<string>

    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetFavorites
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for weatherStatusWeatherStatusSetLocation operation in WeatherStatusWeatherStatusApi.
 * @export
 * @interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocationRequest
 */
export interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocation
     */
    readonly oCSAPIRequest: string

    /**
     * Any approximative or exact address
     * @type {string}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocation
     */
    readonly address?: string | null

    /**
     * Latitude in decimal degree format
     * @type {number}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocation
     */
    readonly lat?: number | null

    /**
     * Longitude in decimal degree format
     * @type {number}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocation
     */
    readonly lon?: number | null
}

/**
 * Request parameters for weatherStatusWeatherStatusSetMode operation in WeatherStatusWeatherStatusApi.
 * @export
 * @interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetModeRequest
 */
export interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetModeRequest {
    /**
     * New mode
     * @type {number}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetMode
     */
    readonly mode: number

    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetMode
     */
    readonly oCSAPIRequest: string
}

/**
 * Request parameters for weatherStatusWeatherStatusUsePersonalAddress operation in WeatherStatusWeatherStatusApi.
 * @export
 * @interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusUsePersonalAddressRequest
 */
export interface WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusUsePersonalAddressRequest {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusUsePersonalAddress
     */
    readonly oCSAPIRequest: string
}

/**
 * WeatherStatusWeatherStatusApi - object-oriented interface
 * @export
 * @class WeatherStatusWeatherStatusApi
 * @extends {BaseAPI}
 */
export class WeatherStatusWeatherStatusApi extends BaseAPI {
    /**
     * 
     * @summary Get favorites list
     * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetFavoritesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusGetFavorites(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetFavoritesRequest, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusGetFavorites(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get forecast for current location
     * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetForecastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusGetForecast(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetForecastRequest, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusGetForecast(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get stored user location
     * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusGetLocation(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusGetLocationRequest, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusGetLocation(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set favorites list
     * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetFavoritesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusSetFavorites(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetFavoritesRequest, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusSetFavorites(requestParameters.favorites, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding
     * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusSetLocation(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetLocationRequest, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusSetLocation(requestParameters.oCSAPIRequest, requestParameters.address, requestParameters.lat, requestParameters.lon, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address
     * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetModeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusSetMode(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusSetModeRequest, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusSetMode(requestParameters.mode, requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Try to use the address set in user personal settings as weather location
     * @param {WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusUsePersonalAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusUsePersonalAddress(requestParameters: WeatherStatusWeatherStatusApiWeatherStatusWeatherStatusUsePersonalAddressRequest, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusUsePersonalAddress(requestParameters.oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



