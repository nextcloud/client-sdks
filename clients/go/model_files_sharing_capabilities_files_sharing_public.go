/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesSharingCapabilitiesFilesSharingPublic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesSharingCapabilitiesFilesSharingPublic{}

// FilesSharingCapabilitiesFilesSharingPublic struct for FilesSharingCapabilitiesFilesSharingPublic
type FilesSharingCapabilitiesFilesSharingPublic struct {
	Enabled bool `json:"enabled"`
	Password *FilesSharingCapabilitiesFilesSharingPublicPassword `json:"password,omitempty"`
	MultipleLinks *bool `json:"multiple_links,omitempty"`
	ExpireDate *FilesSharingCapabilitiesFilesSharingPublicExpireDate `json:"expire_date,omitempty"`
	ExpireDateInternal *FilesSharingCapabilitiesFilesSharingPublicExpireDate `json:"expire_date_internal,omitempty"`
	ExpireDateRemote *FilesSharingCapabilitiesFilesSharingPublicExpireDate `json:"expire_date_remote,omitempty"`
	SendMail *bool `json:"send_mail,omitempty"`
	Upload *bool `json:"upload,omitempty"`
	UploadFilesDrop *bool `json:"upload_files_drop,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilesSharingCapabilitiesFilesSharingPublic FilesSharingCapabilitiesFilesSharingPublic

// NewFilesSharingCapabilitiesFilesSharingPublic instantiates a new FilesSharingCapabilitiesFilesSharingPublic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesSharingCapabilitiesFilesSharingPublic(enabled bool) *FilesSharingCapabilitiesFilesSharingPublic {
	this := FilesSharingCapabilitiesFilesSharingPublic{}
	this.Enabled = enabled
	return &this
}

// NewFilesSharingCapabilitiesFilesSharingPublicWithDefaults instantiates a new FilesSharingCapabilitiesFilesSharingPublic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesSharingCapabilitiesFilesSharingPublicWithDefaults() *FilesSharingCapabilitiesFilesSharingPublic {
	this := FilesSharingCapabilitiesFilesSharingPublic{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetEnabled(v bool) {
	o.Enabled = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetPassword() FilesSharingCapabilitiesFilesSharingPublicPassword {
	if o == nil || IsNil(o.Password) {
		var ret FilesSharingCapabilitiesFilesSharingPublicPassword
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetPasswordOk() (*FilesSharingCapabilitiesFilesSharingPublicPassword, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given FilesSharingCapabilitiesFilesSharingPublicPassword and assigns it to the Password field.
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetPassword(v FilesSharingCapabilitiesFilesSharingPublicPassword) {
	o.Password = &v
}

// GetMultipleLinks returns the MultipleLinks field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetMultipleLinks() bool {
	if o == nil || IsNil(o.MultipleLinks) {
		var ret bool
		return ret
	}
	return *o.MultipleLinks
}

// GetMultipleLinksOk returns a tuple with the MultipleLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetMultipleLinksOk() (*bool, bool) {
	if o == nil || IsNil(o.MultipleLinks) {
		return nil, false
	}
	return o.MultipleLinks, true
}

// HasMultipleLinks returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) HasMultipleLinks() bool {
	if o != nil && !IsNil(o.MultipleLinks) {
		return true
	}

	return false
}

// SetMultipleLinks gets a reference to the given bool and assigns it to the MultipleLinks field.
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetMultipleLinks(v bool) {
	o.MultipleLinks = &v
}

// GetExpireDate returns the ExpireDate field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetExpireDate() FilesSharingCapabilitiesFilesSharingPublicExpireDate {
	if o == nil || IsNil(o.ExpireDate) {
		var ret FilesSharingCapabilitiesFilesSharingPublicExpireDate
		return ret
	}
	return *o.ExpireDate
}

// GetExpireDateOk returns a tuple with the ExpireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetExpireDateOk() (*FilesSharingCapabilitiesFilesSharingPublicExpireDate, bool) {
	if o == nil || IsNil(o.ExpireDate) {
		return nil, false
	}
	return o.ExpireDate, true
}

// HasExpireDate returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) HasExpireDate() bool {
	if o != nil && !IsNil(o.ExpireDate) {
		return true
	}

	return false
}

// SetExpireDate gets a reference to the given FilesSharingCapabilitiesFilesSharingPublicExpireDate and assigns it to the ExpireDate field.
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetExpireDate(v FilesSharingCapabilitiesFilesSharingPublicExpireDate) {
	o.ExpireDate = &v
}

// GetExpireDateInternal returns the ExpireDateInternal field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetExpireDateInternal() FilesSharingCapabilitiesFilesSharingPublicExpireDate {
	if o == nil || IsNil(o.ExpireDateInternal) {
		var ret FilesSharingCapabilitiesFilesSharingPublicExpireDate
		return ret
	}
	return *o.ExpireDateInternal
}

// GetExpireDateInternalOk returns a tuple with the ExpireDateInternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetExpireDateInternalOk() (*FilesSharingCapabilitiesFilesSharingPublicExpireDate, bool) {
	if o == nil || IsNil(o.ExpireDateInternal) {
		return nil, false
	}
	return o.ExpireDateInternal, true
}

// HasExpireDateInternal returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) HasExpireDateInternal() bool {
	if o != nil && !IsNil(o.ExpireDateInternal) {
		return true
	}

	return false
}

// SetExpireDateInternal gets a reference to the given FilesSharingCapabilitiesFilesSharingPublicExpireDate and assigns it to the ExpireDateInternal field.
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetExpireDateInternal(v FilesSharingCapabilitiesFilesSharingPublicExpireDate) {
	o.ExpireDateInternal = &v
}

// GetExpireDateRemote returns the ExpireDateRemote field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetExpireDateRemote() FilesSharingCapabilitiesFilesSharingPublicExpireDate {
	if o == nil || IsNil(o.ExpireDateRemote) {
		var ret FilesSharingCapabilitiesFilesSharingPublicExpireDate
		return ret
	}
	return *o.ExpireDateRemote
}

// GetExpireDateRemoteOk returns a tuple with the ExpireDateRemote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetExpireDateRemoteOk() (*FilesSharingCapabilitiesFilesSharingPublicExpireDate, bool) {
	if o == nil || IsNil(o.ExpireDateRemote) {
		return nil, false
	}
	return o.ExpireDateRemote, true
}

// HasExpireDateRemote returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) HasExpireDateRemote() bool {
	if o != nil && !IsNil(o.ExpireDateRemote) {
		return true
	}

	return false
}

// SetExpireDateRemote gets a reference to the given FilesSharingCapabilitiesFilesSharingPublicExpireDate and assigns it to the ExpireDateRemote field.
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetExpireDateRemote(v FilesSharingCapabilitiesFilesSharingPublicExpireDate) {
	o.ExpireDateRemote = &v
}

// GetSendMail returns the SendMail field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetSendMail() bool {
	if o == nil || IsNil(o.SendMail) {
		var ret bool
		return ret
	}
	return *o.SendMail
}

// GetSendMailOk returns a tuple with the SendMail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetSendMailOk() (*bool, bool) {
	if o == nil || IsNil(o.SendMail) {
		return nil, false
	}
	return o.SendMail, true
}

// HasSendMail returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) HasSendMail() bool {
	if o != nil && !IsNil(o.SendMail) {
		return true
	}

	return false
}

// SetSendMail gets a reference to the given bool and assigns it to the SendMail field.
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetSendMail(v bool) {
	o.SendMail = &v
}

// GetUpload returns the Upload field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetUpload() bool {
	if o == nil || IsNil(o.Upload) {
		var ret bool
		return ret
	}
	return *o.Upload
}

// GetUploadOk returns a tuple with the Upload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetUploadOk() (*bool, bool) {
	if o == nil || IsNil(o.Upload) {
		return nil, false
	}
	return o.Upload, true
}

// HasUpload returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) HasUpload() bool {
	if o != nil && !IsNil(o.Upload) {
		return true
	}

	return false
}

// SetUpload gets a reference to the given bool and assigns it to the Upload field.
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetUpload(v bool) {
	o.Upload = &v
}

// GetUploadFilesDrop returns the UploadFilesDrop field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetUploadFilesDrop() bool {
	if o == nil || IsNil(o.UploadFilesDrop) {
		var ret bool
		return ret
	}
	return *o.UploadFilesDrop
}

// GetUploadFilesDropOk returns a tuple with the UploadFilesDrop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) GetUploadFilesDropOk() (*bool, bool) {
	if o == nil || IsNil(o.UploadFilesDrop) {
		return nil, false
	}
	return o.UploadFilesDrop, true
}

// HasUploadFilesDrop returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharingPublic) HasUploadFilesDrop() bool {
	if o != nil && !IsNil(o.UploadFilesDrop) {
		return true
	}

	return false
}

// SetUploadFilesDrop gets a reference to the given bool and assigns it to the UploadFilesDrop field.
func (o *FilesSharingCapabilitiesFilesSharingPublic) SetUploadFilesDrop(v bool) {
	o.UploadFilesDrop = &v
}

func (o FilesSharingCapabilitiesFilesSharingPublic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesSharingCapabilitiesFilesSharingPublic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.MultipleLinks) {
		toSerialize["multiple_links"] = o.MultipleLinks
	}
	if !IsNil(o.ExpireDate) {
		toSerialize["expire_date"] = o.ExpireDate
	}
	if !IsNil(o.ExpireDateInternal) {
		toSerialize["expire_date_internal"] = o.ExpireDateInternal
	}
	if !IsNil(o.ExpireDateRemote) {
		toSerialize["expire_date_remote"] = o.ExpireDateRemote
	}
	if !IsNil(o.SendMail) {
		toSerialize["send_mail"] = o.SendMail
	}
	if !IsNil(o.Upload) {
		toSerialize["upload"] = o.Upload
	}
	if !IsNil(o.UploadFilesDrop) {
		toSerialize["upload_files_drop"] = o.UploadFilesDrop
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesSharingCapabilitiesFilesSharingPublic) UnmarshalJSON(bytes []byte) (err error) {
	varFilesSharingCapabilitiesFilesSharingPublic := _FilesSharingCapabilitiesFilesSharingPublic{}

	if err = json.Unmarshal(bytes, &varFilesSharingCapabilitiesFilesSharingPublic); err == nil {
		*o = FilesSharingCapabilitiesFilesSharingPublic(varFilesSharingCapabilitiesFilesSharingPublic)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "password")
		delete(additionalProperties, "multiple_links")
		delete(additionalProperties, "expire_date")
		delete(additionalProperties, "expire_date_internal")
		delete(additionalProperties, "expire_date_remote")
		delete(additionalProperties, "send_mail")
		delete(additionalProperties, "upload")
		delete(additionalProperties, "upload_files_drop")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesSharingCapabilitiesFilesSharingPublic struct {
	value *FilesSharingCapabilitiesFilesSharingPublic
	isSet bool
}

func (v NullableFilesSharingCapabilitiesFilesSharingPublic) Get() *FilesSharingCapabilitiesFilesSharingPublic {
	return v.value
}

func (v *NullableFilesSharingCapabilitiesFilesSharingPublic) Set(val *FilesSharingCapabilitiesFilesSharingPublic) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingCapabilitiesFilesSharingPublic) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingCapabilitiesFilesSharingPublic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingCapabilitiesFilesSharingPublic(val *FilesSharingCapabilitiesFilesSharingPublic) *NullableFilesSharingCapabilitiesFilesSharingPublic {
	return &NullableFilesSharingCapabilitiesFilesSharingPublic{value: val, isSet: true}
}

func (v NullableFilesSharingCapabilitiesFilesSharingPublic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingCapabilitiesFilesSharingPublic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


