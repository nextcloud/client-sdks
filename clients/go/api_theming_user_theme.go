/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type ThemingUserThemeAPI interface {

	/*
	ThemingUserThemeDeleteBackground Delete the background

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest
	*/
	ThemingUserThemeDeleteBackground(ctx context.Context) ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest

	// ThemingUserThemeDeleteBackgroundExecute executes the request
	//  @return ThemingBackground
	ThemingUserThemeDeleteBackgroundExecute(r ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest) (*ThemingBackground, *http.Response, error)

	/*
	ThemingUserThemeDisableTheme Disable theme

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param themeId the theme ID
	@return ThemingUserThemeAPIThemingUserThemeDisableThemeRequest
	*/
	ThemingUserThemeDisableTheme(ctx context.Context, themeId string) ThemingUserThemeAPIThemingUserThemeDisableThemeRequest

	// ThemingUserThemeDisableThemeExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ThemingUserThemeDisableThemeExecute(r ThemingUserThemeAPIThemingUserThemeDisableThemeRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ThemingUserThemeEnableTheme Enable theme

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param themeId the theme ID
	@return ThemingUserThemeAPIThemingUserThemeEnableThemeRequest
	*/
	ThemingUserThemeEnableTheme(ctx context.Context, themeId string) ThemingUserThemeAPIThemingUserThemeEnableThemeRequest

	// ThemingUserThemeEnableThemeExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ThemingUserThemeEnableThemeExecute(r ThemingUserThemeAPIThemingUserThemeEnableThemeRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ThemingUserThemeGetBackground Get the background image

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest
	*/
	ThemingUserThemeGetBackground(ctx context.Context) ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest

	// ThemingUserThemeGetBackgroundExecute executes the request
	//  @return *os.File
	ThemingUserThemeGetBackgroundExecute(r ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest) (*os.File, *http.Response, error)

	/*
	ThemingUserThemeSetBackground Set the background

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param type_ Type of background
	@return ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest
	*/
	ThemingUserThemeSetBackground(ctx context.Context, type_ string) ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest

	// ThemingUserThemeSetBackgroundExecute executes the request
	//  @return ThemingBackground
	ThemingUserThemeSetBackgroundExecute(r ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest) (*ThemingBackground, *http.Response, error)
}

// ThemingUserThemeAPIService ThemingUserThemeAPI service
type ThemingUserThemeAPIService service

type ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest struct {
	ctx context.Context
	ApiService ThemingUserThemeAPI
	oCSAPIRequest *string
}

func (r ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest) OCSAPIRequest(oCSAPIRequest string) ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest) Execute() (*ThemingBackground, *http.Response, error) {
	return r.ApiService.ThemingUserThemeDeleteBackgroundExecute(r)
}

/*
ThemingUserThemeDeleteBackground Delete the background

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest
*/
func (a *ThemingUserThemeAPIService) ThemingUserThemeDeleteBackground(ctx context.Context) ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest {
	return ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ThemingBackground
func (a *ThemingUserThemeAPIService) ThemingUserThemeDeleteBackgroundExecute(r ThemingUserThemeAPIThemingUserThemeDeleteBackgroundRequest) (*ThemingBackground, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ThemingBackground
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingUserThemeAPIService.ThemingUserThemeDeleteBackground")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/background/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThemingUserThemeAPIThemingUserThemeDisableThemeRequest struct {
	ctx context.Context
	ApiService ThemingUserThemeAPI
	themeId string
	oCSAPIRequest *string
}

func (r ThemingUserThemeAPIThemingUserThemeDisableThemeRequest) OCSAPIRequest(oCSAPIRequest string) ThemingUserThemeAPIThemingUserThemeDisableThemeRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ThemingUserThemeAPIThemingUserThemeDisableThemeRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ThemingUserThemeDisableThemeExecute(r)
}

/*
ThemingUserThemeDisableTheme Disable theme

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param themeId the theme ID
 @return ThemingUserThemeAPIThemingUserThemeDisableThemeRequest
*/
func (a *ThemingUserThemeAPIService) ThemingUserThemeDisableTheme(ctx context.Context, themeId string) ThemingUserThemeAPIThemingUserThemeDisableThemeRequest {
	return ThemingUserThemeAPIThemingUserThemeDisableThemeRequest{
		ApiService: a,
		ctx: ctx,
		themeId: themeId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ThemingUserThemeAPIService) ThemingUserThemeDisableThemeExecute(r ThemingUserThemeAPIThemingUserThemeDisableThemeRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingUserThemeAPIService.ThemingUserThemeDisableTheme")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/theming/api/v1/theme/{themeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"themeId"+"}", url.PathEscape(parameterValueToString(r.themeId, "themeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThemingUserThemeAPIThemingUserThemeEnableThemeRequest struct {
	ctx context.Context
	ApiService ThemingUserThemeAPI
	themeId string
	oCSAPIRequest *string
}

func (r ThemingUserThemeAPIThemingUserThemeEnableThemeRequest) OCSAPIRequest(oCSAPIRequest string) ThemingUserThemeAPIThemingUserThemeEnableThemeRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ThemingUserThemeAPIThemingUserThemeEnableThemeRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ThemingUserThemeEnableThemeExecute(r)
}

/*
ThemingUserThemeEnableTheme Enable theme

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param themeId the theme ID
 @return ThemingUserThemeAPIThemingUserThemeEnableThemeRequest
*/
func (a *ThemingUserThemeAPIService) ThemingUserThemeEnableTheme(ctx context.Context, themeId string) ThemingUserThemeAPIThemingUserThemeEnableThemeRequest {
	return ThemingUserThemeAPIThemingUserThemeEnableThemeRequest{
		ApiService: a,
		ctx: ctx,
		themeId: themeId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ThemingUserThemeAPIService) ThemingUserThemeEnableThemeExecute(r ThemingUserThemeAPIThemingUserThemeEnableThemeRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingUserThemeAPIService.ThemingUserThemeEnableTheme")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/theming/api/v1/theme/{themeId}/enable"
	localVarPath = strings.Replace(localVarPath, "{"+"themeId"+"}", url.PathEscape(parameterValueToString(r.themeId, "themeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest struct {
	ctx context.Context
	ApiService ThemingUserThemeAPI
	oCSAPIRequest *string
}

func (r ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest) OCSAPIRequest(oCSAPIRequest string) ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.ThemingUserThemeGetBackgroundExecute(r)
}

/*
ThemingUserThemeGetBackground Get the background image

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest
*/
func (a *ThemingUserThemeAPIService) ThemingUserThemeGetBackground(ctx context.Context) ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest {
	return ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ThemingUserThemeAPIService) ThemingUserThemeGetBackgroundExecute(r ThemingUserThemeAPIThemingUserThemeGetBackgroundRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingUserThemeAPIService.ThemingUserThemeGetBackground")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/background"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest struct {
	ctx context.Context
	ApiService ThemingUserThemeAPI
	type_ string
	oCSAPIRequest *string
	value *string
	color *string
}

func (r ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest) OCSAPIRequest(oCSAPIRequest string) ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Path of the background image
func (r ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest) Value(value string) ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest {
	r.value = &value
	return r
}

// Color for the background
func (r ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest) Color(color string) ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest {
	r.color = &color
	return r
}

func (r ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest) Execute() (*ThemingBackground, *http.Response, error) {
	return r.ApiService.ThemingUserThemeSetBackgroundExecute(r)
}

/*
ThemingUserThemeSetBackground Set the background

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_ Type of background
 @return ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest
*/
func (a *ThemingUserThemeAPIService) ThemingUserThemeSetBackground(ctx context.Context, type_ string) ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest {
	return ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return ThemingBackground
func (a *ThemingUserThemeAPIService) ThemingUserThemeSetBackgroundExecute(r ThemingUserThemeAPIThemingUserThemeSetBackgroundRequest) (*ThemingBackground, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ThemingBackground
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingUserThemeAPIService.ThemingUserThemeSetBackground")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/background/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.value != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	}
	if r.color != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color", r.color, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
