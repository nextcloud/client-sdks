/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesSharingShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesSharingShare{}

// FilesSharingShare struct for FilesSharingShare
type FilesSharingShare struct {
	Attributes NullableString `json:"attributes"`
	CanDelete bool `json:"can_delete"`
	CanEdit bool `json:"can_edit"`
	DisplaynameFileOwner string `json:"displayname_file_owner"`
	DisplaynameOwner string `json:"displayname_owner"`
	Expiration NullableString `json:"expiration"`
	FileParent int64 `json:"file_parent"`
	FileSource int64 `json:"file_source"`
	FileTarget string `json:"file_target"`
	HasPreview bool `json:"has_preview"`
	HideDownload int64 `json:"hide_download"`
	Id string `json:"id"`
	ItemMtime int64 `json:"item_mtime"`
	ItemPermissions *int64 `json:"item_permissions,omitempty"`
	ItemSize FilesSharingShareItemSize `json:"item_size"`
	ItemSource int64 `json:"item_source"`
	ItemType string `json:"item_type"`
	Label string `json:"label"`
	MailSend int64 `json:"mail_send"`
	Mimetype string `json:"mimetype"`
	Note string `json:"note"`
	Parent interface{} `json:"parent"`
	Password *string `json:"password,omitempty"`
	PasswordExpirationTime NullableString `json:"password_expiration_time,omitempty"`
	Path NullableString `json:"path"`
	Permissions int64 `json:"permissions"`
	SendPasswordByTalk *bool `json:"send_password_by_talk,omitempty"`
	ShareType int64 `json:"share_type"`
	ShareWith *string `json:"share_with,omitempty"`
	ShareWithAvatar *string `json:"share_with_avatar,omitempty"`
	ShareWithDisplayname *string `json:"share_with_displayname,omitempty"`
	ShareWithDisplaynameUnique NullableString `json:"share_with_displayname_unique,omitempty"`
	ShareWithLink *string `json:"share_with_link,omitempty"`
	Status *FilesSharingShareStatus `json:"status,omitempty"`
	Stime int64 `json:"stime"`
	Storage int64 `json:"storage"`
	StorageId string `json:"storage_id"`
	Token NullableString `json:"token"`
	UidFileOwner string `json:"uid_file_owner"`
	UidOwner string `json:"uid_owner"`
	Url *string `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilesSharingShare FilesSharingShare

// NewFilesSharingShare instantiates a new FilesSharingShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesSharingShare(attributes NullableString, canDelete bool, canEdit bool, displaynameFileOwner string, displaynameOwner string, expiration NullableString, fileParent int64, fileSource int64, fileTarget string, hasPreview bool, hideDownload int64, id string, itemMtime int64, itemSize FilesSharingShareItemSize, itemSource int64, itemType string, label string, mailSend int64, mimetype string, note string, parent interface{}, path NullableString, permissions int64, shareType int64, stime int64, storage int64, storageId string, token NullableString, uidFileOwner string, uidOwner string) *FilesSharingShare {
	this := FilesSharingShare{}
	this.Attributes = attributes
	this.CanDelete = canDelete
	this.CanEdit = canEdit
	this.DisplaynameFileOwner = displaynameFileOwner
	this.DisplaynameOwner = displaynameOwner
	this.Expiration = expiration
	this.FileParent = fileParent
	this.FileSource = fileSource
	this.FileTarget = fileTarget
	this.HasPreview = hasPreview
	this.HideDownload = hideDownload
	this.Id = id
	this.ItemMtime = itemMtime
	this.ItemSize = itemSize
	this.ItemSource = itemSource
	this.ItemType = itemType
	this.Label = label
	this.MailSend = mailSend
	this.Mimetype = mimetype
	this.Note = note
	this.Parent = parent
	this.Path = path
	this.Permissions = permissions
	this.ShareType = shareType
	this.Stime = stime
	this.Storage = storage
	this.StorageId = storageId
	this.Token = token
	this.UidFileOwner = uidFileOwner
	this.UidOwner = uidOwner
	return &this
}

// NewFilesSharingShareWithDefaults instantiates a new FilesSharingShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesSharingShareWithDefaults() *FilesSharingShare {
	this := FilesSharingShare{}
	return &this
}

// GetAttributes returns the Attributes field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilesSharingShare) GetAttributes() string {
	if o == nil || o.Attributes.Get() == nil {
		var ret string
		return ret
	}

	return *o.Attributes.Get()
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShare) GetAttributesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes.Get(), o.Attributes.IsSet()
}

// SetAttributes sets field value
func (o *FilesSharingShare) SetAttributes(v string) {
	o.Attributes.Set(&v)
}

// GetCanDelete returns the CanDelete field value
func (o *FilesSharingShare) GetCanDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanDelete
}

// GetCanDeleteOk returns a tuple with the CanDelete field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetCanDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanDelete, true
}

// SetCanDelete sets field value
func (o *FilesSharingShare) SetCanDelete(v bool) {
	o.CanDelete = v
}

// GetCanEdit returns the CanEdit field value
func (o *FilesSharingShare) GetCanEdit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanEdit
}

// GetCanEditOk returns a tuple with the CanEdit field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetCanEditOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanEdit, true
}

// SetCanEdit sets field value
func (o *FilesSharingShare) SetCanEdit(v bool) {
	o.CanEdit = v
}

// GetDisplaynameFileOwner returns the DisplaynameFileOwner field value
func (o *FilesSharingShare) GetDisplaynameFileOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplaynameFileOwner
}

// GetDisplaynameFileOwnerOk returns a tuple with the DisplaynameFileOwner field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetDisplaynameFileOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplaynameFileOwner, true
}

// SetDisplaynameFileOwner sets field value
func (o *FilesSharingShare) SetDisplaynameFileOwner(v string) {
	o.DisplaynameFileOwner = v
}

// GetDisplaynameOwner returns the DisplaynameOwner field value
func (o *FilesSharingShare) GetDisplaynameOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplaynameOwner
}

// GetDisplaynameOwnerOk returns a tuple with the DisplaynameOwner field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetDisplaynameOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplaynameOwner, true
}

// SetDisplaynameOwner sets field value
func (o *FilesSharingShare) SetDisplaynameOwner(v string) {
	o.DisplaynameOwner = v
}

// GetExpiration returns the Expiration field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilesSharingShare) GetExpiration() string {
	if o == nil || o.Expiration.Get() == nil {
		var ret string
		return ret
	}

	return *o.Expiration.Get()
}

// GetExpirationOk returns a tuple with the Expiration field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShare) GetExpirationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expiration.Get(), o.Expiration.IsSet()
}

// SetExpiration sets field value
func (o *FilesSharingShare) SetExpiration(v string) {
	o.Expiration.Set(&v)
}

// GetFileParent returns the FileParent field value
func (o *FilesSharingShare) GetFileParent() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileParent
}

// GetFileParentOk returns a tuple with the FileParent field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetFileParentOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileParent, true
}

// SetFileParent sets field value
func (o *FilesSharingShare) SetFileParent(v int64) {
	o.FileParent = v
}

// GetFileSource returns the FileSource field value
func (o *FilesSharingShare) GetFileSource() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileSource
}

// GetFileSourceOk returns a tuple with the FileSource field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetFileSourceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSource, true
}

// SetFileSource sets field value
func (o *FilesSharingShare) SetFileSource(v int64) {
	o.FileSource = v
}

// GetFileTarget returns the FileTarget field value
func (o *FilesSharingShare) GetFileTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileTarget
}

// GetFileTargetOk returns a tuple with the FileTarget field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetFileTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileTarget, true
}

// SetFileTarget sets field value
func (o *FilesSharingShare) SetFileTarget(v string) {
	o.FileTarget = v
}

// GetHasPreview returns the HasPreview field value
func (o *FilesSharingShare) GetHasPreview() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPreview
}

// GetHasPreviewOk returns a tuple with the HasPreview field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetHasPreviewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasPreview, true
}

// SetHasPreview sets field value
func (o *FilesSharingShare) SetHasPreview(v bool) {
	o.HasPreview = v
}

// GetHideDownload returns the HideDownload field value
func (o *FilesSharingShare) GetHideDownload() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.HideDownload
}

// GetHideDownloadOk returns a tuple with the HideDownload field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetHideDownloadOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HideDownload, true
}

// SetHideDownload sets field value
func (o *FilesSharingShare) SetHideDownload(v int64) {
	o.HideDownload = v
}

// GetId returns the Id field value
func (o *FilesSharingShare) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FilesSharingShare) SetId(v string) {
	o.Id = v
}

// GetItemMtime returns the ItemMtime field value
func (o *FilesSharingShare) GetItemMtime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ItemMtime
}

// GetItemMtimeOk returns a tuple with the ItemMtime field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetItemMtimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemMtime, true
}

// SetItemMtime sets field value
func (o *FilesSharingShare) SetItemMtime(v int64) {
	o.ItemMtime = v
}

// GetItemPermissions returns the ItemPermissions field value if set, zero value otherwise.
func (o *FilesSharingShare) GetItemPermissions() int64 {
	if o == nil || IsNil(o.ItemPermissions) {
		var ret int64
		return ret
	}
	return *o.ItemPermissions
}

// GetItemPermissionsOk returns a tuple with the ItemPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetItemPermissionsOk() (*int64, bool) {
	if o == nil || IsNil(o.ItemPermissions) {
		return nil, false
	}
	return o.ItemPermissions, true
}

// HasItemPermissions returns a boolean if a field has been set.
func (o *FilesSharingShare) HasItemPermissions() bool {
	if o != nil && !IsNil(o.ItemPermissions) {
		return true
	}

	return false
}

// SetItemPermissions gets a reference to the given int64 and assigns it to the ItemPermissions field.
func (o *FilesSharingShare) SetItemPermissions(v int64) {
	o.ItemPermissions = &v
}

// GetItemSize returns the ItemSize field value
func (o *FilesSharingShare) GetItemSize() FilesSharingShareItemSize {
	if o == nil {
		var ret FilesSharingShareItemSize
		return ret
	}

	return o.ItemSize
}

// GetItemSizeOk returns a tuple with the ItemSize field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetItemSizeOk() (*FilesSharingShareItemSize, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemSize, true
}

// SetItemSize sets field value
func (o *FilesSharingShare) SetItemSize(v FilesSharingShareItemSize) {
	o.ItemSize = v
}

// GetItemSource returns the ItemSource field value
func (o *FilesSharingShare) GetItemSource() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ItemSource
}

// GetItemSourceOk returns a tuple with the ItemSource field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetItemSourceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemSource, true
}

// SetItemSource sets field value
func (o *FilesSharingShare) SetItemSource(v int64) {
	o.ItemSource = v
}

// GetItemType returns the ItemType field value
func (o *FilesSharingShare) GetItemType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetItemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *FilesSharingShare) SetItemType(v string) {
	o.ItemType = v
}

// GetLabel returns the Label field value
func (o *FilesSharingShare) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *FilesSharingShare) SetLabel(v string) {
	o.Label = v
}

// GetMailSend returns the MailSend field value
func (o *FilesSharingShare) GetMailSend() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MailSend
}

// GetMailSendOk returns a tuple with the MailSend field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetMailSendOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MailSend, true
}

// SetMailSend sets field value
func (o *FilesSharingShare) SetMailSend(v int64) {
	o.MailSend = v
}

// GetMimetype returns the Mimetype field value
func (o *FilesSharingShare) GetMimetype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mimetype
}

// GetMimetypeOk returns a tuple with the Mimetype field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetMimetypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mimetype, true
}

// SetMimetype sets field value
func (o *FilesSharingShare) SetMimetype(v string) {
	o.Mimetype = v
}

// GetNote returns the Note field value
func (o *FilesSharingShare) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *FilesSharingShare) SetNote(v string) {
	o.Note = v
}

// GetParent returns the Parent field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *FilesSharingShare) GetParent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShare) GetParentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return &o.Parent, true
}

// SetParent sets field value
func (o *FilesSharingShare) SetParent(v interface{}) {
	o.Parent = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *FilesSharingShare) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *FilesSharingShare) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *FilesSharingShare) SetPassword(v string) {
	o.Password = &v
}

// GetPasswordExpirationTime returns the PasswordExpirationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesSharingShare) GetPasswordExpirationTime() string {
	if o == nil || IsNil(o.PasswordExpirationTime.Get()) {
		var ret string
		return ret
	}
	return *o.PasswordExpirationTime.Get()
}

// GetPasswordExpirationTimeOk returns a tuple with the PasswordExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShare) GetPasswordExpirationTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PasswordExpirationTime.Get(), o.PasswordExpirationTime.IsSet()
}

// HasPasswordExpirationTime returns a boolean if a field has been set.
func (o *FilesSharingShare) HasPasswordExpirationTime() bool {
	if o != nil && o.PasswordExpirationTime.IsSet() {
		return true
	}

	return false
}

// SetPasswordExpirationTime gets a reference to the given NullableString and assigns it to the PasswordExpirationTime field.
func (o *FilesSharingShare) SetPasswordExpirationTime(v string) {
	o.PasswordExpirationTime.Set(&v)
}
// SetPasswordExpirationTimeNil sets the value for PasswordExpirationTime to be an explicit nil
func (o *FilesSharingShare) SetPasswordExpirationTimeNil() {
	o.PasswordExpirationTime.Set(nil)
}

// UnsetPasswordExpirationTime ensures that no value is present for PasswordExpirationTime, not even an explicit nil
func (o *FilesSharingShare) UnsetPasswordExpirationTime() {
	o.PasswordExpirationTime.Unset()
}

// GetPath returns the Path field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilesSharingShare) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}

	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShare) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// SetPath sets field value
func (o *FilesSharingShare) SetPath(v string) {
	o.Path.Set(&v)
}

// GetPermissions returns the Permissions field value
func (o *FilesSharingShare) GetPermissions() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetPermissionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *FilesSharingShare) SetPermissions(v int64) {
	o.Permissions = v
}

// GetSendPasswordByTalk returns the SendPasswordByTalk field value if set, zero value otherwise.
func (o *FilesSharingShare) GetSendPasswordByTalk() bool {
	if o == nil || IsNil(o.SendPasswordByTalk) {
		var ret bool
		return ret
	}
	return *o.SendPasswordByTalk
}

// GetSendPasswordByTalkOk returns a tuple with the SendPasswordByTalk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetSendPasswordByTalkOk() (*bool, bool) {
	if o == nil || IsNil(o.SendPasswordByTalk) {
		return nil, false
	}
	return o.SendPasswordByTalk, true
}

// HasSendPasswordByTalk returns a boolean if a field has been set.
func (o *FilesSharingShare) HasSendPasswordByTalk() bool {
	if o != nil && !IsNil(o.SendPasswordByTalk) {
		return true
	}

	return false
}

// SetSendPasswordByTalk gets a reference to the given bool and assigns it to the SendPasswordByTalk field.
func (o *FilesSharingShare) SetSendPasswordByTalk(v bool) {
	o.SendPasswordByTalk = &v
}

// GetShareType returns the ShareType field value
func (o *FilesSharingShare) GetShareType() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ShareType
}

// GetShareTypeOk returns a tuple with the ShareType field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetShareTypeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareType, true
}

// SetShareType sets field value
func (o *FilesSharingShare) SetShareType(v int64) {
	o.ShareType = v
}

// GetShareWith returns the ShareWith field value if set, zero value otherwise.
func (o *FilesSharingShare) GetShareWith() string {
	if o == nil || IsNil(o.ShareWith) {
		var ret string
		return ret
	}
	return *o.ShareWith
}

// GetShareWithOk returns a tuple with the ShareWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetShareWithOk() (*string, bool) {
	if o == nil || IsNil(o.ShareWith) {
		return nil, false
	}
	return o.ShareWith, true
}

// HasShareWith returns a boolean if a field has been set.
func (o *FilesSharingShare) HasShareWith() bool {
	if o != nil && !IsNil(o.ShareWith) {
		return true
	}

	return false
}

// SetShareWith gets a reference to the given string and assigns it to the ShareWith field.
func (o *FilesSharingShare) SetShareWith(v string) {
	o.ShareWith = &v
}

// GetShareWithAvatar returns the ShareWithAvatar field value if set, zero value otherwise.
func (o *FilesSharingShare) GetShareWithAvatar() string {
	if o == nil || IsNil(o.ShareWithAvatar) {
		var ret string
		return ret
	}
	return *o.ShareWithAvatar
}

// GetShareWithAvatarOk returns a tuple with the ShareWithAvatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetShareWithAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.ShareWithAvatar) {
		return nil, false
	}
	return o.ShareWithAvatar, true
}

// HasShareWithAvatar returns a boolean if a field has been set.
func (o *FilesSharingShare) HasShareWithAvatar() bool {
	if o != nil && !IsNil(o.ShareWithAvatar) {
		return true
	}

	return false
}

// SetShareWithAvatar gets a reference to the given string and assigns it to the ShareWithAvatar field.
func (o *FilesSharingShare) SetShareWithAvatar(v string) {
	o.ShareWithAvatar = &v
}

// GetShareWithDisplayname returns the ShareWithDisplayname field value if set, zero value otherwise.
func (o *FilesSharingShare) GetShareWithDisplayname() string {
	if o == nil || IsNil(o.ShareWithDisplayname) {
		var ret string
		return ret
	}
	return *o.ShareWithDisplayname
}

// GetShareWithDisplaynameOk returns a tuple with the ShareWithDisplayname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetShareWithDisplaynameOk() (*string, bool) {
	if o == nil || IsNil(o.ShareWithDisplayname) {
		return nil, false
	}
	return o.ShareWithDisplayname, true
}

// HasShareWithDisplayname returns a boolean if a field has been set.
func (o *FilesSharingShare) HasShareWithDisplayname() bool {
	if o != nil && !IsNil(o.ShareWithDisplayname) {
		return true
	}

	return false
}

// SetShareWithDisplayname gets a reference to the given string and assigns it to the ShareWithDisplayname field.
func (o *FilesSharingShare) SetShareWithDisplayname(v string) {
	o.ShareWithDisplayname = &v
}

// GetShareWithDisplaynameUnique returns the ShareWithDisplaynameUnique field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesSharingShare) GetShareWithDisplaynameUnique() string {
	if o == nil || IsNil(o.ShareWithDisplaynameUnique.Get()) {
		var ret string
		return ret
	}
	return *o.ShareWithDisplaynameUnique.Get()
}

// GetShareWithDisplaynameUniqueOk returns a tuple with the ShareWithDisplaynameUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShare) GetShareWithDisplaynameUniqueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShareWithDisplaynameUnique.Get(), o.ShareWithDisplaynameUnique.IsSet()
}

// HasShareWithDisplaynameUnique returns a boolean if a field has been set.
func (o *FilesSharingShare) HasShareWithDisplaynameUnique() bool {
	if o != nil && o.ShareWithDisplaynameUnique.IsSet() {
		return true
	}

	return false
}

// SetShareWithDisplaynameUnique gets a reference to the given NullableString and assigns it to the ShareWithDisplaynameUnique field.
func (o *FilesSharingShare) SetShareWithDisplaynameUnique(v string) {
	o.ShareWithDisplaynameUnique.Set(&v)
}
// SetShareWithDisplaynameUniqueNil sets the value for ShareWithDisplaynameUnique to be an explicit nil
func (o *FilesSharingShare) SetShareWithDisplaynameUniqueNil() {
	o.ShareWithDisplaynameUnique.Set(nil)
}

// UnsetShareWithDisplaynameUnique ensures that no value is present for ShareWithDisplaynameUnique, not even an explicit nil
func (o *FilesSharingShare) UnsetShareWithDisplaynameUnique() {
	o.ShareWithDisplaynameUnique.Unset()
}

// GetShareWithLink returns the ShareWithLink field value if set, zero value otherwise.
func (o *FilesSharingShare) GetShareWithLink() string {
	if o == nil || IsNil(o.ShareWithLink) {
		var ret string
		return ret
	}
	return *o.ShareWithLink
}

// GetShareWithLinkOk returns a tuple with the ShareWithLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetShareWithLinkOk() (*string, bool) {
	if o == nil || IsNil(o.ShareWithLink) {
		return nil, false
	}
	return o.ShareWithLink, true
}

// HasShareWithLink returns a boolean if a field has been set.
func (o *FilesSharingShare) HasShareWithLink() bool {
	if o != nil && !IsNil(o.ShareWithLink) {
		return true
	}

	return false
}

// SetShareWithLink gets a reference to the given string and assigns it to the ShareWithLink field.
func (o *FilesSharingShare) SetShareWithLink(v string) {
	o.ShareWithLink = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FilesSharingShare) GetStatus() FilesSharingShareStatus {
	if o == nil || IsNil(o.Status) {
		var ret FilesSharingShareStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetStatusOk() (*FilesSharingShareStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FilesSharingShare) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given FilesSharingShareStatus and assigns it to the Status field.
func (o *FilesSharingShare) SetStatus(v FilesSharingShareStatus) {
	o.Status = &v
}

// GetStime returns the Stime field value
func (o *FilesSharingShare) GetStime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Stime
}

// GetStimeOk returns a tuple with the Stime field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetStimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stime, true
}

// SetStime sets field value
func (o *FilesSharingShare) SetStime(v int64) {
	o.Stime = v
}

// GetStorage returns the Storage field value
func (o *FilesSharingShare) GetStorage() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetStorageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *FilesSharingShare) SetStorage(v int64) {
	o.Storage = v
}

// GetStorageId returns the StorageId field value
func (o *FilesSharingShare) GetStorageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetStorageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *FilesSharingShare) SetStorageId(v string) {
	o.StorageId = v
}

// GetToken returns the Token field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilesSharingShare) GetToken() string {
	if o == nil || o.Token.Get() == nil {
		var ret string
		return ret
	}

	return *o.Token.Get()
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShare) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Token.Get(), o.Token.IsSet()
}

// SetToken sets field value
func (o *FilesSharingShare) SetToken(v string) {
	o.Token.Set(&v)
}

// GetUidFileOwner returns the UidFileOwner field value
func (o *FilesSharingShare) GetUidFileOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UidFileOwner
}

// GetUidFileOwnerOk returns a tuple with the UidFileOwner field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetUidFileOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UidFileOwner, true
}

// SetUidFileOwner sets field value
func (o *FilesSharingShare) SetUidFileOwner(v string) {
	o.UidFileOwner = v
}

// GetUidOwner returns the UidOwner field value
func (o *FilesSharingShare) GetUidOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UidOwner
}

// GetUidOwnerOk returns a tuple with the UidOwner field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetUidOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UidOwner, true
}

// SetUidOwner sets field value
func (o *FilesSharingShare) SetUidOwner(v string) {
	o.UidOwner = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FilesSharingShare) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShare) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FilesSharingShare) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FilesSharingShare) SetUrl(v string) {
	o.Url = &v
}

func (o FilesSharingShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesSharingShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attributes"] = o.Attributes.Get()
	toSerialize["can_delete"] = o.CanDelete
	toSerialize["can_edit"] = o.CanEdit
	toSerialize["displayname_file_owner"] = o.DisplaynameFileOwner
	toSerialize["displayname_owner"] = o.DisplaynameOwner
	toSerialize["expiration"] = o.Expiration.Get()
	toSerialize["file_parent"] = o.FileParent
	toSerialize["file_source"] = o.FileSource
	toSerialize["file_target"] = o.FileTarget
	toSerialize["has_preview"] = o.HasPreview
	toSerialize["hide_download"] = o.HideDownload
	toSerialize["id"] = o.Id
	toSerialize["item_mtime"] = o.ItemMtime
	if !IsNil(o.ItemPermissions) {
		toSerialize["item_permissions"] = o.ItemPermissions
	}
	toSerialize["item_size"] = o.ItemSize
	toSerialize["item_source"] = o.ItemSource
	toSerialize["item_type"] = o.ItemType
	toSerialize["label"] = o.Label
	toSerialize["mail_send"] = o.MailSend
	toSerialize["mimetype"] = o.Mimetype
	toSerialize["note"] = o.Note
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if o.PasswordExpirationTime.IsSet() {
		toSerialize["password_expiration_time"] = o.PasswordExpirationTime.Get()
	}
	toSerialize["path"] = o.Path.Get()
	toSerialize["permissions"] = o.Permissions
	if !IsNil(o.SendPasswordByTalk) {
		toSerialize["send_password_by_talk"] = o.SendPasswordByTalk
	}
	toSerialize["share_type"] = o.ShareType
	if !IsNil(o.ShareWith) {
		toSerialize["share_with"] = o.ShareWith
	}
	if !IsNil(o.ShareWithAvatar) {
		toSerialize["share_with_avatar"] = o.ShareWithAvatar
	}
	if !IsNil(o.ShareWithDisplayname) {
		toSerialize["share_with_displayname"] = o.ShareWithDisplayname
	}
	if o.ShareWithDisplaynameUnique.IsSet() {
		toSerialize["share_with_displayname_unique"] = o.ShareWithDisplaynameUnique.Get()
	}
	if !IsNil(o.ShareWithLink) {
		toSerialize["share_with_link"] = o.ShareWithLink
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["stime"] = o.Stime
	toSerialize["storage"] = o.Storage
	toSerialize["storage_id"] = o.StorageId
	toSerialize["token"] = o.Token.Get()
	toSerialize["uid_file_owner"] = o.UidFileOwner
	toSerialize["uid_owner"] = o.UidOwner
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesSharingShare) UnmarshalJSON(bytes []byte) (err error) {
	varFilesSharingShare := _FilesSharingShare{}

	if err = json.Unmarshal(bytes, &varFilesSharingShare); err == nil {
		*o = FilesSharingShare(varFilesSharingShare)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "can_delete")
		delete(additionalProperties, "can_edit")
		delete(additionalProperties, "displayname_file_owner")
		delete(additionalProperties, "displayname_owner")
		delete(additionalProperties, "expiration")
		delete(additionalProperties, "file_parent")
		delete(additionalProperties, "file_source")
		delete(additionalProperties, "file_target")
		delete(additionalProperties, "has_preview")
		delete(additionalProperties, "hide_download")
		delete(additionalProperties, "id")
		delete(additionalProperties, "item_mtime")
		delete(additionalProperties, "item_permissions")
		delete(additionalProperties, "item_size")
		delete(additionalProperties, "item_source")
		delete(additionalProperties, "item_type")
		delete(additionalProperties, "label")
		delete(additionalProperties, "mail_send")
		delete(additionalProperties, "mimetype")
		delete(additionalProperties, "note")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "password")
		delete(additionalProperties, "password_expiration_time")
		delete(additionalProperties, "path")
		delete(additionalProperties, "permissions")
		delete(additionalProperties, "send_password_by_talk")
		delete(additionalProperties, "share_type")
		delete(additionalProperties, "share_with")
		delete(additionalProperties, "share_with_avatar")
		delete(additionalProperties, "share_with_displayname")
		delete(additionalProperties, "share_with_displayname_unique")
		delete(additionalProperties, "share_with_link")
		delete(additionalProperties, "status")
		delete(additionalProperties, "stime")
		delete(additionalProperties, "storage")
		delete(additionalProperties, "storage_id")
		delete(additionalProperties, "token")
		delete(additionalProperties, "uid_file_owner")
		delete(additionalProperties, "uid_owner")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesSharingShare struct {
	value *FilesSharingShare
	isSet bool
}

func (v NullableFilesSharingShare) Get() *FilesSharingShare {
	return v.value
}

func (v *NullableFilesSharingShare) Set(val *FilesSharingShare) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingShare) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingShare(val *FilesSharingShare) *NullableFilesSharingShare {
	return &NullableFilesSharingShare{value: val, isSet: true}
}

func (v NullableFilesSharingShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


