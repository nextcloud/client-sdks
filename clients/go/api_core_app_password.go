/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type CoreAppPasswordAPI interface {

	/*
	CoreAppPasswordDeleteAppPassword Delete app password

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest
	*/
	CoreAppPasswordDeleteAppPassword(ctx context.Context) CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest

	// CoreAppPasswordDeleteAppPasswordExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	CoreAppPasswordDeleteAppPasswordExecute(r CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	CoreAppPasswordGetAppPassword Create app password

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest
	*/
	CoreAppPasswordGetAppPassword(ctx context.Context) CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest

	// CoreAppPasswordGetAppPasswordExecute executes the request
	//  @return CoreAppPasswordGetAppPassword200Response
	CoreAppPasswordGetAppPasswordExecute(r CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest) (*CoreAppPasswordGetAppPassword200Response, *http.Response, error)

	/*
	CoreAppPasswordRotateAppPassword Rotate app password

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest
	*/
	CoreAppPasswordRotateAppPassword(ctx context.Context) CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest

	// CoreAppPasswordRotateAppPasswordExecute executes the request
	//  @return CoreAppPasswordGetAppPassword200Response
	CoreAppPasswordRotateAppPasswordExecute(r CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest) (*CoreAppPasswordGetAppPassword200Response, *http.Response, error)
}

// CoreAppPasswordAPIService CoreAppPasswordAPI service
type CoreAppPasswordAPIService service

type CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest struct {
	ctx context.Context
	ApiService CoreAppPasswordAPI
	oCSAPIRequest *string
}

func (r CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest) OCSAPIRequest(oCSAPIRequest string) CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.CoreAppPasswordDeleteAppPasswordExecute(r)
}

/*
CoreAppPasswordDeleteAppPassword Delete app password

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest
*/
func (a *CoreAppPasswordAPIService) CoreAppPasswordDeleteAppPassword(ctx context.Context) CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest {
	return CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *CoreAppPasswordAPIService) CoreAppPasswordDeleteAppPasswordExecute(r CoreAppPasswordAPICoreAppPasswordDeleteAppPasswordRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAppPasswordAPIService.CoreAppPasswordDeleteAppPassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/core/apppassword"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest struct {
	ctx context.Context
	ApiService CoreAppPasswordAPI
	oCSAPIRequest *string
}

func (r CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest) OCSAPIRequest(oCSAPIRequest string) CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest) Execute() (*CoreAppPasswordGetAppPassword200Response, *http.Response, error) {
	return r.ApiService.CoreAppPasswordGetAppPasswordExecute(r)
}

/*
CoreAppPasswordGetAppPassword Create app password

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest
*/
func (a *CoreAppPasswordAPIService) CoreAppPasswordGetAppPassword(ctx context.Context) CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest {
	return CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreAppPasswordGetAppPassword200Response
func (a *CoreAppPasswordAPIService) CoreAppPasswordGetAppPasswordExecute(r CoreAppPasswordAPICoreAppPasswordGetAppPasswordRequest) (*CoreAppPasswordGetAppPassword200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreAppPasswordGetAppPassword200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAppPasswordAPIService.CoreAppPasswordGetAppPassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/core/getapppassword"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest struct {
	ctx context.Context
	ApiService CoreAppPasswordAPI
	oCSAPIRequest *string
}

func (r CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest) OCSAPIRequest(oCSAPIRequest string) CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest) Execute() (*CoreAppPasswordGetAppPassword200Response, *http.Response, error) {
	return r.ApiService.CoreAppPasswordRotateAppPasswordExecute(r)
}

/*
CoreAppPasswordRotateAppPassword Rotate app password

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest
*/
func (a *CoreAppPasswordAPIService) CoreAppPasswordRotateAppPassword(ctx context.Context) CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest {
	return CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreAppPasswordGetAppPassword200Response
func (a *CoreAppPasswordAPIService) CoreAppPasswordRotateAppPasswordExecute(r CoreAppPasswordAPICoreAppPasswordRotateAppPasswordRequest) (*CoreAppPasswordGetAppPassword200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreAppPasswordGetAppPassword200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAppPasswordAPIService.CoreAppPasswordRotateAppPassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/core/apppassword/rotate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
