/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type FilesSharingShareesapiAPI interface {

	/*
	FilesSharingShareesapiFindRecommended Find recommended sharees

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest
	*/
	FilesSharingShareesapiFindRecommended(ctx context.Context) FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest

	// FilesSharingShareesapiFindRecommendedExecute executes the request
	//  @return FilesSharingShareesapiFindRecommended200Response
	FilesSharingShareesapiFindRecommendedExecute(r FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest) (*FilesSharingShareesapiFindRecommended200Response, *http.Response, error)

	/*
	FilesSharingShareesapiSearch Search for sharees

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest
	*/
	FilesSharingShareesapiSearch(ctx context.Context) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest

	// FilesSharingShareesapiSearchExecute executes the request
	//  @return FilesSharingShareesapiSearch200Response
	FilesSharingShareesapiSearchExecute(r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) (*FilesSharingShareesapiSearch200Response, *http.Response, error)
}

// FilesSharingShareesapiAPIService FilesSharingShareesapiAPI service
type FilesSharingShareesapiAPIService service

type FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest struct {
	ctx context.Context
	ApiService FilesSharingShareesapiAPI
	itemType *string
	oCSAPIRequest *string
	shareType *string
}

// Limit to specific item types
func (r FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest) ItemType(itemType string) FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest {
	r.itemType = &itemType
	return r
}

func (r FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest) OCSAPIRequest(oCSAPIRequest string) FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Limit to specific share types
func (r FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest) ShareType(shareType string) FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest {
	r.shareType = &shareType
	return r
}

func (r FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest) Execute() (*FilesSharingShareesapiFindRecommended200Response, *http.Response, error) {
	return r.ApiService.FilesSharingShareesapiFindRecommendedExecute(r)
}

/*
FilesSharingShareesapiFindRecommended Find recommended sharees

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest
*/
func (a *FilesSharingShareesapiAPIService) FilesSharingShareesapiFindRecommended(ctx context.Context) FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest {
	return FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesSharingShareesapiFindRecommended200Response
func (a *FilesSharingShareesapiAPIService) FilesSharingShareesapiFindRecommendedExecute(r FilesSharingShareesapiAPIFilesSharingShareesapiFindRecommendedRequest) (*FilesSharingShareesapiFindRecommended200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesSharingShareesapiFindRecommended200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesSharingShareesapiAPIService.FilesSharingShareesapiFindRecommended")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files_sharing/api/v1/sharees_recommended"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.itemType == nil {
		return localVarReturnValue, nil, reportError("itemType is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "itemType", r.itemType, "")
	if r.shareType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shareType", r.shareType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest struct {
	ctx context.Context
	ApiService FilesSharingShareesapiAPI
	oCSAPIRequest *string
	search *string
	itemType *string
	page *int64
	perPage *int64
	shareType *string
	lookup *int32
}

func (r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) OCSAPIRequest(oCSAPIRequest string) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) Search(search string) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest {
	r.search = &search
	return r
}

// Limit to specific item types
func (r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) ItemType(itemType string) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest {
	r.itemType = &itemType
	return r
}

// Page offset for searching
func (r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) Page(page int64) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest {
	r.page = &page
	return r
}

// Limit amount of search results per page
func (r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) PerPage(perPage int64) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest {
	r.perPage = &perPage
	return r
}

// Limit to specific share types
func (r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) ShareType(shareType string) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest {
	r.shareType = &shareType
	return r
}

// If a global lookup should be performed too
func (r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) Lookup(lookup int32) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest {
	r.lookup = &lookup
	return r
}

func (r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) Execute() (*FilesSharingShareesapiSearch200Response, *http.Response, error) {
	return r.ApiService.FilesSharingShareesapiSearchExecute(r)
}

/*
FilesSharingShareesapiSearch Search for sharees

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest
*/
func (a *FilesSharingShareesapiAPIService) FilesSharingShareesapiSearch(ctx context.Context) FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest {
	return FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesSharingShareesapiSearch200Response
func (a *FilesSharingShareesapiAPIService) FilesSharingShareesapiSearchExecute(r FilesSharingShareesapiAPIFilesSharingShareesapiSearchRequest) (*FilesSharingShareesapiSearch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesSharingShareesapiSearch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesSharingShareesapiAPIService.FilesSharingShareesapiSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files_sharing/api/v1/sharees"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.itemType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemType", r.itemType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "perPage", r.perPage, "")
	}
	if r.shareType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shareType", r.shareType, "")
	}
	if r.lookup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lookup", r.lookup, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
