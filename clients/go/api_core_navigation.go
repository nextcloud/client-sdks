/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type CoreNavigationAPI interface {

	/*
	CoreNavigationGetAppsNavigation Get the apps navigation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreNavigationAPICoreNavigationGetAppsNavigationRequest
	*/
	CoreNavigationGetAppsNavigation(ctx context.Context) CoreNavigationAPICoreNavigationGetAppsNavigationRequest

	// CoreNavigationGetAppsNavigationExecute executes the request
	//  @return CoreNavigationGetAppsNavigation200Response
	CoreNavigationGetAppsNavigationExecute(r CoreNavigationAPICoreNavigationGetAppsNavigationRequest) (*CoreNavigationGetAppsNavigation200Response, *http.Response, error)

	/*
	CoreNavigationGetSettingsNavigation Get the settings navigation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreNavigationAPICoreNavigationGetSettingsNavigationRequest
	*/
	CoreNavigationGetSettingsNavigation(ctx context.Context) CoreNavigationAPICoreNavigationGetSettingsNavigationRequest

	// CoreNavigationGetSettingsNavigationExecute executes the request
	//  @return CoreNavigationGetAppsNavigation200Response
	CoreNavigationGetSettingsNavigationExecute(r CoreNavigationAPICoreNavigationGetSettingsNavigationRequest) (*CoreNavigationGetAppsNavigation200Response, *http.Response, error)
}

// CoreNavigationAPIService CoreNavigationAPI service
type CoreNavigationAPIService service

type CoreNavigationAPICoreNavigationGetAppsNavigationRequest struct {
	ctx context.Context
	ApiService CoreNavigationAPI
	oCSAPIRequest *string
	absolute *int32
}

func (r CoreNavigationAPICoreNavigationGetAppsNavigationRequest) OCSAPIRequest(oCSAPIRequest string) CoreNavigationAPICoreNavigationGetAppsNavigationRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Rewrite URLs to absolute ones
func (r CoreNavigationAPICoreNavigationGetAppsNavigationRequest) Absolute(absolute int32) CoreNavigationAPICoreNavigationGetAppsNavigationRequest {
	r.absolute = &absolute
	return r
}

func (r CoreNavigationAPICoreNavigationGetAppsNavigationRequest) Execute() (*CoreNavigationGetAppsNavigation200Response, *http.Response, error) {
	return r.ApiService.CoreNavigationGetAppsNavigationExecute(r)
}

/*
CoreNavigationGetAppsNavigation Get the apps navigation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreNavigationAPICoreNavigationGetAppsNavigationRequest
*/
func (a *CoreNavigationAPIService) CoreNavigationGetAppsNavigation(ctx context.Context) CoreNavigationAPICoreNavigationGetAppsNavigationRequest {
	return CoreNavigationAPICoreNavigationGetAppsNavigationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreNavigationGetAppsNavigation200Response
func (a *CoreNavigationAPIService) CoreNavigationGetAppsNavigationExecute(r CoreNavigationAPICoreNavigationGetAppsNavigationRequest) (*CoreNavigationGetAppsNavigation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreNavigationGetAppsNavigation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreNavigationAPIService.CoreNavigationGetAppsNavigation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/core/navigation/apps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.absolute != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absolute", r.absolute, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreNavigationAPICoreNavigationGetSettingsNavigationRequest struct {
	ctx context.Context
	ApiService CoreNavigationAPI
	oCSAPIRequest *string
	absolute *int32
}

func (r CoreNavigationAPICoreNavigationGetSettingsNavigationRequest) OCSAPIRequest(oCSAPIRequest string) CoreNavigationAPICoreNavigationGetSettingsNavigationRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Rewrite URLs to absolute ones
func (r CoreNavigationAPICoreNavigationGetSettingsNavigationRequest) Absolute(absolute int32) CoreNavigationAPICoreNavigationGetSettingsNavigationRequest {
	r.absolute = &absolute
	return r
}

func (r CoreNavigationAPICoreNavigationGetSettingsNavigationRequest) Execute() (*CoreNavigationGetAppsNavigation200Response, *http.Response, error) {
	return r.ApiService.CoreNavigationGetSettingsNavigationExecute(r)
}

/*
CoreNavigationGetSettingsNavigation Get the settings navigation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreNavigationAPICoreNavigationGetSettingsNavigationRequest
*/
func (a *CoreNavigationAPIService) CoreNavigationGetSettingsNavigation(ctx context.Context) CoreNavigationAPICoreNavigationGetSettingsNavigationRequest {
	return CoreNavigationAPICoreNavigationGetSettingsNavigationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreNavigationGetAppsNavigation200Response
func (a *CoreNavigationAPIService) CoreNavigationGetSettingsNavigationExecute(r CoreNavigationAPICoreNavigationGetSettingsNavigationRequest) (*CoreNavigationGetAppsNavigation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreNavigationGetAppsNavigation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreNavigationAPIService.CoreNavigationGetSettingsNavigation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/core/navigation/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.absolute != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "absolute", r.absolute, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
