/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type FilesRemindersApiAPI interface {

	/*
	FilesRemindersApiGet Get a reminder

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param version
	@param fileId ID of the file
	@return FilesRemindersApiAPIFilesRemindersApiGetRequest
	*/
	FilesRemindersApiGet(ctx context.Context, version string, fileId int64) FilesRemindersApiAPIFilesRemindersApiGetRequest

	// FilesRemindersApiGetExecute executes the request
	//  @return FilesRemindersApiGet200Response
	FilesRemindersApiGetExecute(r FilesRemindersApiAPIFilesRemindersApiGetRequest) (*FilesRemindersApiGet200Response, *http.Response, error)

	/*
	FilesRemindersApiRemove Remove a reminder

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param version
	@param fileId ID of the file
	@return FilesRemindersApiAPIFilesRemindersApiRemoveRequest
	*/
	FilesRemindersApiRemove(ctx context.Context, version string, fileId int64) FilesRemindersApiAPIFilesRemindersApiRemoveRequest

	// FilesRemindersApiRemoveExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	FilesRemindersApiRemoveExecute(r FilesRemindersApiAPIFilesRemindersApiRemoveRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	FilesRemindersApiSet Set a reminder

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param version
	@param fileId ID of the file
	@return FilesRemindersApiAPIFilesRemindersApiSetRequest
	*/
	FilesRemindersApiSet(ctx context.Context, version string, fileId int64) FilesRemindersApiAPIFilesRemindersApiSetRequest

	// FilesRemindersApiSetExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	FilesRemindersApiSetExecute(r FilesRemindersApiAPIFilesRemindersApiSetRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)
}

// FilesRemindersApiAPIService FilesRemindersApiAPI service
type FilesRemindersApiAPIService service

type FilesRemindersApiAPIFilesRemindersApiGetRequest struct {
	ctx context.Context
	ApiService FilesRemindersApiAPI
	version string
	fileId int64
	oCSAPIRequest *string
}

func (r FilesRemindersApiAPIFilesRemindersApiGetRequest) OCSAPIRequest(oCSAPIRequest string) FilesRemindersApiAPIFilesRemindersApiGetRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r FilesRemindersApiAPIFilesRemindersApiGetRequest) Execute() (*FilesRemindersApiGet200Response, *http.Response, error) {
	return r.ApiService.FilesRemindersApiGetExecute(r)
}

/*
FilesRemindersApiGet Get a reminder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param version
 @param fileId ID of the file
 @return FilesRemindersApiAPIFilesRemindersApiGetRequest
*/
func (a *FilesRemindersApiAPIService) FilesRemindersApiGet(ctx context.Context, version string, fileId int64) FilesRemindersApiAPIFilesRemindersApiGetRequest {
	return FilesRemindersApiAPIFilesRemindersApiGetRequest{
		ApiService: a,
		ctx: ctx,
		version: version,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return FilesRemindersApiGet200Response
func (a *FilesRemindersApiAPIService) FilesRemindersApiGetExecute(r FilesRemindersApiAPIFilesRemindersApiGetRequest) (*FilesRemindersApiGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesRemindersApiGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemindersApiAPIService.FilesRemindersApiGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files_reminders/api/v{version}/{fileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fileId"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesRemindersApiAPIFilesRemindersApiRemoveRequest struct {
	ctx context.Context
	ApiService FilesRemindersApiAPI
	version string
	fileId int64
	oCSAPIRequest *string
}

func (r FilesRemindersApiAPIFilesRemindersApiRemoveRequest) OCSAPIRequest(oCSAPIRequest string) FilesRemindersApiAPIFilesRemindersApiRemoveRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r FilesRemindersApiAPIFilesRemindersApiRemoveRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.FilesRemindersApiRemoveExecute(r)
}

/*
FilesRemindersApiRemove Remove a reminder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param version
 @param fileId ID of the file
 @return FilesRemindersApiAPIFilesRemindersApiRemoveRequest
*/
func (a *FilesRemindersApiAPIService) FilesRemindersApiRemove(ctx context.Context, version string, fileId int64) FilesRemindersApiAPIFilesRemindersApiRemoveRequest {
	return FilesRemindersApiAPIFilesRemindersApiRemoveRequest{
		ApiService: a,
		ctx: ctx,
		version: version,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *FilesRemindersApiAPIService) FilesRemindersApiRemoveExecute(r FilesRemindersApiAPIFilesRemindersApiRemoveRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemindersApiAPIService.FilesRemindersApiRemove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files_reminders/api/v{version}/{fileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fileId"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesRemindersApiAPIFilesRemindersApiSetRequest struct {
	ctx context.Context
	ApiService FilesRemindersApiAPI
	dueDate *string
	version string
	fileId int64
	oCSAPIRequest *string
}

// ISO 8601 formatted date time string
func (r FilesRemindersApiAPIFilesRemindersApiSetRequest) DueDate(dueDate string) FilesRemindersApiAPIFilesRemindersApiSetRequest {
	r.dueDate = &dueDate
	return r
}

func (r FilesRemindersApiAPIFilesRemindersApiSetRequest) OCSAPIRequest(oCSAPIRequest string) FilesRemindersApiAPIFilesRemindersApiSetRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r FilesRemindersApiAPIFilesRemindersApiSetRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.FilesRemindersApiSetExecute(r)
}

/*
FilesRemindersApiSet Set a reminder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param version
 @param fileId ID of the file
 @return FilesRemindersApiAPIFilesRemindersApiSetRequest
*/
func (a *FilesRemindersApiAPIService) FilesRemindersApiSet(ctx context.Context, version string, fileId int64) FilesRemindersApiAPIFilesRemindersApiSetRequest {
	return FilesRemindersApiAPIFilesRemindersApiSetRequest{
		ApiService: a,
		ctx: ctx,
		version: version,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *FilesRemindersApiAPIService) FilesRemindersApiSetExecute(r FilesRemindersApiAPIFilesRemindersApiSetRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemindersApiAPIService.FilesRemindersApiSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files_reminders/api/v{version}/{fileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fileId"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dueDate == nil {
		return localVarReturnValue, nil, reportError("dueDate is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "dueDate", r.dueDate, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
