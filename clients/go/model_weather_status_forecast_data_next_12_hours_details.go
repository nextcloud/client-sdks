/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the WeatherStatusForecastDataNext12HoursDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WeatherStatusForecastDataNext12HoursDetails{}

// WeatherStatusForecastDataNext12HoursDetails struct for WeatherStatusForecastDataNext12HoursDetails
type WeatherStatusForecastDataNext12HoursDetails struct {
	ProbabilityOfPrecipitation float32 `json:"probability_of_precipitation"`
	AdditionalProperties map[string]interface{}
}

type _WeatherStatusForecastDataNext12HoursDetails WeatherStatusForecastDataNext12HoursDetails

// NewWeatherStatusForecastDataNext12HoursDetails instantiates a new WeatherStatusForecastDataNext12HoursDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeatherStatusForecastDataNext12HoursDetails(probabilityOfPrecipitation float32) *WeatherStatusForecastDataNext12HoursDetails {
	this := WeatherStatusForecastDataNext12HoursDetails{}
	this.ProbabilityOfPrecipitation = probabilityOfPrecipitation
	return &this
}

// NewWeatherStatusForecastDataNext12HoursDetailsWithDefaults instantiates a new WeatherStatusForecastDataNext12HoursDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeatherStatusForecastDataNext12HoursDetailsWithDefaults() *WeatherStatusForecastDataNext12HoursDetails {
	this := WeatherStatusForecastDataNext12HoursDetails{}
	return &this
}

// GetProbabilityOfPrecipitation returns the ProbabilityOfPrecipitation field value
func (o *WeatherStatusForecastDataNext12HoursDetails) GetProbabilityOfPrecipitation() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProbabilityOfPrecipitation
}

// GetProbabilityOfPrecipitationOk returns a tuple with the ProbabilityOfPrecipitation field value
// and a boolean to check if the value has been set.
func (o *WeatherStatusForecastDataNext12HoursDetails) GetProbabilityOfPrecipitationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProbabilityOfPrecipitation, true
}

// SetProbabilityOfPrecipitation sets field value
func (o *WeatherStatusForecastDataNext12HoursDetails) SetProbabilityOfPrecipitation(v float32) {
	o.ProbabilityOfPrecipitation = v
}

func (o WeatherStatusForecastDataNext12HoursDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WeatherStatusForecastDataNext12HoursDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["probability_of_precipitation"] = o.ProbabilityOfPrecipitation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WeatherStatusForecastDataNext12HoursDetails) UnmarshalJSON(bytes []byte) (err error) {
	varWeatherStatusForecastDataNext12HoursDetails := _WeatherStatusForecastDataNext12HoursDetails{}

	if err = json.Unmarshal(bytes, &varWeatherStatusForecastDataNext12HoursDetails); err == nil {
		*o = WeatherStatusForecastDataNext12HoursDetails(varWeatherStatusForecastDataNext12HoursDetails)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "probability_of_precipitation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWeatherStatusForecastDataNext12HoursDetails struct {
	value *WeatherStatusForecastDataNext12HoursDetails
	isSet bool
}

func (v NullableWeatherStatusForecastDataNext12HoursDetails) Get() *WeatherStatusForecastDataNext12HoursDetails {
	return v.value
}

func (v *NullableWeatherStatusForecastDataNext12HoursDetails) Set(val *WeatherStatusForecastDataNext12HoursDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableWeatherStatusForecastDataNext12HoursDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableWeatherStatusForecastDataNext12HoursDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeatherStatusForecastDataNext12HoursDetails(val *WeatherStatusForecastDataNext12HoursDetails) *NullableWeatherStatusForecastDataNext12HoursDetails {
	return &NullableWeatherStatusForecastDataNext12HoursDetails{value: val, isSet: true}
}

func (v NullableWeatherStatusForecastDataNext12HoursDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeatherStatusForecastDataNext12HoursDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


