/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the UpdatenotificationApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatenotificationApp{}

// UpdatenotificationApp struct for UpdatenotificationApp
type UpdatenotificationApp struct {
	AppId string `json:"appId"`
	AppName string `json:"appName"`
	AdditionalProperties map[string]interface{}
}

type _UpdatenotificationApp UpdatenotificationApp

// NewUpdatenotificationApp instantiates a new UpdatenotificationApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatenotificationApp(appId string, appName string) *UpdatenotificationApp {
	this := UpdatenotificationApp{}
	this.AppId = appId
	this.AppName = appName
	return &this
}

// NewUpdatenotificationAppWithDefaults instantiates a new UpdatenotificationApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatenotificationAppWithDefaults() *UpdatenotificationApp {
	this := UpdatenotificationApp{}
	return &this
}

// GetAppId returns the AppId field value
func (o *UpdatenotificationApp) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *UpdatenotificationApp) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *UpdatenotificationApp) SetAppId(v string) {
	o.AppId = v
}

// GetAppName returns the AppName field value
func (o *UpdatenotificationApp) GetAppName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value
// and a boolean to check if the value has been set.
func (o *UpdatenotificationApp) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppName, true
}

// SetAppName sets field value
func (o *UpdatenotificationApp) SetAppName(v string) {
	o.AppName = v
}

func (o UpdatenotificationApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatenotificationApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	toSerialize["appName"] = o.AppName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdatenotificationApp) UnmarshalJSON(bytes []byte) (err error) {
	varUpdatenotificationApp := _UpdatenotificationApp{}

	if err = json.Unmarshal(bytes, &varUpdatenotificationApp); err == nil {
		*o = UpdatenotificationApp(varUpdatenotificationApp)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appId")
		delete(additionalProperties, "appName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdatenotificationApp struct {
	value *UpdatenotificationApp
	isSet bool
}

func (v NullableUpdatenotificationApp) Get() *UpdatenotificationApp {
	return v.value
}

func (v *NullableUpdatenotificationApp) Set(val *UpdatenotificationApp) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatenotificationApp) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatenotificationApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatenotificationApp(val *UpdatenotificationApp) *NullableUpdatenotificationApp {
	return &NullableUpdatenotificationApp{value: val, isSet: true}
}

func (v NullableUpdatenotificationApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatenotificationApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


