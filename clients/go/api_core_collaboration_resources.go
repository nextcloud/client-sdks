/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CoreCollaborationResourcesAPI interface {

	/*
	CoreCollaborationResourcesAddResource Add a resource to a collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param collectionId ID of the collection
	@return CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest
	*/
	CoreCollaborationResourcesAddResource(ctx context.Context, collectionId int64) CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest

	// CoreCollaborationResourcesAddResourceExecute executes the request
	//  @return CoreCollaborationResourcesListCollection200Response
	CoreCollaborationResourcesAddResourceExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error)

	/*
	CoreCollaborationResourcesCreateCollectionOnResource Create a collection for a resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param baseResourceType Type of the base resource
	@param baseResourceId ID of the base resource
	@return CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest
	*/
	CoreCollaborationResourcesCreateCollectionOnResource(ctx context.Context, baseResourceType string, baseResourceId string) CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest

	// CoreCollaborationResourcesCreateCollectionOnResourceExecute executes the request
	//  @return CoreCollaborationResourcesListCollection200Response
	CoreCollaborationResourcesCreateCollectionOnResourceExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error)

	/*
	CoreCollaborationResourcesGetCollectionsByResource Get collections by resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceType Type of the resource
	@param resourceId ID of the resource
	@return CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest
	*/
	CoreCollaborationResourcesGetCollectionsByResource(ctx context.Context, resourceType string, resourceId string) CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest

	// CoreCollaborationResourcesGetCollectionsByResourceExecute executes the request
	//  @return CoreCollaborationResourcesSearchCollections200Response
	CoreCollaborationResourcesGetCollectionsByResourceExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest) (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error)

	/*
	CoreCollaborationResourcesListCollection Get a collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param collectionId ID of the collection
	@return CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest
	*/
	CoreCollaborationResourcesListCollection(ctx context.Context, collectionId int64) CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest

	// CoreCollaborationResourcesListCollectionExecute executes the request
	//  @return CoreCollaborationResourcesListCollection200Response
	CoreCollaborationResourcesListCollectionExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error)

	/*
	CoreCollaborationResourcesRemoveResource Remove a resource from a collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param collectionId ID of the collection
	@return CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest
	*/
	CoreCollaborationResourcesRemoveResource(ctx context.Context, collectionId int64) CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest

	// CoreCollaborationResourcesRemoveResourceExecute executes the request
	//  @return CoreCollaborationResourcesListCollection200Response
	CoreCollaborationResourcesRemoveResourceExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error)

	/*
	CoreCollaborationResourcesRenameCollection Rename a collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param collectionId ID of the collection
	@return CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest
	*/
	CoreCollaborationResourcesRenameCollection(ctx context.Context, collectionId int64) CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest

	// CoreCollaborationResourcesRenameCollectionExecute executes the request
	//  @return CoreCollaborationResourcesListCollection200Response
	CoreCollaborationResourcesRenameCollectionExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error)

	/*
	CoreCollaborationResourcesSearchCollections Search for collections

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param filter Filter collections
	@return CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest
	*/
	CoreCollaborationResourcesSearchCollections(ctx context.Context, filter string) CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest

	// CoreCollaborationResourcesSearchCollectionsExecute executes the request
	//  @return CoreCollaborationResourcesSearchCollections200Response
	CoreCollaborationResourcesSearchCollectionsExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest) (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error)
}

// CoreCollaborationResourcesAPIService CoreCollaborationResourcesAPI service
type CoreCollaborationResourcesAPIService service

type CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest struct {
	ctx context.Context
	ApiService CoreCollaborationResourcesAPI
	resourceType *string
	resourceId *string
	collectionId int64
	oCSAPIRequest *string
}

// Name of the resource
func (r CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest) ResourceType(resourceType string) CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest {
	r.resourceType = &resourceType
	return r
}

// ID of the resource
func (r CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest) ResourceId(resourceId string) CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest {
	r.resourceId = &resourceId
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest) OCSAPIRequest(oCSAPIRequest string) CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesAddResourceExecute(r)
}

/*
CoreCollaborationResourcesAddResource Add a resource to a collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param collectionId ID of the collection
 @return CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest
*/
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesAddResource(ctx context.Context, collectionId int64) CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest {
	return CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest{
		ApiService: a,
		ctx: ctx,
		collectionId: collectionId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesAddResourceExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesAddResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesAPIService.CoreCollaborationResourcesAddResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/{collectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"collectionId"+"}", url.PathEscape(parameterValueToString(r.collectionId, "collectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceId == nil {
		return localVarReturnValue, nil, reportError("resourceId is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType", r.resourceType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceId", r.resourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest struct {
	ctx context.Context
	ApiService CoreCollaborationResourcesAPI
	name *string
	baseResourceType string
	baseResourceId string
	oCSAPIRequest *string
}

// Name of the collection
func (r CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest) Name(name string) CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest {
	r.name = &name
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest) OCSAPIRequest(oCSAPIRequest string) CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesCreateCollectionOnResourceExecute(r)
}

/*
CoreCollaborationResourcesCreateCollectionOnResource Create a collection for a resource

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param baseResourceType Type of the base resource
 @param baseResourceId ID of the base resource
 @return CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest
*/
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesCreateCollectionOnResource(ctx context.Context, baseResourceType string, baseResourceId string) CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest {
	return CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest{
		ApiService: a,
		ctx: ctx,
		baseResourceType: baseResourceType,
		baseResourceId: baseResourceId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesCreateCollectionOnResourceExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesCreateCollectionOnResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesAPIService.CoreCollaborationResourcesCreateCollectionOnResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"baseResourceType"+"}", url.PathEscape(parameterValueToString(r.baseResourceType, "baseResourceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"baseResourceId"+"}", url.PathEscape(parameterValueToString(r.baseResourceId, "baseResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest struct {
	ctx context.Context
	ApiService CoreCollaborationResourcesAPI
	resourceType string
	resourceId string
	oCSAPIRequest *string
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest) OCSAPIRequest(oCSAPIRequest string) CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest) Execute() (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesGetCollectionsByResourceExecute(r)
}

/*
CoreCollaborationResourcesGetCollectionsByResource Get collections by resource

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourceType Type of the resource
 @param resourceId ID of the resource
 @return CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest
*/
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesGetCollectionsByResource(ctx context.Context, resourceType string, resourceId string) CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest {
	return CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest{
		ApiService: a,
		ctx: ctx,
		resourceType: resourceType,
		resourceId: resourceId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesSearchCollections200Response
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesGetCollectionsByResourceExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesGetCollectionsByResourceRequest) (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesSearchCollections200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesAPIService.CoreCollaborationResourcesGetCollectionsByResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/{resourceType}/{resourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourceType"+"}", url.PathEscape(parameterValueToString(r.resourceType, "resourceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceId"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest struct {
	ctx context.Context
	ApiService CoreCollaborationResourcesAPI
	collectionId int64
	oCSAPIRequest *string
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest) OCSAPIRequest(oCSAPIRequest string) CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesListCollectionExecute(r)
}

/*
CoreCollaborationResourcesListCollection Get a collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param collectionId ID of the collection
 @return CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest
*/
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesListCollection(ctx context.Context, collectionId int64) CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest {
	return CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest{
		ApiService: a,
		ctx: ctx,
		collectionId: collectionId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesListCollectionExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesListCollectionRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesAPIService.CoreCollaborationResourcesListCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/{collectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"collectionId"+"}", url.PathEscape(parameterValueToString(r.collectionId, "collectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest struct {
	ctx context.Context
	ApiService CoreCollaborationResourcesAPI
	resourceType *string
	resourceId *string
	collectionId int64
	oCSAPIRequest *string
}

// Name of the resource
func (r CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest) ResourceType(resourceType string) CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest {
	r.resourceType = &resourceType
	return r
}

// ID of the resource
func (r CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest) ResourceId(resourceId string) CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest {
	r.resourceId = &resourceId
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest) OCSAPIRequest(oCSAPIRequest string) CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesRemoveResourceExecute(r)
}

/*
CoreCollaborationResourcesRemoveResource Remove a resource from a collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param collectionId ID of the collection
 @return CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest
*/
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesRemoveResource(ctx context.Context, collectionId int64) CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest {
	return CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest{
		ApiService: a,
		ctx: ctx,
		collectionId: collectionId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesRemoveResourceExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesRemoveResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesAPIService.CoreCollaborationResourcesRemoveResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/{collectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"collectionId"+"}", url.PathEscape(parameterValueToString(r.collectionId, "collectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceId == nil {
		return localVarReturnValue, nil, reportError("resourceId is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType", r.resourceType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceId", r.resourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest struct {
	ctx context.Context
	ApiService CoreCollaborationResourcesAPI
	collectionName *string
	collectionId int64
	oCSAPIRequest *string
}

// New name
func (r CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest) CollectionName(collectionName string) CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest {
	r.collectionName = &collectionName
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest) OCSAPIRequest(oCSAPIRequest string) CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesRenameCollectionExecute(r)
}

/*
CoreCollaborationResourcesRenameCollection Rename a collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param collectionId ID of the collection
 @return CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest
*/
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesRenameCollection(ctx context.Context, collectionId int64) CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest {
	return CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest{
		ApiService: a,
		ctx: ctx,
		collectionId: collectionId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesRenameCollectionExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesRenameCollectionRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesAPIService.CoreCollaborationResourcesRenameCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/{collectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"collectionId"+"}", url.PathEscape(parameterValueToString(r.collectionId, "collectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.collectionName == nil {
		return localVarReturnValue, nil, reportError("collectionName is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "collectionName", r.collectionName, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest struct {
	ctx context.Context
	ApiService CoreCollaborationResourcesAPI
	filter string
	oCSAPIRequest *string
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest) OCSAPIRequest(oCSAPIRequest string) CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest) Execute() (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesSearchCollectionsExecute(r)
}

/*
CoreCollaborationResourcesSearchCollections Search for collections

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param filter Filter collections
 @return CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest
*/
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesSearchCollections(ctx context.Context, filter string) CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest {
	return CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest{
		ApiService: a,
		ctx: ctx,
		filter: filter,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesSearchCollections200Response
func (a *CoreCollaborationResourcesAPIService) CoreCollaborationResourcesSearchCollectionsExecute(r CoreCollaborationResourcesAPICoreCollaborationResourcesSearchCollectionsRequest) (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesSearchCollections200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesAPIService.CoreCollaborationResourcesSearchCollections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/search/{filter}"
	localVarPath = strings.Replace(localVarPath, "{"+"filter"+"}", url.PathEscape(parameterValueToString(r.filter, "filter")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
