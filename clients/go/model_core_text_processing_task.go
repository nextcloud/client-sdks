/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the CoreTextProcessingTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreTextProcessingTask{}

// CoreTextProcessingTask struct for CoreTextProcessingTask
type CoreTextProcessingTask struct {
	Id NullableInt64 `json:"id"`
	Type string `json:"type"`
	Status int64 `json:"status"`
	UserId NullableString `json:"userId"`
	AppId string `json:"appId"`
	Input string `json:"input"`
	Output NullableString `json:"output"`
	Identifier string `json:"identifier"`
	AdditionalProperties map[string]interface{}
}

type _CoreTextProcessingTask CoreTextProcessingTask

// NewCoreTextProcessingTask instantiates a new CoreTextProcessingTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreTextProcessingTask(id NullableInt64, type_ string, status int64, userId NullableString, appId string, input string, output NullableString, identifier string) *CoreTextProcessingTask {
	this := CoreTextProcessingTask{}
	this.Id = id
	this.Type = type_
	this.Status = status
	this.UserId = userId
	this.AppId = appId
	this.Input = input
	this.Output = output
	this.Identifier = identifier
	return &this
}

// NewCoreTextProcessingTaskWithDefaults instantiates a new CoreTextProcessingTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreTextProcessingTaskWithDefaults() *CoreTextProcessingTask {
	this := CoreTextProcessingTask{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CoreTextProcessingTask) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoreTextProcessingTask) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *CoreTextProcessingTask) SetId(v int64) {
	o.Id.Set(&v)
}

// GetType returns the Type field value
func (o *CoreTextProcessingTask) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CoreTextProcessingTask) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CoreTextProcessingTask) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *CoreTextProcessingTask) GetStatus() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CoreTextProcessingTask) GetStatusOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CoreTextProcessingTask) SetStatus(v int64) {
	o.Status = v
}

// GetUserId returns the UserId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CoreTextProcessingTask) GetUserId() string {
	if o == nil || o.UserId.Get() == nil {
		var ret string
		return ret
	}

	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoreTextProcessingTask) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// SetUserId sets field value
func (o *CoreTextProcessingTask) SetUserId(v string) {
	o.UserId.Set(&v)
}

// GetAppId returns the AppId field value
func (o *CoreTextProcessingTask) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *CoreTextProcessingTask) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *CoreTextProcessingTask) SetAppId(v string) {
	o.AppId = v
}

// GetInput returns the Input field value
func (o *CoreTextProcessingTask) GetInput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *CoreTextProcessingTask) GetInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *CoreTextProcessingTask) SetInput(v string) {
	o.Input = v
}

// GetOutput returns the Output field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CoreTextProcessingTask) GetOutput() string {
	if o == nil || o.Output.Get() == nil {
		var ret string
		return ret
	}

	return *o.Output.Get()
}

// GetOutputOk returns a tuple with the Output field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoreTextProcessingTask) GetOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Output.Get(), o.Output.IsSet()
}

// SetOutput sets field value
func (o *CoreTextProcessingTask) SetOutput(v string) {
	o.Output.Set(&v)
}

// GetIdentifier returns the Identifier field value
func (o *CoreTextProcessingTask) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *CoreTextProcessingTask) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *CoreTextProcessingTask) SetIdentifier(v string) {
	o.Identifier = v
}

func (o CoreTextProcessingTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreTextProcessingTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	toSerialize["userId"] = o.UserId.Get()
	toSerialize["appId"] = o.AppId
	toSerialize["input"] = o.Input
	toSerialize["output"] = o.Output.Get()
	toSerialize["identifier"] = o.Identifier

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreTextProcessingTask) UnmarshalJSON(bytes []byte) (err error) {
	varCoreTextProcessingTask := _CoreTextProcessingTask{}

	if err = json.Unmarshal(bytes, &varCoreTextProcessingTask); err == nil {
		*o = CoreTextProcessingTask(varCoreTextProcessingTask)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "appId")
		delete(additionalProperties, "input")
		delete(additionalProperties, "output")
		delete(additionalProperties, "identifier")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreTextProcessingTask struct {
	value *CoreTextProcessingTask
	isSet bool
}

func (v NullableCoreTextProcessingTask) Get() *CoreTextProcessingTask {
	return v.value
}

func (v *NullableCoreTextProcessingTask) Set(val *CoreTextProcessingTask) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreTextProcessingTask) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreTextProcessingTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreTextProcessingTask(val *CoreTextProcessingTask) *NullableCoreTextProcessingTask {
	return &NullableCoreTextProcessingTask{value: val, isSet: true}
}

func (v NullableCoreTextProcessingTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreTextProcessingTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


