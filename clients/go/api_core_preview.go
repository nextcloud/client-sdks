/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)


type CorePreviewAPI interface {

	/*
	CorePreviewGetPreview Get a preview by file path

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CorePreviewAPICorePreviewGetPreviewRequest
	*/
	CorePreviewGetPreview(ctx context.Context) CorePreviewAPICorePreviewGetPreviewRequest

	// CorePreviewGetPreviewExecute executes the request
	//  @return *os.File
	CorePreviewGetPreviewExecute(r CorePreviewAPICorePreviewGetPreviewRequest) (*os.File, *http.Response, error)

	/*
	CorePreviewGetPreviewByFileId Get a preview by file ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CorePreviewAPICorePreviewGetPreviewByFileIdRequest
	*/
	CorePreviewGetPreviewByFileId(ctx context.Context) CorePreviewAPICorePreviewGetPreviewByFileIdRequest

	// CorePreviewGetPreviewByFileIdExecute executes the request
	//  @return *os.File
	CorePreviewGetPreviewByFileIdExecute(r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) (*os.File, *http.Response, error)
}

// CorePreviewAPIService CorePreviewAPI service
type CorePreviewAPIService service

type CorePreviewAPICorePreviewGetPreviewRequest struct {
	ctx context.Context
	ApiService CorePreviewAPI
	file *string
	x *int64
	y *int64
	a *int32
	forceIcon *int32
	mode *string
	mimeFallback *int32
}

// Path of the file
func (r CorePreviewAPICorePreviewGetPreviewRequest) File(file string) CorePreviewAPICorePreviewGetPreviewRequest {
	r.file = &file
	return r
}

// Width of the preview
func (r CorePreviewAPICorePreviewGetPreviewRequest) X(x int64) CorePreviewAPICorePreviewGetPreviewRequest {
	r.x = &x
	return r
}

// Height of the preview
func (r CorePreviewAPICorePreviewGetPreviewRequest) Y(y int64) CorePreviewAPICorePreviewGetPreviewRequest {
	r.y = &y
	return r
}

// Whether to not crop the preview
func (r CorePreviewAPICorePreviewGetPreviewRequest) A(a int32) CorePreviewAPICorePreviewGetPreviewRequest {
	r.a = &a
	return r
}

// Force returning an icon
func (r CorePreviewAPICorePreviewGetPreviewRequest) ForceIcon(forceIcon int32) CorePreviewAPICorePreviewGetPreviewRequest {
	r.forceIcon = &forceIcon
	return r
}

// How to crop the image
func (r CorePreviewAPICorePreviewGetPreviewRequest) Mode(mode string) CorePreviewAPICorePreviewGetPreviewRequest {
	r.mode = &mode
	return r
}

// Whether to fallback to the mime icon if no preview is available
func (r CorePreviewAPICorePreviewGetPreviewRequest) MimeFallback(mimeFallback int32) CorePreviewAPICorePreviewGetPreviewRequest {
	r.mimeFallback = &mimeFallback
	return r
}

func (r CorePreviewAPICorePreviewGetPreviewRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CorePreviewGetPreviewExecute(r)
}

/*
CorePreviewGetPreview Get a preview by file path

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CorePreviewAPICorePreviewGetPreviewRequest
*/
func (a *CorePreviewAPIService) CorePreviewGetPreview(ctx context.Context) CorePreviewAPICorePreviewGetPreviewRequest {
	return CorePreviewAPICorePreviewGetPreviewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *CorePreviewAPIService) CorePreviewGetPreviewExecute(r CorePreviewAPICorePreviewGetPreviewRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CorePreviewAPIService.CorePreviewGetPreview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/core/preview.png"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.file != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file", r.file, "")
	}
	if r.x != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "x", r.x, "")
	}
	if r.y != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "y", r.y, "")
	}
	if r.a != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "a", r.a, "")
	}
	if r.forceIcon != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "forceIcon", r.forceIcon, "")
	}
	if r.mode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mode", r.mode, "")
	}
	if r.mimeFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mimeFallback", r.mimeFallback, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CorePreviewAPICorePreviewGetPreviewByFileIdRequest struct {
	ctx context.Context
	ApiService CorePreviewAPI
	fileId *int64
	x *int64
	y *int64
	a *int32
	forceIcon *int32
	mode *string
	mimeFallback *int32
}

// ID of the file
func (r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) FileId(fileId int64) CorePreviewAPICorePreviewGetPreviewByFileIdRequest {
	r.fileId = &fileId
	return r
}

// Width of the preview
func (r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) X(x int64) CorePreviewAPICorePreviewGetPreviewByFileIdRequest {
	r.x = &x
	return r
}

// Height of the preview
func (r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) Y(y int64) CorePreviewAPICorePreviewGetPreviewByFileIdRequest {
	r.y = &y
	return r
}

// Whether to not crop the preview
func (r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) A(a int32) CorePreviewAPICorePreviewGetPreviewByFileIdRequest {
	r.a = &a
	return r
}

// Force returning an icon
func (r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) ForceIcon(forceIcon int32) CorePreviewAPICorePreviewGetPreviewByFileIdRequest {
	r.forceIcon = &forceIcon
	return r
}

// How to crop the image
func (r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) Mode(mode string) CorePreviewAPICorePreviewGetPreviewByFileIdRequest {
	r.mode = &mode
	return r
}

// Whether to fallback to the mime icon if no preview is available
func (r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) MimeFallback(mimeFallback int32) CorePreviewAPICorePreviewGetPreviewByFileIdRequest {
	r.mimeFallback = &mimeFallback
	return r
}

func (r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CorePreviewGetPreviewByFileIdExecute(r)
}

/*
CorePreviewGetPreviewByFileId Get a preview by file ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CorePreviewAPICorePreviewGetPreviewByFileIdRequest
*/
func (a *CorePreviewAPIService) CorePreviewGetPreviewByFileId(ctx context.Context) CorePreviewAPICorePreviewGetPreviewByFileIdRequest {
	return CorePreviewAPICorePreviewGetPreviewByFileIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *CorePreviewAPIService) CorePreviewGetPreviewByFileIdExecute(r CorePreviewAPICorePreviewGetPreviewByFileIdRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CorePreviewAPIService.CorePreviewGetPreviewByFileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/core/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fileId", r.fileId, "")
	}
	if r.x != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "x", r.x, "")
	}
	if r.y != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "y", r.y, "")
	}
	if r.a != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "a", r.a, "")
	}
	if r.forceIcon != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "forceIcon", r.forceIcon, "")
	}
	if r.mode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mode", r.mode, "")
	}
	if r.mimeFallback != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mimeFallback", r.mimeFallback, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
