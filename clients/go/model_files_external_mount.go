/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesExternalMount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesExternalMount{}

// FilesExternalMount struct for FilesExternalMount
type FilesExternalMount struct {
	Name string `json:"name"`
	Path string `json:"path"`
	Type string `json:"type"`
	Backend string `json:"backend"`
	Scope string `json:"scope"`
	Permissions int64 `json:"permissions"`
	Id int64 `json:"id"`
	Class string `json:"class"`
	Config FilesExternalStorageConfig `json:"config"`
	AdditionalProperties map[string]interface{}
}

type _FilesExternalMount FilesExternalMount

// NewFilesExternalMount instantiates a new FilesExternalMount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesExternalMount(name string, path string, type_ string, backend string, scope string, permissions int64, id int64, class string, config FilesExternalStorageConfig) *FilesExternalMount {
	this := FilesExternalMount{}
	this.Name = name
	this.Path = path
	this.Type = type_
	this.Backend = backend
	this.Scope = scope
	this.Permissions = permissions
	this.Id = id
	this.Class = class
	this.Config = config
	return &this
}

// NewFilesExternalMountWithDefaults instantiates a new FilesExternalMount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesExternalMountWithDefaults() *FilesExternalMount {
	this := FilesExternalMount{}
	return &this
}

// GetName returns the Name field value
func (o *FilesExternalMount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FilesExternalMount) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value
func (o *FilesExternalMount) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *FilesExternalMount) SetPath(v string) {
	o.Path = v
}

// GetType returns the Type field value
func (o *FilesExternalMount) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilesExternalMount) SetType(v string) {
	o.Type = v
}

// GetBackend returns the Backend field value
func (o *FilesExternalMount) GetBackend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Backend
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetBackendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Backend, true
}

// SetBackend sets field value
func (o *FilesExternalMount) SetBackend(v string) {
	o.Backend = v
}

// GetScope returns the Scope field value
func (o *FilesExternalMount) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *FilesExternalMount) SetScope(v string) {
	o.Scope = v
}

// GetPermissions returns the Permissions field value
func (o *FilesExternalMount) GetPermissions() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetPermissionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *FilesExternalMount) SetPermissions(v int64) {
	o.Permissions = v
}

// GetId returns the Id field value
func (o *FilesExternalMount) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FilesExternalMount) SetId(v int64) {
	o.Id = v
}

// GetClass returns the Class field value
func (o *FilesExternalMount) GetClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *FilesExternalMount) SetClass(v string) {
	o.Class = v
}

// GetConfig returns the Config field value
func (o *FilesExternalMount) GetConfig() FilesExternalStorageConfig {
	if o == nil {
		var ret FilesExternalStorageConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *FilesExternalMount) GetConfigOk() (*FilesExternalStorageConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *FilesExternalMount) SetConfig(v FilesExternalStorageConfig) {
	o.Config = v
}

func (o FilesExternalMount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesExternalMount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["path"] = o.Path
	toSerialize["type"] = o.Type
	toSerialize["backend"] = o.Backend
	toSerialize["scope"] = o.Scope
	toSerialize["permissions"] = o.Permissions
	toSerialize["id"] = o.Id
	toSerialize["class"] = o.Class
	toSerialize["config"] = o.Config

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesExternalMount) UnmarshalJSON(bytes []byte) (err error) {
	varFilesExternalMount := _FilesExternalMount{}

	if err = json.Unmarshal(bytes, &varFilesExternalMount); err == nil {
		*o = FilesExternalMount(varFilesExternalMount)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "path")
		delete(additionalProperties, "type")
		delete(additionalProperties, "backend")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "permissions")
		delete(additionalProperties, "id")
		delete(additionalProperties, "class")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesExternalMount struct {
	value *FilesExternalMount
	isSet bool
}

func (v NullableFilesExternalMount) Get() *FilesExternalMount {
	return v.value
}

func (v *NullableFilesExternalMount) Set(val *FilesExternalMount) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesExternalMount) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesExternalMount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesExternalMount(val *FilesExternalMount) *NullableFilesExternalMount {
	return &NullableFilesExternalMount{value: val, isSet: true}
}

func (v NullableFilesExternalMount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesExternalMount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


