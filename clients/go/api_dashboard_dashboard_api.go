/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


type DashboardDashboardApiAPI interface {

	/*
	DashboardDashboardApiGetWidgetItems Get the items for the widgets

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest
	*/
	DashboardDashboardApiGetWidgetItems(ctx context.Context) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest

	// DashboardDashboardApiGetWidgetItemsExecute executes the request
	//  @return DashboardDashboardApiGetWidgetItems200Response
	DashboardDashboardApiGetWidgetItemsExecute(r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest) (*DashboardDashboardApiGetWidgetItems200Response, *http.Response, error)

	/*
	DashboardDashboardApiGetWidgetItemsV2 Get the items for the widgets

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request
	*/
	DashboardDashboardApiGetWidgetItemsV2(ctx context.Context) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request

	// DashboardDashboardApiGetWidgetItemsV2Execute executes the request
	//  @return DashboardDashboardApiGetWidgetItemsV2200Response
	DashboardDashboardApiGetWidgetItemsV2Execute(r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request) (*DashboardDashboardApiGetWidgetItemsV2200Response, *http.Response, error)

	/*
	DashboardDashboardApiGetWidgets Get the widgets

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest
	*/
	DashboardDashboardApiGetWidgets(ctx context.Context) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest

	// DashboardDashboardApiGetWidgetsExecute executes the request
	//  @return DashboardDashboardApiGetWidgets200Response
	DashboardDashboardApiGetWidgetsExecute(r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest) (*DashboardDashboardApiGetWidgets200Response, *http.Response, error)
}

// DashboardDashboardApiAPIService DashboardDashboardApiAPI service
type DashboardDashboardApiAPIService service

type DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest struct {
	ctx context.Context
	ApiService DashboardDashboardApiAPI
	oCSAPIRequest *string
	sinceIds *string
	limit *int64
	widgets *[]string
}

func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest) OCSAPIRequest(oCSAPIRequest string) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Array indexed by widget Ids, contains date/id from which we want the new items
func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest) SinceIds(sinceIds string) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest {
	r.sinceIds = &sinceIds
	return r
}

// Limit number of result items per widget
func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest) Limit(limit int64) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest {
	r.limit = &limit
	return r
}

// Limit results to specific widgets
func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest) Widgets(widgets []string) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest {
	r.widgets = &widgets
	return r
}

func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest) Execute() (*DashboardDashboardApiGetWidgetItems200Response, *http.Response, error) {
	return r.ApiService.DashboardDashboardApiGetWidgetItemsExecute(r)
}

/*
DashboardDashboardApiGetWidgetItems Get the items for the widgets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest
*/
func (a *DashboardDashboardApiAPIService) DashboardDashboardApiGetWidgetItems(ctx context.Context) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest {
	return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DashboardDashboardApiGetWidgetItems200Response
func (a *DashboardDashboardApiAPIService) DashboardDashboardApiGetWidgetItemsExecute(r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsRequest) (*DashboardDashboardApiGetWidgetItems200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DashboardDashboardApiGetWidgetItems200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardDashboardApiAPIService.DashboardDashboardApiGetWidgetItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/dashboard/api/v1/widget-items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.sinceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sinceIds", r.sinceIds, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.widgets != nil {
		t := *r.widgets
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "widgets[]", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "widgets[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request struct {
	ctx context.Context
	ApiService DashboardDashboardApiAPI
	oCSAPIRequest *string
	sinceIds *string
	limit *int64
	widgets *[]string
}

func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request) OCSAPIRequest(oCSAPIRequest string) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Array indexed by widget Ids, contains date/id from which we want the new items
func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request) SinceIds(sinceIds string) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request {
	r.sinceIds = &sinceIds
	return r
}

// Limit number of result items per widget
func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request) Limit(limit int64) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request {
	r.limit = &limit
	return r
}

// Limit results to specific widgets
func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request) Widgets(widgets []string) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request {
	r.widgets = &widgets
	return r
}

func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request) Execute() (*DashboardDashboardApiGetWidgetItemsV2200Response, *http.Response, error) {
	return r.ApiService.DashboardDashboardApiGetWidgetItemsV2Execute(r)
}

/*
DashboardDashboardApiGetWidgetItemsV2 Get the items for the widgets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request
*/
func (a *DashboardDashboardApiAPIService) DashboardDashboardApiGetWidgetItemsV2(ctx context.Context) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request {
	return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DashboardDashboardApiGetWidgetItemsV2200Response
func (a *DashboardDashboardApiAPIService) DashboardDashboardApiGetWidgetItemsV2Execute(r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetItemsV2Request) (*DashboardDashboardApiGetWidgetItemsV2200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DashboardDashboardApiGetWidgetItemsV2200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardDashboardApiAPIService.DashboardDashboardApiGetWidgetItemsV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/dashboard/api/v2/widget-items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.sinceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sinceIds", r.sinceIds, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.widgets != nil {
		t := *r.widgets
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "widgets[]", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "widgets[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest struct {
	ctx context.Context
	ApiService DashboardDashboardApiAPI
	oCSAPIRequest *string
}

func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest) OCSAPIRequest(oCSAPIRequest string) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest) Execute() (*DashboardDashboardApiGetWidgets200Response, *http.Response, error) {
	return r.ApiService.DashboardDashboardApiGetWidgetsExecute(r)
}

/*
DashboardDashboardApiGetWidgets Get the widgets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest
*/
func (a *DashboardDashboardApiAPIService) DashboardDashboardApiGetWidgets(ctx context.Context) DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest {
	return DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DashboardDashboardApiGetWidgets200Response
func (a *DashboardDashboardApiAPIService) DashboardDashboardApiGetWidgetsExecute(r DashboardDashboardApiAPIDashboardDashboardApiGetWidgetsRequest) (*DashboardDashboardApiGetWidgets200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DashboardDashboardApiGetWidgets200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardDashboardApiAPIService.DashboardDashboardApiGetWidgets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/dashboard/api/v1/widgets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
