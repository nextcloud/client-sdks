/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesExternalStorageConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesExternalStorageConfig{}

// FilesExternalStorageConfig struct for FilesExternalStorageConfig
type FilesExternalStorageConfig struct {
	ApplicableGroups []string `json:"applicableGroups,omitempty"`
	ApplicableUsers []string `json:"applicableUsers,omitempty"`
	AuthMechanism string `json:"authMechanism"`
	Backend string `json:"backend"`
	BackendOptions map[string]map[string]interface{} `json:"backendOptions"`
	Id *int64 `json:"id,omitempty"`
	MountOptions map[string]map[string]interface{} `json:"mountOptions,omitempty"`
	MountPoint string `json:"mountPoint"`
	Priority *int64 `json:"priority,omitempty"`
	Status *int64 `json:"status,omitempty"`
	StatusMessage *string `json:"statusMessage,omitempty"`
	Type string `json:"type"`
	UserProvided bool `json:"userProvided"`
	AdditionalProperties map[string]interface{}
}

type _FilesExternalStorageConfig FilesExternalStorageConfig

// NewFilesExternalStorageConfig instantiates a new FilesExternalStorageConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesExternalStorageConfig(authMechanism string, backend string, backendOptions map[string]map[string]interface{}, mountPoint string, type_ string, userProvided bool) *FilesExternalStorageConfig {
	this := FilesExternalStorageConfig{}
	this.AuthMechanism = authMechanism
	this.Backend = backend
	this.BackendOptions = backendOptions
	this.MountPoint = mountPoint
	this.Type = type_
	this.UserProvided = userProvided
	return &this
}

// NewFilesExternalStorageConfigWithDefaults instantiates a new FilesExternalStorageConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesExternalStorageConfigWithDefaults() *FilesExternalStorageConfig {
	this := FilesExternalStorageConfig{}
	return &this
}

// GetApplicableGroups returns the ApplicableGroups field value if set, zero value otherwise.
func (o *FilesExternalStorageConfig) GetApplicableGroups() []string {
	if o == nil || IsNil(o.ApplicableGroups) {
		var ret []string
		return ret
	}
	return o.ApplicableGroups
}

// GetApplicableGroupsOk returns a tuple with the ApplicableGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetApplicableGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicableGroups) {
		return nil, false
	}
	return o.ApplicableGroups, true
}

// HasApplicableGroups returns a boolean if a field has been set.
func (o *FilesExternalStorageConfig) HasApplicableGroups() bool {
	if o != nil && !IsNil(o.ApplicableGroups) {
		return true
	}

	return false
}

// SetApplicableGroups gets a reference to the given []string and assigns it to the ApplicableGroups field.
func (o *FilesExternalStorageConfig) SetApplicableGroups(v []string) {
	o.ApplicableGroups = v
}

// GetApplicableUsers returns the ApplicableUsers field value if set, zero value otherwise.
func (o *FilesExternalStorageConfig) GetApplicableUsers() []string {
	if o == nil || IsNil(o.ApplicableUsers) {
		var ret []string
		return ret
	}
	return o.ApplicableUsers
}

// GetApplicableUsersOk returns a tuple with the ApplicableUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetApplicableUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicableUsers) {
		return nil, false
	}
	return o.ApplicableUsers, true
}

// HasApplicableUsers returns a boolean if a field has been set.
func (o *FilesExternalStorageConfig) HasApplicableUsers() bool {
	if o != nil && !IsNil(o.ApplicableUsers) {
		return true
	}

	return false
}

// SetApplicableUsers gets a reference to the given []string and assigns it to the ApplicableUsers field.
func (o *FilesExternalStorageConfig) SetApplicableUsers(v []string) {
	o.ApplicableUsers = v
}

// GetAuthMechanism returns the AuthMechanism field value
func (o *FilesExternalStorageConfig) GetAuthMechanism() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthMechanism
}

// GetAuthMechanismOk returns a tuple with the AuthMechanism field value
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetAuthMechanismOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthMechanism, true
}

// SetAuthMechanism sets field value
func (o *FilesExternalStorageConfig) SetAuthMechanism(v string) {
	o.AuthMechanism = v
}

// GetBackend returns the Backend field value
func (o *FilesExternalStorageConfig) GetBackend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Backend
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetBackendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Backend, true
}

// SetBackend sets field value
func (o *FilesExternalStorageConfig) SetBackend(v string) {
	o.Backend = v
}

// GetBackendOptions returns the BackendOptions field value
func (o *FilesExternalStorageConfig) GetBackendOptions() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.BackendOptions
}

// GetBackendOptionsOk returns a tuple with the BackendOptions field value
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetBackendOptionsOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.BackendOptions, true
}

// SetBackendOptions sets field value
func (o *FilesExternalStorageConfig) SetBackendOptions(v map[string]map[string]interface{}) {
	o.BackendOptions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FilesExternalStorageConfig) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FilesExternalStorageConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FilesExternalStorageConfig) SetId(v int64) {
	o.Id = &v
}

// GetMountOptions returns the MountOptions field value if set, zero value otherwise.
func (o *FilesExternalStorageConfig) GetMountOptions() map[string]map[string]interface{} {
	if o == nil || IsNil(o.MountOptions) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.MountOptions
}

// GetMountOptionsOk returns a tuple with the MountOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetMountOptionsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.MountOptions) {
		return map[string]map[string]interface{}{}, false
	}
	return o.MountOptions, true
}

// HasMountOptions returns a boolean if a field has been set.
func (o *FilesExternalStorageConfig) HasMountOptions() bool {
	if o != nil && !IsNil(o.MountOptions) {
		return true
	}

	return false
}

// SetMountOptions gets a reference to the given map[string]map[string]interface{} and assigns it to the MountOptions field.
func (o *FilesExternalStorageConfig) SetMountOptions(v map[string]map[string]interface{}) {
	o.MountOptions = v
}

// GetMountPoint returns the MountPoint field value
func (o *FilesExternalStorageConfig) GetMountPoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MountPoint
}

// GetMountPointOk returns a tuple with the MountPoint field value
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetMountPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MountPoint, true
}

// SetMountPoint sets field value
func (o *FilesExternalStorageConfig) SetMountPoint(v string) {
	o.MountPoint = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *FilesExternalStorageConfig) GetPriority() int64 {
	if o == nil || IsNil(o.Priority) {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *FilesExternalStorageConfig) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *FilesExternalStorageConfig) SetPriority(v int64) {
	o.Priority = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FilesExternalStorageConfig) GetStatus() int64 {
	if o == nil || IsNil(o.Status) {
		var ret int64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetStatusOk() (*int64, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FilesExternalStorageConfig) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int64 and assigns it to the Status field.
func (o *FilesExternalStorageConfig) SetStatus(v int64) {
	o.Status = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *FilesExternalStorageConfig) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *FilesExternalStorageConfig) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *FilesExternalStorageConfig) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

// GetType returns the Type field value
func (o *FilesExternalStorageConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilesExternalStorageConfig) SetType(v string) {
	o.Type = v
}

// GetUserProvided returns the UserProvided field value
func (o *FilesExternalStorageConfig) GetUserProvided() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UserProvided
}

// GetUserProvidedOk returns a tuple with the UserProvided field value
// and a boolean to check if the value has been set.
func (o *FilesExternalStorageConfig) GetUserProvidedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserProvided, true
}

// SetUserProvided sets field value
func (o *FilesExternalStorageConfig) SetUserProvided(v bool) {
	o.UserProvided = v
}

func (o FilesExternalStorageConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesExternalStorageConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicableGroups) {
		toSerialize["applicableGroups"] = o.ApplicableGroups
	}
	if !IsNil(o.ApplicableUsers) {
		toSerialize["applicableUsers"] = o.ApplicableUsers
	}
	toSerialize["authMechanism"] = o.AuthMechanism
	toSerialize["backend"] = o.Backend
	toSerialize["backendOptions"] = o.BackendOptions
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MountOptions) {
		toSerialize["mountOptions"] = o.MountOptions
	}
	toSerialize["mountPoint"] = o.MountPoint
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusMessage) {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	toSerialize["type"] = o.Type
	toSerialize["userProvided"] = o.UserProvided

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesExternalStorageConfig) UnmarshalJSON(bytes []byte) (err error) {
	varFilesExternalStorageConfig := _FilesExternalStorageConfig{}

	if err = json.Unmarshal(bytes, &varFilesExternalStorageConfig); err == nil {
		*o = FilesExternalStorageConfig(varFilesExternalStorageConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "applicableGroups")
		delete(additionalProperties, "applicableUsers")
		delete(additionalProperties, "authMechanism")
		delete(additionalProperties, "backend")
		delete(additionalProperties, "backendOptions")
		delete(additionalProperties, "id")
		delete(additionalProperties, "mountOptions")
		delete(additionalProperties, "mountPoint")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "status")
		delete(additionalProperties, "statusMessage")
		delete(additionalProperties, "type")
		delete(additionalProperties, "userProvided")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesExternalStorageConfig struct {
	value *FilesExternalStorageConfig
	isSet bool
}

func (v NullableFilesExternalStorageConfig) Get() *FilesExternalStorageConfig {
	return v.value
}

func (v *NullableFilesExternalStorageConfig) Set(val *FilesExternalStorageConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesExternalStorageConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesExternalStorageConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesExternalStorageConfig(val *FilesExternalStorageConfig) *NullableFilesExternalStorageConfig {
	return &NullableFilesExternalStorageConfig{value: val, isSet: true}
}

func (v NullableFilesExternalStorageConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesExternalStorageConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


