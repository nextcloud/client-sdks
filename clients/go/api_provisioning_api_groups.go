/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ProvisioningApiGroupsAPI interface {

	/*
	ProvisioningApiGroupsAddGroup Create a new group

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest
	*/
	ProvisioningApiGroupsAddGroup(ctx context.Context) ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest

	// ProvisioningApiGroupsAddGroupExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiGroupsAddGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiGroupsDeleteGroup Delete a group

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId ID of the group
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest
	*/
	ProvisioningApiGroupsDeleteGroup(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest

	// ProvisioningApiGroupsDeleteGroupExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiGroupsDeleteGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiGroupsGetGroup Get a list of users in the specified group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId ID of the group
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest

	Deprecated
	*/
	ProvisioningApiGroupsGetGroup(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest

	// ProvisioningApiGroupsGetGroupExecute executes the request
	//  @return ProvisioningApiGroupsGetGroupUsers200Response
	// Deprecated
	ProvisioningApiGroupsGetGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error)

	/*
	ProvisioningApiGroupsGetGroupUsers Get a list of users in the specified group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId ID of the group
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest
	*/
	ProvisioningApiGroupsGetGroupUsers(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest

	// ProvisioningApiGroupsGetGroupUsersExecute executes the request
	//  @return ProvisioningApiGroupsGetGroupUsers200Response
	ProvisioningApiGroupsGetGroupUsersExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error)

	/*
	ProvisioningApiGroupsGetGroupUsersDetails Get a list of users details in the specified group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId ID of the group
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest
	*/
	ProvisioningApiGroupsGetGroupUsersDetails(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest

	// ProvisioningApiGroupsGetGroupUsersDetailsExecute executes the request
	//  @return ProvisioningApiGroupsGetGroupUsersDetails200Response
	ProvisioningApiGroupsGetGroupUsersDetailsExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest) (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error)

	/*
	ProvisioningApiGroupsGetGroups Get a list of groups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest
	*/
	ProvisioningApiGroupsGetGroups(ctx context.Context) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest

	// ProvisioningApiGroupsGetGroupsExecute executes the request
	//  @return ProvisioningApiGroupsGetGroups200Response
	ProvisioningApiGroupsGetGroupsExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest) (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error)

	/*
	ProvisioningApiGroupsGetGroupsDetails Get a list of groups details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest
	*/
	ProvisioningApiGroupsGetGroupsDetails(ctx context.Context) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest

	// ProvisioningApiGroupsGetGroupsDetailsExecute executes the request
	//  @return ProvisioningApiGroupsGetGroupsDetails200Response
	ProvisioningApiGroupsGetGroupsDetailsExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest) (*ProvisioningApiGroupsGetGroupsDetails200Response, *http.Response, error)

	/*
	ProvisioningApiGroupsGetSubAdminsOfGroup Get the list of user IDs that are a subadmin of the group

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId ID of the group
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest
	*/
	ProvisioningApiGroupsGetSubAdminsOfGroup(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest

	// ProvisioningApiGroupsGetSubAdminsOfGroupExecute executes the request
	//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	ProvisioningApiGroupsGetSubAdminsOfGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error)

	/*
	ProvisioningApiGroupsUpdateGroup Update a group

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId ID of the group
	@return ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest
	*/
	ProvisioningApiGroupsUpdateGroup(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest

	// ProvisioningApiGroupsUpdateGroupExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiGroupsUpdateGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)
}

// ProvisioningApiGroupsAPIService ProvisioningApiGroupsAPI service
type ProvisioningApiGroupsAPIService service

type ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	groupid *string
	oCSAPIRequest *string
	displayname *string
}

// ID of the group
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest) Groupid(groupid string) ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest {
	r.groupid = &groupid
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Display name of the group
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest) Displayname(displayname string) ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest {
	r.displayname = &displayname
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsAddGroupExecute(r)
}

/*
ProvisioningApiGroupsAddGroup Create a new group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsAddGroup(ctx context.Context) ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsAddGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsAddGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsAddGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupid == nil {
		return localVarReturnValue, nil, reportError("groupid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	if r.displayname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayname", r.displayname, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	groupId string
	oCSAPIRequest *string
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsDeleteGroupExecute(r)
}

/*
ProvisioningApiGroupsDeleteGroup Delete a group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsDeleteGroup(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsDeleteGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsDeleteGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsDeleteGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	groupId string
	oCSAPIRequest *string
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest) Execute() (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupExecute(r)
}

/*
ProvisioningApiGroupsGetGroup Get a list of users in the specified group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest

Deprecated
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroup(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsers200Response
// Deprecated
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsGetGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	groupId string
	oCSAPIRequest *string
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest) Execute() (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupUsersExecute(r)
}

/*
ProvisioningApiGroupsGetGroupUsers Get a list of users in the specified group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroupUsers(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsers200Response
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroupUsersExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsGetGroupUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	groupId string
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest) Search(search string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest) Limit(limit int64) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest) Offset(offset int64) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest {
	r.offset = &offset
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest) Execute() (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupUsersDetailsExecute(r)
}

/*
ProvisioningApiGroupsGetGroupUsersDetails Get a list of users details in the specified group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroupUsersDetails(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsersDetails200Response
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroupUsersDetailsExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupUsersDetailsRequest) (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsersDetails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsGetGroupUsersDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}/users/details"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest) Search(search string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest) Limit(limit int64) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest) Offset(offset int64) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest {
	r.offset = &offset
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest) Execute() (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupsExecute(r)
}

/*
ProvisioningApiGroupsGetGroups Get a list of groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroups(ctx context.Context) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroups200Response
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroupsExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsRequest) (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsGetGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest) Search(search string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest) Limit(limit int64) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest) Offset(offset int64) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest {
	r.offset = &offset
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest) Execute() (*ProvisioningApiGroupsGetGroupsDetails200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupsDetailsExecute(r)
}

/*
ProvisioningApiGroupsGetGroupsDetails Get a list of groups details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroupsDetails(ctx context.Context) ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupsDetails200Response
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetGroupsDetailsExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetGroupsDetailsRequest) (*ProvisioningApiGroupsGetGroupsDetails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupsDetails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsGetGroupsDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	groupId string
	oCSAPIRequest *string
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetSubAdminsOfGroupExecute(r)
}

/*
ProvisioningApiGroupsGetSubAdminsOfGroup Get the list of user IDs that are a subadmin of the group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetSubAdminsOfGroup(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsGetSubAdminsOfGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsGetSubAdminsOfGroupRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsGetSubAdminsOfGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}/subadmins"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest struct {
	ctx context.Context
	ApiService ProvisioningApiGroupsAPI
	key *string
	value *string
	groupId string
	oCSAPIRequest *string
}

// Key to update, only &#39;displayname&#39;
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest) Key(key string) ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest {
	r.key = &key
	return r
}

// New value for the key
func (r ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest) Value(value string) ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest {
	r.value = &value
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsUpdateGroupExecute(r)
}

/*
ProvisioningApiGroupsUpdateGroup Update a group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest
*/
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsUpdateGroup(ctx context.Context, groupId string) ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest {
	return ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiGroupsAPIService) ProvisioningApiGroupsUpdateGroupExecute(r ProvisioningApiGroupsAPIProvisioningApiGroupsUpdateGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsAPIService.ProvisioningApiGroupsUpdateGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.key == nil {
		return localVarReturnValue, nil, reportError("key is required and must be specified")
	}
	if r.value == nil {
		return localVarReturnValue, nil, reportError("value is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
