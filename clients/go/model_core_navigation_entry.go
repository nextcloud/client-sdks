/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the CoreNavigationEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreNavigationEntry{}

// CoreNavigationEntry struct for CoreNavigationEntry
type CoreNavigationEntry struct {
	Id string `json:"id"`
	Order CoreNavigationEntryOrder `json:"order"`
	Href string `json:"href"`
	Icon string `json:"icon"`
	Type string `json:"type"`
	Name string `json:"name"`
	Active bool `json:"active"`
	Classes string `json:"classes"`
	Unread int64 `json:"unread"`
	AdditionalProperties map[string]interface{}
}

type _CoreNavigationEntry CoreNavigationEntry

// NewCoreNavigationEntry instantiates a new CoreNavigationEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreNavigationEntry(id string, order CoreNavigationEntryOrder, href string, icon string, type_ string, name string, active bool, classes string, unread int64) *CoreNavigationEntry {
	this := CoreNavigationEntry{}
	this.Id = id
	this.Order = order
	this.Href = href
	this.Icon = icon
	this.Type = type_
	this.Name = name
	this.Active = active
	this.Classes = classes
	this.Unread = unread
	return &this
}

// NewCoreNavigationEntryWithDefaults instantiates a new CoreNavigationEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreNavigationEntryWithDefaults() *CoreNavigationEntry {
	this := CoreNavigationEntry{}
	return &this
}

// GetId returns the Id field value
func (o *CoreNavigationEntry) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CoreNavigationEntry) SetId(v string) {
	o.Id = v
}

// GetOrder returns the Order field value
func (o *CoreNavigationEntry) GetOrder() CoreNavigationEntryOrder {
	if o == nil {
		var ret CoreNavigationEntryOrder
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetOrderOk() (*CoreNavigationEntryOrder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *CoreNavigationEntry) SetOrder(v CoreNavigationEntryOrder) {
	o.Order = v
}

// GetHref returns the Href field value
func (o *CoreNavigationEntry) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *CoreNavigationEntry) SetHref(v string) {
	o.Href = v
}

// GetIcon returns the Icon field value
func (o *CoreNavigationEntry) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *CoreNavigationEntry) SetIcon(v string) {
	o.Icon = v
}

// GetType returns the Type field value
func (o *CoreNavigationEntry) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CoreNavigationEntry) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *CoreNavigationEntry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CoreNavigationEntry) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value
func (o *CoreNavigationEntry) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *CoreNavigationEntry) SetActive(v bool) {
	o.Active = v
}

// GetClasses returns the Classes field value
func (o *CoreNavigationEntry) GetClasses() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetClassesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Classes, true
}

// SetClasses sets field value
func (o *CoreNavigationEntry) SetClasses(v string) {
	o.Classes = v
}

// GetUnread returns the Unread field value
func (o *CoreNavigationEntry) GetUnread() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Unread
}

// GetUnreadOk returns a tuple with the Unread field value
// and a boolean to check if the value has been set.
func (o *CoreNavigationEntry) GetUnreadOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unread, true
}

// SetUnread sets field value
func (o *CoreNavigationEntry) SetUnread(v int64) {
	o.Unread = v
}

func (o CoreNavigationEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreNavigationEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["order"] = o.Order
	toSerialize["href"] = o.Href
	toSerialize["icon"] = o.Icon
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["active"] = o.Active
	toSerialize["classes"] = o.Classes
	toSerialize["unread"] = o.Unread

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreNavigationEntry) UnmarshalJSON(bytes []byte) (err error) {
	varCoreNavigationEntry := _CoreNavigationEntry{}

	if err = json.Unmarshal(bytes, &varCoreNavigationEntry); err == nil {
		*o = CoreNavigationEntry(varCoreNavigationEntry)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "order")
		delete(additionalProperties, "href")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "active")
		delete(additionalProperties, "classes")
		delete(additionalProperties, "unread")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreNavigationEntry struct {
	value *CoreNavigationEntry
	isSet bool
}

func (v NullableCoreNavigationEntry) Get() *CoreNavigationEntry {
	return v.value
}

func (v *NullableCoreNavigationEntry) Set(val *CoreNavigationEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreNavigationEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreNavigationEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreNavigationEntry(val *CoreNavigationEntry) *NullableCoreNavigationEntry {
	return &NullableCoreNavigationEntry{value: val, isSet: true}
}

func (v NullableCoreNavigationEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreNavigationEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


