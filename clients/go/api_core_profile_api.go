/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CoreProfileApiAPI interface {

	/*
	CoreProfileApiSetVisibility Update the visibility of a parameter

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param targetUserId ID of the user
	@return CoreProfileApiAPICoreProfileApiSetVisibilityRequest
	*/
	CoreProfileApiSetVisibility(ctx context.Context, targetUserId string) CoreProfileApiAPICoreProfileApiSetVisibilityRequest

	// CoreProfileApiSetVisibilityExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	CoreProfileApiSetVisibilityExecute(r CoreProfileApiAPICoreProfileApiSetVisibilityRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)
}

// CoreProfileApiAPIService CoreProfileApiAPI service
type CoreProfileApiAPIService service

type CoreProfileApiAPICoreProfileApiSetVisibilityRequest struct {
	ctx context.Context
	ApiService CoreProfileApiAPI
	paramId *string
	visibility *string
	targetUserId string
	oCSAPIRequest *string
}

// ID of the parameter
func (r CoreProfileApiAPICoreProfileApiSetVisibilityRequest) ParamId(paramId string) CoreProfileApiAPICoreProfileApiSetVisibilityRequest {
	r.paramId = &paramId
	return r
}

// New visibility
func (r CoreProfileApiAPICoreProfileApiSetVisibilityRequest) Visibility(visibility string) CoreProfileApiAPICoreProfileApiSetVisibilityRequest {
	r.visibility = &visibility
	return r
}

func (r CoreProfileApiAPICoreProfileApiSetVisibilityRequest) OCSAPIRequest(oCSAPIRequest string) CoreProfileApiAPICoreProfileApiSetVisibilityRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreProfileApiAPICoreProfileApiSetVisibilityRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.CoreProfileApiSetVisibilityExecute(r)
}

/*
CoreProfileApiSetVisibility Update the visibility of a parameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetUserId ID of the user
 @return CoreProfileApiAPICoreProfileApiSetVisibilityRequest
*/
func (a *CoreProfileApiAPIService) CoreProfileApiSetVisibility(ctx context.Context, targetUserId string) CoreProfileApiAPICoreProfileApiSetVisibilityRequest {
	return CoreProfileApiAPICoreProfileApiSetVisibilityRequest{
		ApiService: a,
		ctx: ctx,
		targetUserId: targetUserId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *CoreProfileApiAPIService) CoreProfileApiSetVisibilityExecute(r CoreProfileApiAPICoreProfileApiSetVisibilityRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreProfileApiAPIService.CoreProfileApiSetVisibility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/profile/{targetUserId}"
	localVarPath = strings.Replace(localVarPath, "{"+"targetUserId"+"}", url.PathEscape(parameterValueToString(r.targetUserId, "targetUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paramId == nil {
		return localVarReturnValue, nil, reportError("paramId is required and must be specified")
	}
	if r.visibility == nil {
		return localVarReturnValue, nil, reportError("visibility is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "paramId", r.paramId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "visibility", r.visibility, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
