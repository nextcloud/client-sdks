/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type FilesSharingPublicPreviewAPI interface {

	/*
	FilesSharingPublicPreviewDirectLink Get a direct link preview for a shared file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param token Token of the share
	@return FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest
	*/
	FilesSharingPublicPreviewDirectLink(ctx context.Context, token string) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest

	// FilesSharingPublicPreviewDirectLinkExecute executes the request
	//  @return *os.File
	FilesSharingPublicPreviewDirectLinkExecute(r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest) (*os.File, *http.Response, error)

	/*
	FilesSharingPublicPreviewGetPreview Get a preview for a shared file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param token Token of the share
	@return FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest
	*/
	FilesSharingPublicPreviewGetPreview(ctx context.Context, token string) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest

	// FilesSharingPublicPreviewGetPreviewExecute executes the request
	//  @return *os.File
	FilesSharingPublicPreviewGetPreviewExecute(r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest) (*os.File, *http.Response, error)
}

// FilesSharingPublicPreviewAPIService FilesSharingPublicPreviewAPI service
type FilesSharingPublicPreviewAPIService service

type FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest struct {
	ctx context.Context
	ApiService FilesSharingPublicPreviewAPI
	token string
	oCSAPIRequest *string
}

func (r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest) OCSAPIRequest(oCSAPIRequest string) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FilesSharingPublicPreviewDirectLinkExecute(r)
}

/*
FilesSharingPublicPreviewDirectLink Get a direct link preview for a shared file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Token of the share
 @return FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest
*/
func (a *FilesSharingPublicPreviewAPIService) FilesSharingPublicPreviewDirectLink(ctx context.Context, token string) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest {
	return FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return *os.File
func (a *FilesSharingPublicPreviewAPIService) FilesSharingPublicPreviewDirectLinkExecute(r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewDirectLinkRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesSharingPublicPreviewAPIService.FilesSharingPublicPreviewDirectLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/s/{token}/preview"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest struct {
	ctx context.Context
	ApiService FilesSharingPublicPreviewAPI
	token string
	oCSAPIRequest *string
	file *string
	x *int64
	y *int64
	a *int32
}

func (r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest) OCSAPIRequest(oCSAPIRequest string) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// File in the share
func (r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest) File(file string) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest {
	r.file = &file
	return r
}

// Width of the preview
func (r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest) X(x int64) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest {
	r.x = &x
	return r
}

// Height of the preview
func (r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest) Y(y int64) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest {
	r.y = &y
	return r
}

// Whether to not crop the preview
func (r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest) A(a int32) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest {
	r.a = &a
	return r
}

func (r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FilesSharingPublicPreviewGetPreviewExecute(r)
}

/*
FilesSharingPublicPreviewGetPreview Get a preview for a shared file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Token of the share
 @return FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest
*/
func (a *FilesSharingPublicPreviewAPIService) FilesSharingPublicPreviewGetPreview(ctx context.Context, token string) FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest {
	return FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return *os.File
func (a *FilesSharingPublicPreviewAPIService) FilesSharingPublicPreviewGetPreviewExecute(r FilesSharingPublicPreviewAPIFilesSharingPublicPreviewGetPreviewRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesSharingPublicPreviewAPIService.FilesSharingPublicPreviewGetPreview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/files_sharing/publicpreview/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.file != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file", r.file, "")
	}
	if r.x != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "x", r.x, "")
	}
	if r.y != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "y", r.y, "")
	}
	if r.a != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "a", r.a, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
