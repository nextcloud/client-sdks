/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesSharingCapabilitiesFilesSharingFederation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesSharingCapabilitiesFilesSharingFederation{}

// FilesSharingCapabilitiesFilesSharingFederation struct for FilesSharingCapabilitiesFilesSharingFederation
type FilesSharingCapabilitiesFilesSharingFederation struct {
	Outgoing bool `json:"outgoing"`
	Incoming bool `json:"incoming"`
	ExpireDate FilesSharingCapabilitiesFilesSharingUserExpireDate `json:"expire_date"`
	ExpireDateSupported FilesSharingCapabilitiesFilesSharingUserExpireDate `json:"expire_date_supported"`
	AdditionalProperties map[string]interface{}
}

type _FilesSharingCapabilitiesFilesSharingFederation FilesSharingCapabilitiesFilesSharingFederation

// NewFilesSharingCapabilitiesFilesSharingFederation instantiates a new FilesSharingCapabilitiesFilesSharingFederation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesSharingCapabilitiesFilesSharingFederation(outgoing bool, incoming bool, expireDate FilesSharingCapabilitiesFilesSharingUserExpireDate, expireDateSupported FilesSharingCapabilitiesFilesSharingUserExpireDate) *FilesSharingCapabilitiesFilesSharingFederation {
	this := FilesSharingCapabilitiesFilesSharingFederation{}
	this.Outgoing = outgoing
	this.Incoming = incoming
	this.ExpireDate = expireDate
	this.ExpireDateSupported = expireDateSupported
	return &this
}

// NewFilesSharingCapabilitiesFilesSharingFederationWithDefaults instantiates a new FilesSharingCapabilitiesFilesSharingFederation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesSharingCapabilitiesFilesSharingFederationWithDefaults() *FilesSharingCapabilitiesFilesSharingFederation {
	this := FilesSharingCapabilitiesFilesSharingFederation{}
	return &this
}

// GetOutgoing returns the Outgoing field value
func (o *FilesSharingCapabilitiesFilesSharingFederation) GetOutgoing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Outgoing
}

// GetOutgoingOk returns a tuple with the Outgoing field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingFederation) GetOutgoingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outgoing, true
}

// SetOutgoing sets field value
func (o *FilesSharingCapabilitiesFilesSharingFederation) SetOutgoing(v bool) {
	o.Outgoing = v
}

// GetIncoming returns the Incoming field value
func (o *FilesSharingCapabilitiesFilesSharingFederation) GetIncoming() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Incoming
}

// GetIncomingOk returns a tuple with the Incoming field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingFederation) GetIncomingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Incoming, true
}

// SetIncoming sets field value
func (o *FilesSharingCapabilitiesFilesSharingFederation) SetIncoming(v bool) {
	o.Incoming = v
}

// GetExpireDate returns the ExpireDate field value
func (o *FilesSharingCapabilitiesFilesSharingFederation) GetExpireDate() FilesSharingCapabilitiesFilesSharingUserExpireDate {
	if o == nil {
		var ret FilesSharingCapabilitiesFilesSharingUserExpireDate
		return ret
	}

	return o.ExpireDate
}

// GetExpireDateOk returns a tuple with the ExpireDate field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingFederation) GetExpireDateOk() (*FilesSharingCapabilitiesFilesSharingUserExpireDate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpireDate, true
}

// SetExpireDate sets field value
func (o *FilesSharingCapabilitiesFilesSharingFederation) SetExpireDate(v FilesSharingCapabilitiesFilesSharingUserExpireDate) {
	o.ExpireDate = v
}

// GetExpireDateSupported returns the ExpireDateSupported field value
func (o *FilesSharingCapabilitiesFilesSharingFederation) GetExpireDateSupported() FilesSharingCapabilitiesFilesSharingUserExpireDate {
	if o == nil {
		var ret FilesSharingCapabilitiesFilesSharingUserExpireDate
		return ret
	}

	return o.ExpireDateSupported
}

// GetExpireDateSupportedOk returns a tuple with the ExpireDateSupported field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharingFederation) GetExpireDateSupportedOk() (*FilesSharingCapabilitiesFilesSharingUserExpireDate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpireDateSupported, true
}

// SetExpireDateSupported sets field value
func (o *FilesSharingCapabilitiesFilesSharingFederation) SetExpireDateSupported(v FilesSharingCapabilitiesFilesSharingUserExpireDate) {
	o.ExpireDateSupported = v
}

func (o FilesSharingCapabilitiesFilesSharingFederation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesSharingCapabilitiesFilesSharingFederation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["outgoing"] = o.Outgoing
	toSerialize["incoming"] = o.Incoming
	toSerialize["expire_date"] = o.ExpireDate
	toSerialize["expire_date_supported"] = o.ExpireDateSupported

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesSharingCapabilitiesFilesSharingFederation) UnmarshalJSON(bytes []byte) (err error) {
	varFilesSharingCapabilitiesFilesSharingFederation := _FilesSharingCapabilitiesFilesSharingFederation{}

	if err = json.Unmarshal(bytes, &varFilesSharingCapabilitiesFilesSharingFederation); err == nil {
		*o = FilesSharingCapabilitiesFilesSharingFederation(varFilesSharingCapabilitiesFilesSharingFederation)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "outgoing")
		delete(additionalProperties, "incoming")
		delete(additionalProperties, "expire_date")
		delete(additionalProperties, "expire_date_supported")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesSharingCapabilitiesFilesSharingFederation struct {
	value *FilesSharingCapabilitiesFilesSharingFederation
	isSet bool
}

func (v NullableFilesSharingCapabilitiesFilesSharingFederation) Get() *FilesSharingCapabilitiesFilesSharingFederation {
	return v.value
}

func (v *NullableFilesSharingCapabilitiesFilesSharingFederation) Set(val *FilesSharingCapabilitiesFilesSharingFederation) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingCapabilitiesFilesSharingFederation) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingCapabilitiesFilesSharingFederation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingCapabilitiesFilesSharingFederation(val *FilesSharingCapabilitiesFilesSharingFederation) *NullableFilesSharingCapabilitiesFilesSharingFederation {
	return &NullableFilesSharingCapabilitiesFilesSharingFederation{value: val, isSet: true}
}

func (v NullableFilesSharingCapabilitiesFilesSharingFederation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingCapabilitiesFilesSharingFederation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


