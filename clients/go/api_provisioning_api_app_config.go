/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ProvisioningApiAppConfigAPI interface {

	/*
	ProvisioningApiAppConfigDeleteKey Delete a config key of an app

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@param key Key to delete
	@return ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest
	*/
	ProvisioningApiAppConfigDeleteKey(ctx context.Context, app string, key string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest

	// ProvisioningApiAppConfigDeleteKeyExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiAppConfigDeleteKeyExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiAppConfigGetApps Get a list of apps

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest
	*/
	ProvisioningApiAppConfigGetApps(ctx context.Context) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest

	// ProvisioningApiAppConfigGetAppsExecute executes the request
	//  @return ProvisioningApiAppConfigGetApps200Response
	ProvisioningApiAppConfigGetAppsExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest) (*ProvisioningApiAppConfigGetApps200Response, *http.Response, error)

	/*
	ProvisioningApiAppConfigGetKeys Get the config keys of an app

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest
	*/
	ProvisioningApiAppConfigGetKeys(ctx context.Context, app string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest

	// ProvisioningApiAppConfigGetKeysExecute executes the request
	//  @return ProvisioningApiAppConfigGetApps200Response
	ProvisioningApiAppConfigGetKeysExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest) (*ProvisioningApiAppConfigGetApps200Response, *http.Response, error)

	/*
	ProvisioningApiAppConfigGetValue Get a the config value of an app

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@param key Key
	@return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest
	*/
	ProvisioningApiAppConfigGetValue(ctx context.Context, app string, key string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest

	// ProvisioningApiAppConfigGetValueExecute executes the request
	//  @return ProvisioningApiAppConfigGetValue200Response
	ProvisioningApiAppConfigGetValueExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest) (*ProvisioningApiAppConfigGetValue200Response, *http.Response, error)

	/*
	ProvisioningApiAppConfigSetValue Update the config value of an app

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@param key Key to update
	@return ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest
	*/
	ProvisioningApiAppConfigSetValue(ctx context.Context, app string, key string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest

	// ProvisioningApiAppConfigSetValueExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiAppConfigSetValueExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)
}

// ProvisioningApiAppConfigAPIService ProvisioningApiAppConfigAPI service
type ProvisioningApiAppConfigAPIService service

type ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppConfigAPI
	app string
	key string
	oCSAPIRequest *string
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppConfigDeleteKeyExecute(r)
}

/*
ProvisioningApiAppConfigDeleteKey Delete a config key of an app

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @param key Key to delete
 @return ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest
*/
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigDeleteKey(ctx context.Context, app string, key string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest {
	return ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
		key: key,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigDeleteKeyExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigDeleteKeyRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppConfigAPIService.ProvisioningApiAppConfigDeleteKey")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppConfigAPI
	oCSAPIRequest *string
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest) Execute() (*ProvisioningApiAppConfigGetApps200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppConfigGetAppsExecute(r)
}

/*
ProvisioningApiAppConfigGetApps Get a list of apps

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest
*/
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigGetApps(ctx context.Context) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest {
	return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiAppConfigGetApps200Response
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigGetAppsExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetAppsRequest) (*ProvisioningApiAppConfigGetApps200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiAppConfigGetApps200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppConfigAPIService.ProvisioningApiAppConfigGetApps")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/provisioning_api/api/v1/config/apps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppConfigAPI
	app string
	oCSAPIRequest *string
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest) Execute() (*ProvisioningApiAppConfigGetApps200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppConfigGetKeysExecute(r)
}

/*
ProvisioningApiAppConfigGetKeys Get the config keys of an app

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest
*/
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigGetKeys(ctx context.Context, app string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest {
	return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
	}
}

// Execute executes the request
//  @return ProvisioningApiAppConfigGetApps200Response
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigGetKeysExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetKeysRequest) (*ProvisioningApiAppConfigGetApps200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiAppConfigGetApps200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppConfigAPIService.ProvisioningApiAppConfigGetKeys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppConfigAPI
	app string
	key string
	oCSAPIRequest *string
	defaultValue *string
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Default returned value if the value is empty
func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest) DefaultValue(defaultValue string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest {
	r.defaultValue = &defaultValue
	return r
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest) Execute() (*ProvisioningApiAppConfigGetValue200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppConfigGetValueExecute(r)
}

/*
ProvisioningApiAppConfigGetValue Get a the config value of an app

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @param key Key
 @return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest
*/
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigGetValue(ctx context.Context, app string, key string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest {
	return ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
		key: key,
	}
}

// Execute executes the request
//  @return ProvisioningApiAppConfigGetValue200Response
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigGetValueExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigGetValueRequest) (*ProvisioningApiAppConfigGetValue200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiAppConfigGetValue200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppConfigAPIService.ProvisioningApiAppConfigGetValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.defaultValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultValue", r.defaultValue, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppConfigAPI
	value *string
	app string
	key string
	oCSAPIRequest *string
}

// New value for the key
func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest) Value(value string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest {
	r.value = &value
	return r
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppConfigSetValueExecute(r)
}

/*
ProvisioningApiAppConfigSetValue Update the config value of an app

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @param key Key to update
 @return ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest
*/
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigSetValue(ctx context.Context, app string, key string) ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest {
	return ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
		key: key,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiAppConfigAPIService) ProvisioningApiAppConfigSetValueExecute(r ProvisioningApiAppConfigAPIProvisioningApiAppConfigSetValueRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppConfigAPIService.ProvisioningApiAppConfigSetValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.value == nil {
		return localVarReturnValue, nil, reportError("value is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
