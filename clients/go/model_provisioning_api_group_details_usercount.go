/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
	"fmt"
)

// ProvisioningApiGroupDetailsUsercount - struct for ProvisioningApiGroupDetailsUsercount
type ProvisioningApiGroupDetailsUsercount struct {
	Bool *bool
	Int64 *int64
}

// boolAsProvisioningApiGroupDetailsUsercount is a convenience function that returns bool wrapped in ProvisioningApiGroupDetailsUsercount
func BoolAsProvisioningApiGroupDetailsUsercount(v *bool) ProvisioningApiGroupDetailsUsercount {
	return ProvisioningApiGroupDetailsUsercount{
		Bool: v,
	}
}

// int64AsProvisioningApiGroupDetailsUsercount is a convenience function that returns int64 wrapped in ProvisioningApiGroupDetailsUsercount
func Int64AsProvisioningApiGroupDetailsUsercount(v *int64) ProvisioningApiGroupDetailsUsercount {
	return ProvisioningApiGroupDetailsUsercount{
		Int64: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProvisioningApiGroupDetailsUsercount) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Int64
	err = newStrictDecoder(data).Decode(&dst.Int64)
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			match++
		}
	} else {
		dst.Int64 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.Int64 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProvisioningApiGroupDetailsUsercount)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProvisioningApiGroupDetailsUsercount)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProvisioningApiGroupDetailsUsercount) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProvisioningApiGroupDetailsUsercount) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Int64 != nil {
		return obj.Int64
	}

	// all schemas are nil
	return nil
}

type NullableProvisioningApiGroupDetailsUsercount struct {
	value *ProvisioningApiGroupDetailsUsercount
	isSet bool
}

func (v NullableProvisioningApiGroupDetailsUsercount) Get() *ProvisioningApiGroupDetailsUsercount {
	return v.value
}

func (v *NullableProvisioningApiGroupDetailsUsercount) Set(val *ProvisioningApiGroupDetailsUsercount) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningApiGroupDetailsUsercount) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningApiGroupDetailsUsercount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningApiGroupDetailsUsercount(val *ProvisioningApiGroupDetailsUsercount) *NullableProvisioningApiGroupDetailsUsercount {
	return &NullableProvisioningApiGroupDetailsUsercount{value: val, isSet: true}
}

func (v NullableProvisioningApiGroupDetailsUsercount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningApiGroupDetailsUsercount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


