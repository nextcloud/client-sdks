/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type ThemingIconAPI interface {

	/*
	ThemingIconGetFavicon Return a 32x32 favicon as png

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@return ThemingIconAPIThemingIconGetFaviconRequest
	*/
	ThemingIconGetFavicon(ctx context.Context, app string) ThemingIconAPIThemingIconGetFaviconRequest

	// ThemingIconGetFaviconExecute executes the request
	//  @return *os.File
	ThemingIconGetFaviconExecute(r ThemingIconAPIThemingIconGetFaviconRequest) (*os.File, *http.Response, error)

	/*
	ThemingIconGetThemedIcon Get a themed icon

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@param image image file name (svg required)
	@return ThemingIconAPIThemingIconGetThemedIconRequest
	*/
	ThemingIconGetThemedIcon(ctx context.Context, app string, image string) ThemingIconAPIThemingIconGetThemedIconRequest

	// ThemingIconGetThemedIconExecute executes the request
	//  @return *os.File
	ThemingIconGetThemedIconExecute(r ThemingIconAPIThemingIconGetThemedIconRequest) (*os.File, *http.Response, error)

	/*
	ThemingIconGetTouchIcon Return a 512x512 icon for touch devices

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@return ThemingIconAPIThemingIconGetTouchIconRequest
	*/
	ThemingIconGetTouchIcon(ctx context.Context, app string) ThemingIconAPIThemingIconGetTouchIconRequest

	// ThemingIconGetTouchIconExecute executes the request
	//  @return *os.File
	ThemingIconGetTouchIconExecute(r ThemingIconAPIThemingIconGetTouchIconRequest) (*os.File, *http.Response, error)
}

// ThemingIconAPIService ThemingIconAPI service
type ThemingIconAPIService service

type ThemingIconAPIThemingIconGetFaviconRequest struct {
	ctx context.Context
	ApiService ThemingIconAPI
	app string
}

func (r ThemingIconAPIThemingIconGetFaviconRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.ThemingIconGetFaviconExecute(r)
}

/*
ThemingIconGetFavicon Return a 32x32 favicon as png

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @return ThemingIconAPIThemingIconGetFaviconRequest
*/
func (a *ThemingIconAPIService) ThemingIconGetFavicon(ctx context.Context, app string) ThemingIconAPIThemingIconGetFaviconRequest {
	return ThemingIconAPIThemingIconGetFaviconRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ThemingIconAPIService) ThemingIconGetFaviconExecute(r ThemingIconAPIThemingIconGetFaviconRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingIconAPIService.ThemingIconGetFavicon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/favicon/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/x-icon"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThemingIconAPIThemingIconGetThemedIconRequest struct {
	ctx context.Context
	ApiService ThemingIconAPI
	app string
	image string
}

func (r ThemingIconAPIThemingIconGetThemedIconRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.ThemingIconGetThemedIconExecute(r)
}

/*
ThemingIconGetThemedIcon Get a themed icon

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @param image image file name (svg required)
 @return ThemingIconAPIThemingIconGetThemedIconRequest
*/
func (a *ThemingIconAPIService) ThemingIconGetThemedIcon(ctx context.Context, app string, image string) ThemingIconAPIThemingIconGetThemedIconRequest {
	return ThemingIconAPIThemingIconGetThemedIconRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
		image: image,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ThemingIconAPIService) ThemingIconGetThemedIconExecute(r ThemingIconAPIThemingIconGetThemedIconRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingIconAPIService.ThemingIconGetThemedIcon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/img/{app}/{image}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"image"+"}", url.PathEscape(parameterValueToString(r.image, "image")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/svg+xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ThemingIconAPIThemingIconGetTouchIconRequest struct {
	ctx context.Context
	ApiService ThemingIconAPI
	app string
}

func (r ThemingIconAPIThemingIconGetTouchIconRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.ThemingIconGetTouchIconExecute(r)
}

/*
ThemingIconGetTouchIcon Return a 512x512 icon for touch devices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @return ThemingIconAPIThemingIconGetTouchIconRequest
*/
func (a *ThemingIconAPIService) ThemingIconGetTouchIcon(ctx context.Context, app string) ThemingIconAPIThemingIconGetTouchIconRequest {
	return ThemingIconAPIThemingIconGetTouchIconRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ThemingIconAPIService) ThemingIconGetTouchIconExecute(r ThemingIconAPIThemingIconGetTouchIconRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingIconAPIService.ThemingIconGetTouchIcon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/icon/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/png", "image/x-icon"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
