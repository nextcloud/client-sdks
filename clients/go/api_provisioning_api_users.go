/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type ProvisioningApiUsersAPI interface {

	/*
	ProvisioningApiUsersAddSubAdmin Make a user a subadmin of a group

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest
	*/
	ProvisioningApiUsersAddSubAdmin(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest

	// ProvisioningApiUsersAddSubAdminExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersAddSubAdminExecute(r ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersAddToGroup Add a user to a group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest
	*/
	ProvisioningApiUsersAddToGroup(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest

	// ProvisioningApiUsersAddToGroupExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersAddToGroupExecute(r ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersAddUser Create a new user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest
	*/
	ProvisioningApiUsersAddUser(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest

	// ProvisioningApiUsersAddUserExecute executes the request
	//  @return ProvisioningApiUsersAddUser200Response
	ProvisioningApiUsersAddUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) (*ProvisioningApiUsersAddUser200Response, *http.Response, error)

	/*
	ProvisioningApiUsersDeleteUser Delete a user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest
	*/
	ProvisioningApiUsersDeleteUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest

	// ProvisioningApiUsersDeleteUserExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersDeleteUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersDisableUser Disable a user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest
	*/
	ProvisioningApiUsersDisableUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest

	// ProvisioningApiUsersDisableUserExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersDisableUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersEditUser Update a value of the user's details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest
	*/
	ProvisioningApiUsersEditUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest

	// ProvisioningApiUsersEditUserExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersEditUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersEditUserMultiValue Update multiple values of the user's details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@param collectionName Collection to update
	@return ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest
	*/
	ProvisioningApiUsersEditUserMultiValue(ctx context.Context, userId string, collectionName string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest

	// ProvisioningApiUsersEditUserMultiValueExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersEditUserMultiValueExecute(r ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersEnableUser Enable a user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest
	*/
	ProvisioningApiUsersEnableUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest

	// ProvisioningApiUsersEnableUserExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersEnableUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersGetCurrentUser Get the details of the current user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest
	*/
	ProvisioningApiUsersGetCurrentUser(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest

	// ProvisioningApiUsersGetCurrentUserExecute executes the request
	//  @return ProvisioningApiUsersGetUser200Response
	ProvisioningApiUsersGetCurrentUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest) (*ProvisioningApiUsersGetUser200Response, *http.Response, error)

	/*
	ProvisioningApiUsersGetEditableFields Get a list of fields that are editable for the current user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest
	*/
	ProvisioningApiUsersGetEditableFields(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest

	// ProvisioningApiUsersGetEditableFieldsExecute executes the request
	//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	ProvisioningApiUsersGetEditableFieldsExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error)

	/*
	ProvisioningApiUsersGetEditableFieldsForUser Get a list of fields that are editable for a user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest
	*/
	ProvisioningApiUsersGetEditableFieldsForUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest

	// ProvisioningApiUsersGetEditableFieldsForUserExecute executes the request
	//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	ProvisioningApiUsersGetEditableFieldsForUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error)

	/*
	ProvisioningApiUsersGetUser Get the details of a user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest
	*/
	ProvisioningApiUsersGetUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest

	// ProvisioningApiUsersGetUserExecute executes the request
	//  @return ProvisioningApiUsersGetUser200Response
	ProvisioningApiUsersGetUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest) (*ProvisioningApiUsersGetUser200Response, *http.Response, error)

	/*
	ProvisioningApiUsersGetUserSubAdminGroups Get the groups a user is a subadmin of

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID if the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest
	*/
	ProvisioningApiUsersGetUserSubAdminGroups(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest

	// ProvisioningApiUsersGetUserSubAdminGroupsExecute executes the request
	//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	ProvisioningApiUsersGetUserSubAdminGroupsExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error)

	/*
	ProvisioningApiUsersGetUsers Get a list of users

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest
	*/
	ProvisioningApiUsersGetUsers(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest

	// ProvisioningApiUsersGetUsersExecute executes the request
	//  @return ProvisioningApiGroupsGetGroupUsers200Response
	ProvisioningApiUsersGetUsersExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error)

	/*
	ProvisioningApiUsersGetUsersDetails Get a list of users and their details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest
	*/
	ProvisioningApiUsersGetUsersDetails(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest

	// ProvisioningApiUsersGetUsersDetailsExecute executes the request
	//  @return ProvisioningApiGroupsGetGroupUsersDetails200Response
	ProvisioningApiUsersGetUsersDetailsExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest) (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error)

	/*
	ProvisioningApiUsersGetUsersGroups Get a list of groups the user belongs to

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest
	*/
	ProvisioningApiUsersGetUsersGroups(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest

	// ProvisioningApiUsersGetUsersGroupsExecute executes the request
	//  @return ProvisioningApiGroupsGetGroups200Response
	ProvisioningApiUsersGetUsersGroupsExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest) (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error)

	/*
	ProvisioningApiUsersRemoveFromGroup Remove a user from a group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest
	*/
	ProvisioningApiUsersRemoveFromGroup(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest

	// ProvisioningApiUsersRemoveFromGroupExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersRemoveFromGroupExecute(r ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersRemoveSubAdmin Remove a user from the subadmins of a group

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest
	*/
	ProvisioningApiUsersRemoveSubAdmin(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest

	// ProvisioningApiUsersRemoveSubAdminExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersRemoveSubAdminExecute(r ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersResendWelcomeMessage Resend the welcome message

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID if the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest
	*/
	ProvisioningApiUsersResendWelcomeMessage(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest

	// ProvisioningApiUsersResendWelcomeMessageExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersResendWelcomeMessageExecute(r ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiUsersSearchByPhoneNumbers Search users by their phone numbers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest
	*/
	ProvisioningApiUsersSearchByPhoneNumbers(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest

	// ProvisioningApiUsersSearchByPhoneNumbersExecute executes the request
	//  @return ProvisioningApiUsersSearchByPhoneNumbers200Response
	ProvisioningApiUsersSearchByPhoneNumbersExecute(r ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest) (*ProvisioningApiUsersSearchByPhoneNumbers200Response, *http.Response, error)

	/*
	ProvisioningApiUsersWipeUserDevices Wipe all devices of a user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId ID of the user
	@return ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest
	*/
	ProvisioningApiUsersWipeUserDevices(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest

	// ProvisioningApiUsersWipeUserDevicesExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiUsersWipeUserDevicesExecute(r ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)
}

// ProvisioningApiUsersAPIService ProvisioningApiUsersAPI service
type ProvisioningApiUsersAPIService service

type ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	groupid *string
	userId string
	oCSAPIRequest *string
}

// ID of the group
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest) Groupid(groupid string) ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest {
	r.groupid = &groupid
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersAddSubAdminExecute(r)
}

/*
ProvisioningApiUsersAddSubAdmin Make a user a subadmin of a group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersAddSubAdmin(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersAddSubAdminExecute(r ProvisioningApiUsersAPIProvisioningApiUsersAddSubAdminRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersAddSubAdmin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/subadmins"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupid == nil {
		return localVarReturnValue, nil, reportError("groupid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
	groupid *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// ID of the group
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest) Groupid(groupid string) ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest {
	r.groupid = &groupid
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersAddToGroupExecute(r)
}

/*
ProvisioningApiUsersAddToGroup Add a user to a group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersAddToGroup(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersAddToGroupExecute(r ProvisioningApiUsersAPIProvisioningApiUsersAddToGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersAddToGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.groupid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userid *string
	oCSAPIRequest *string
	password *string
	displayName *string
	email *string
	groups *[]string
	subadmin *[]string
	quota *string
	language *string
	manager *string
}

// ID of the user
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Userid(userid string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.userid = &userid
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Password of the user
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Password(password string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.password = &password
	return r
}

// Display name of the user
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) DisplayName(displayName string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.displayName = &displayName
	return r
}

// Email of the user
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Email(email string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.email = &email
	return r
}

// Groups of the user
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Groups(groups []string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.groups = &groups
	return r
}

// Groups where the user is subadmin
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Subadmin(subadmin []string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.subadmin = &subadmin
	return r
}

// Quota of the user
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Quota(quota string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.quota = &quota
	return r
}

// Language of the user
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Language(language string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.language = &language
	return r
}

// Manager of the user
func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Manager(manager string) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	r.manager = &manager
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) Execute() (*ProvisioningApiUsersAddUser200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersAddUserExecute(r)
}

/*
ProvisioningApiUsersAddUser Create a new user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersAddUser(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiUsersAddUser200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersAddUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersAddUserRequest) (*ProvisioningApiUsersAddUser200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiUsersAddUser200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersAddUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userid == nil {
		return localVarReturnValue, nil, reportError("userid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "userid", r.userid, "")
	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password", r.password, "")
	}
	if r.displayName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayName", r.displayName, "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.groups != nil {
		t := *r.groups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "groups[]", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "groups[]", t, "multi")
		}
	}
	if r.subadmin != nil {
		t := *r.subadmin
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "subadmin[]", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "subadmin[]", t, "multi")
		}
	}
	if r.quota != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quota", r.quota, "")
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.manager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "manager", r.manager, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersDeleteUserExecute(r)
}

/*
ProvisioningApiUsersDeleteUser Delete a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersDeleteUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersDeleteUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersDeleteUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersDeleteUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersDisableUserExecute(r)
}

/*
ProvisioningApiUsersDisableUser Disable a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersDisableUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersDisableUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersDisableUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersDisableUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/disable"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	key *string
	value *string
	userId string
	oCSAPIRequest *string
}

// Key that will be updated
func (r ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest) Key(key string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest {
	r.key = &key
	return r
}

// New value for the key
func (r ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest) Value(value string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest {
	r.value = &value
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersEditUserExecute(r)
}

/*
ProvisioningApiUsersEditUser Update a value of the user's details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersEditUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersEditUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersEditUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersEditUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.key == nil {
		return localVarReturnValue, nil, reportError("key is required and must be specified")
	}
	if r.value == nil {
		return localVarReturnValue, nil, reportError("value is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	key *string
	value *string
	userId string
	collectionName string
	oCSAPIRequest *string
}

// Key that will be updated
func (r ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest) Key(key string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest {
	r.key = &key
	return r
}

// New value for the key
func (r ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest) Value(value string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest {
	r.value = &value
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersEditUserMultiValueExecute(r)
}

/*
ProvisioningApiUsersEditUserMultiValue Update multiple values of the user's details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @param collectionName Collection to update
 @return ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersEditUserMultiValue(ctx context.Context, userId string, collectionName string) ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		collectionName: collectionName,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersEditUserMultiValueExecute(r ProvisioningApiUsersAPIProvisioningApiUsersEditUserMultiValueRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersEditUserMultiValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/{collectionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"collectionName"+"}", url.PathEscape(parameterValueToString(r.collectionName, "collectionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.key == nil {
		return localVarReturnValue, nil, reportError("key is required and must be specified")
	}
	if r.value == nil {
		return localVarReturnValue, nil, reportError("value is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersEnableUserExecute(r)
}

/*
ProvisioningApiUsersEnableUser Enable a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersEnableUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersEnableUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersEnableUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersEnableUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/enable"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest) Execute() (*ProvisioningApiUsersGetUser200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetCurrentUserExecute(r)
}

/*
ProvisioningApiUsersGetCurrentUser Get the details of the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetCurrentUser(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiUsersGetUser200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetCurrentUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetCurrentUserRequest) (*ProvisioningApiUsersGetUser200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiUsersGetUser200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersGetCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetEditableFieldsExecute(r)
}

/*
ProvisioningApiUsersGetEditableFields Get a list of fields that are editable for the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetEditableFields(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetEditableFieldsExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersGetEditableFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/user/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetEditableFieldsForUserExecute(r)
}

/*
ProvisioningApiUsersGetEditableFieldsForUser Get a list of fields that are editable for a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetEditableFieldsForUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetEditableFieldsForUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetEditableFieldsForUserRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersGetEditableFieldsForUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/user/fields/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest) Execute() (*ProvisioningApiUsersGetUser200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUserExecute(r)
}

/*
ProvisioningApiUsersGetUser Get the details of a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUser(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProvisioningApiUsersGetUser200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUserExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUserRequest) (*ProvisioningApiUsersGetUser200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiUsersGetUser200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersGetUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUserSubAdminGroupsExecute(r)
}

/*
ProvisioningApiUsersGetUserSubAdminGroups Get the groups a user is a subadmin of

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID if the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUserSubAdminGroups(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUserSubAdminGroupsExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUserSubAdminGroupsRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersGetUserSubAdminGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/subadmins"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest) Search(search string) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest) Limit(limit int64) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest) Offset(offset int64) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest {
	r.offset = &offset
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest) Execute() (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUsersExecute(r)
}

/*
ProvisioningApiUsersGetUsers Get a list of users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUsers(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsers200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUsersExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersGetUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest) Search(search string) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest) Limit(limit int64) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest) Offset(offset int64) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest {
	r.offset = &offset
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest) Execute() (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUsersDetailsExecute(r)
}

/*
ProvisioningApiUsersGetUsersDetails Get a list of users and their details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUsersDetails(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsersDetails200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUsersDetailsExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersDetailsRequest) (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsersDetails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersGetUsersDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest) Execute() (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUsersGroupsExecute(r)
}

/*
ProvisioningApiUsersGetUsersGroups Get a list of groups the user belongs to

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUsersGroups(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroups200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersGetUsersGroupsExecute(r ProvisioningApiUsersAPIProvisioningApiUsersGetUsersGroupsRequest) (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersGetUsersGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	groupid *string
	userId string
	oCSAPIRequest *string
}

// ID of the group
func (r ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest) Groupid(groupid string) ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest {
	r.groupid = &groupid
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersRemoveFromGroupExecute(r)
}

/*
ProvisioningApiUsersRemoveFromGroup Remove a user from a group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersRemoveFromGroup(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersRemoveFromGroupExecute(r ProvisioningApiUsersAPIProvisioningApiUsersRemoveFromGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersRemoveFromGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupid == nil {
		return localVarReturnValue, nil, reportError("groupid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	groupid *string
	userId string
	oCSAPIRequest *string
}

// ID of the group
func (r ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest) Groupid(groupid string) ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest {
	r.groupid = &groupid
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersRemoveSubAdminExecute(r)
}

/*
ProvisioningApiUsersRemoveSubAdmin Remove a user from the subadmins of a group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersRemoveSubAdmin(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersRemoveSubAdminExecute(r ProvisioningApiUsersAPIProvisioningApiUsersRemoveSubAdminRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersRemoveSubAdmin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/subadmins"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupid == nil {
		return localVarReturnValue, nil, reportError("groupid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersResendWelcomeMessageExecute(r)
}

/*
ProvisioningApiUsersResendWelcomeMessage Resend the welcome message

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID if the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersResendWelcomeMessage(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersResendWelcomeMessageExecute(r ProvisioningApiUsersAPIProvisioningApiUsersResendWelcomeMessageRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersResendWelcomeMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/welcome"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	location *string
	search *string
	oCSAPIRequest *string
}

// Location of the phone number (for country code)
func (r ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest) Location(location string) ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest {
	r.location = &location
	return r
}

// Phone numbers to search for
func (r ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest) Search(search string) ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest {
	r.search = &search
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest) Execute() (*ProvisioningApiUsersSearchByPhoneNumbers200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersSearchByPhoneNumbersExecute(r)
}

/*
ProvisioningApiUsersSearchByPhoneNumbers Search users by their phone numbers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersSearchByPhoneNumbers(ctx context.Context) ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiUsersSearchByPhoneNumbers200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersSearchByPhoneNumbersExecute(r ProvisioningApiUsersAPIProvisioningApiUsersSearchByPhoneNumbersRequest) (*ProvisioningApiUsersSearchByPhoneNumbers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiUsersSearchByPhoneNumbers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersSearchByPhoneNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/search/by-phone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.location == nil {
		return localVarReturnValue, nil, reportError("location is required and must be specified")
	}
	if r.search == nil {
		return localVarReturnValue, nil, reportError("search is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest struct {
	ctx context.Context
	ApiService ProvisioningApiUsersAPI
	userId string
	oCSAPIRequest *string
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersWipeUserDevicesExecute(r)
}

/*
ProvisioningApiUsersWipeUserDevices Wipe all devices of a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest
*/
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersWipeUserDevices(ctx context.Context, userId string) ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest {
	return ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersAPIService) ProvisioningApiUsersWipeUserDevicesExecute(r ProvisioningApiUsersAPIProvisioningApiUsersWipeUserDevicesRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersAPIService.ProvisioningApiUsersWipeUserDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/wipe"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
