/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the UserStatusClearAt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserStatusClearAt{}

// UserStatusClearAt struct for UserStatusClearAt
type UserStatusClearAt struct {
	Type string `json:"type"`
	Time UserStatusClearAtTime `json:"time"`
	AdditionalProperties map[string]interface{}
}

type _UserStatusClearAt UserStatusClearAt

// NewUserStatusClearAt instantiates a new UserStatusClearAt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserStatusClearAt(type_ string, time UserStatusClearAtTime) *UserStatusClearAt {
	this := UserStatusClearAt{}
	this.Type = type_
	this.Time = time
	return &this
}

// NewUserStatusClearAtWithDefaults instantiates a new UserStatusClearAt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserStatusClearAtWithDefaults() *UserStatusClearAt {
	this := UserStatusClearAt{}
	return &this
}

// GetType returns the Type field value
func (o *UserStatusClearAt) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserStatusClearAt) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserStatusClearAt) SetType(v string) {
	o.Type = v
}

// GetTime returns the Time field value
func (o *UserStatusClearAt) GetTime() UserStatusClearAtTime {
	if o == nil {
		var ret UserStatusClearAtTime
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *UserStatusClearAt) GetTimeOk() (*UserStatusClearAtTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *UserStatusClearAt) SetTime(v UserStatusClearAtTime) {
	o.Time = v
}

func (o UserStatusClearAt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserStatusClearAt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["time"] = o.Time

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserStatusClearAt) UnmarshalJSON(bytes []byte) (err error) {
	varUserStatusClearAt := _UserStatusClearAt{}

	if err = json.Unmarshal(bytes, &varUserStatusClearAt); err == nil {
		*o = UserStatusClearAt(varUserStatusClearAt)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "time")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserStatusClearAt struct {
	value *UserStatusClearAt
	isSet bool
}

func (v NullableUserStatusClearAt) Get() *UserStatusClearAt {
	return v.value
}

func (v *NullableUserStatusClearAt) Set(val *UserStatusClearAt) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStatusClearAt) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStatusClearAt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStatusClearAt(val *UserStatusClearAt) *NullableUserStatusClearAt {
	return &NullableUserStatusClearAt{value: val, isSet: true}
}

func (v NullableUserStatusClearAt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStatusClearAt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


