/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type CoreReferenceApiAPI interface {

	/*
	CoreReferenceApiExtract Extract references from a text

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreReferenceApiAPICoreReferenceApiExtractRequest
	*/
	CoreReferenceApiExtract(ctx context.Context) CoreReferenceApiAPICoreReferenceApiExtractRequest

	// CoreReferenceApiExtractExecute executes the request
	//  @return CoreReferenceApiResolveOne200Response
	CoreReferenceApiExtractExecute(r CoreReferenceApiAPICoreReferenceApiExtractRequest) (*CoreReferenceApiResolveOne200Response, *http.Response, error)

	/*
	CoreReferenceApiGetProvidersInfo Get the providers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest
	*/
	CoreReferenceApiGetProvidersInfo(ctx context.Context) CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest

	// CoreReferenceApiGetProvidersInfoExecute executes the request
	//  @return CoreReferenceApiGetProvidersInfo200Response
	CoreReferenceApiGetProvidersInfoExecute(r CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest) (*CoreReferenceApiGetProvidersInfo200Response, *http.Response, error)

	/*
	CoreReferenceApiResolve Resolve multiple references

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreReferenceApiAPICoreReferenceApiResolveRequest
	*/
	CoreReferenceApiResolve(ctx context.Context) CoreReferenceApiAPICoreReferenceApiResolveRequest

	// CoreReferenceApiResolveExecute executes the request
	//  @return CoreReferenceApiResolveOne200Response
	CoreReferenceApiResolveExecute(r CoreReferenceApiAPICoreReferenceApiResolveRequest) (*CoreReferenceApiResolveOne200Response, *http.Response, error)

	/*
	CoreReferenceApiResolveOne Resolve a reference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreReferenceApiAPICoreReferenceApiResolveOneRequest
	*/
	CoreReferenceApiResolveOne(ctx context.Context) CoreReferenceApiAPICoreReferenceApiResolveOneRequest

	// CoreReferenceApiResolveOneExecute executes the request
	//  @return CoreReferenceApiResolveOne200Response
	CoreReferenceApiResolveOneExecute(r CoreReferenceApiAPICoreReferenceApiResolveOneRequest) (*CoreReferenceApiResolveOne200Response, *http.Response, error)

	/*
	CoreReferenceApiTouchProvider Touch a provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param providerId ID of the provider
	@return CoreReferenceApiAPICoreReferenceApiTouchProviderRequest
	*/
	CoreReferenceApiTouchProvider(ctx context.Context, providerId string) CoreReferenceApiAPICoreReferenceApiTouchProviderRequest

	// CoreReferenceApiTouchProviderExecute executes the request
	//  @return CoreReferenceApiTouchProvider200Response
	CoreReferenceApiTouchProviderExecute(r CoreReferenceApiAPICoreReferenceApiTouchProviderRequest) (*CoreReferenceApiTouchProvider200Response, *http.Response, error)
}

// CoreReferenceApiAPIService CoreReferenceApiAPI service
type CoreReferenceApiAPIService service

type CoreReferenceApiAPICoreReferenceApiExtractRequest struct {
	ctx context.Context
	ApiService CoreReferenceApiAPI
	text *string
	oCSAPIRequest *string
	resolve *int32
	limit *int64
}

// Text to extract from
func (r CoreReferenceApiAPICoreReferenceApiExtractRequest) Text(text string) CoreReferenceApiAPICoreReferenceApiExtractRequest {
	r.text = &text
	return r
}

func (r CoreReferenceApiAPICoreReferenceApiExtractRequest) OCSAPIRequest(oCSAPIRequest string) CoreReferenceApiAPICoreReferenceApiExtractRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Resolve the references
func (r CoreReferenceApiAPICoreReferenceApiExtractRequest) Resolve(resolve int32) CoreReferenceApiAPICoreReferenceApiExtractRequest {
	r.resolve = &resolve
	return r
}

// Maximum amount of references to extract
func (r CoreReferenceApiAPICoreReferenceApiExtractRequest) Limit(limit int64) CoreReferenceApiAPICoreReferenceApiExtractRequest {
	r.limit = &limit
	return r
}

func (r CoreReferenceApiAPICoreReferenceApiExtractRequest) Execute() (*CoreReferenceApiResolveOne200Response, *http.Response, error) {
	return r.ApiService.CoreReferenceApiExtractExecute(r)
}

/*
CoreReferenceApiExtract Extract references from a text

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreReferenceApiAPICoreReferenceApiExtractRequest
*/
func (a *CoreReferenceApiAPIService) CoreReferenceApiExtract(ctx context.Context) CoreReferenceApiAPICoreReferenceApiExtractRequest {
	return CoreReferenceApiAPICoreReferenceApiExtractRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreReferenceApiResolveOne200Response
func (a *CoreReferenceApiAPIService) CoreReferenceApiExtractExecute(r CoreReferenceApiAPICoreReferenceApiExtractRequest) (*CoreReferenceApiResolveOne200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreReferenceApiResolveOne200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreReferenceApiAPIService.CoreReferenceApiExtract")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/references/extract"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.text == nil {
		return localVarReturnValue, nil, reportError("text is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
	if r.resolve != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolve", r.resolve, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest struct {
	ctx context.Context
	ApiService CoreReferenceApiAPI
	oCSAPIRequest *string
}

func (r CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest) OCSAPIRequest(oCSAPIRequest string) CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest) Execute() (*CoreReferenceApiGetProvidersInfo200Response, *http.Response, error) {
	return r.ApiService.CoreReferenceApiGetProvidersInfoExecute(r)
}

/*
CoreReferenceApiGetProvidersInfo Get the providers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest
*/
func (a *CoreReferenceApiAPIService) CoreReferenceApiGetProvidersInfo(ctx context.Context) CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest {
	return CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreReferenceApiGetProvidersInfo200Response
func (a *CoreReferenceApiAPIService) CoreReferenceApiGetProvidersInfoExecute(r CoreReferenceApiAPICoreReferenceApiGetProvidersInfoRequest) (*CoreReferenceApiGetProvidersInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreReferenceApiGetProvidersInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreReferenceApiAPIService.CoreReferenceApiGetProvidersInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/references/providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreReferenceApiAPICoreReferenceApiResolveRequest struct {
	ctx context.Context
	ApiService CoreReferenceApiAPI
	references *[]string
	oCSAPIRequest *string
	limit *int64
}

// References to resolve
func (r CoreReferenceApiAPICoreReferenceApiResolveRequest) References(references []string) CoreReferenceApiAPICoreReferenceApiResolveRequest {
	r.references = &references
	return r
}

func (r CoreReferenceApiAPICoreReferenceApiResolveRequest) OCSAPIRequest(oCSAPIRequest string) CoreReferenceApiAPICoreReferenceApiResolveRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Maximum amount of references to resolve
func (r CoreReferenceApiAPICoreReferenceApiResolveRequest) Limit(limit int64) CoreReferenceApiAPICoreReferenceApiResolveRequest {
	r.limit = &limit
	return r
}

func (r CoreReferenceApiAPICoreReferenceApiResolveRequest) Execute() (*CoreReferenceApiResolveOne200Response, *http.Response, error) {
	return r.ApiService.CoreReferenceApiResolveExecute(r)
}

/*
CoreReferenceApiResolve Resolve multiple references

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreReferenceApiAPICoreReferenceApiResolveRequest
*/
func (a *CoreReferenceApiAPIService) CoreReferenceApiResolve(ctx context.Context) CoreReferenceApiAPICoreReferenceApiResolveRequest {
	return CoreReferenceApiAPICoreReferenceApiResolveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreReferenceApiResolveOne200Response
func (a *CoreReferenceApiAPIService) CoreReferenceApiResolveExecute(r CoreReferenceApiAPICoreReferenceApiResolveRequest) (*CoreReferenceApiResolveOne200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreReferenceApiResolveOne200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreReferenceApiAPIService.CoreReferenceApiResolve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/references/resolve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.references == nil {
		return localVarReturnValue, nil, reportError("references is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	{
		t := *r.references
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "references[]", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "references[]", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreReferenceApiAPICoreReferenceApiResolveOneRequest struct {
	ctx context.Context
	ApiService CoreReferenceApiAPI
	reference *string
	oCSAPIRequest *string
}

// Reference to resolve
func (r CoreReferenceApiAPICoreReferenceApiResolveOneRequest) Reference(reference string) CoreReferenceApiAPICoreReferenceApiResolveOneRequest {
	r.reference = &reference
	return r
}

func (r CoreReferenceApiAPICoreReferenceApiResolveOneRequest) OCSAPIRequest(oCSAPIRequest string) CoreReferenceApiAPICoreReferenceApiResolveOneRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreReferenceApiAPICoreReferenceApiResolveOneRequest) Execute() (*CoreReferenceApiResolveOne200Response, *http.Response, error) {
	return r.ApiService.CoreReferenceApiResolveOneExecute(r)
}

/*
CoreReferenceApiResolveOne Resolve a reference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreReferenceApiAPICoreReferenceApiResolveOneRequest
*/
func (a *CoreReferenceApiAPIService) CoreReferenceApiResolveOne(ctx context.Context) CoreReferenceApiAPICoreReferenceApiResolveOneRequest {
	return CoreReferenceApiAPICoreReferenceApiResolveOneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreReferenceApiResolveOne200Response
func (a *CoreReferenceApiAPIService) CoreReferenceApiResolveOneExecute(r CoreReferenceApiAPICoreReferenceApiResolveOneRequest) (*CoreReferenceApiResolveOne200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreReferenceApiResolveOne200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreReferenceApiAPIService.CoreReferenceApiResolveOne")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/references/resolve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reference == nil {
		return localVarReturnValue, nil, reportError("reference is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "reference", r.reference, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreReferenceApiAPICoreReferenceApiTouchProviderRequest struct {
	ctx context.Context
	ApiService CoreReferenceApiAPI
	providerId string
	oCSAPIRequest *string
	timestamp *int64
}

func (r CoreReferenceApiAPICoreReferenceApiTouchProviderRequest) OCSAPIRequest(oCSAPIRequest string) CoreReferenceApiAPICoreReferenceApiTouchProviderRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Timestamp of the last usage
func (r CoreReferenceApiAPICoreReferenceApiTouchProviderRequest) Timestamp(timestamp int64) CoreReferenceApiAPICoreReferenceApiTouchProviderRequest {
	r.timestamp = &timestamp
	return r
}

func (r CoreReferenceApiAPICoreReferenceApiTouchProviderRequest) Execute() (*CoreReferenceApiTouchProvider200Response, *http.Response, error) {
	return r.ApiService.CoreReferenceApiTouchProviderExecute(r)
}

/*
CoreReferenceApiTouchProvider Touch a provider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param providerId ID of the provider
 @return CoreReferenceApiAPICoreReferenceApiTouchProviderRequest
*/
func (a *CoreReferenceApiAPIService) CoreReferenceApiTouchProvider(ctx context.Context, providerId string) CoreReferenceApiAPICoreReferenceApiTouchProviderRequest {
	return CoreReferenceApiAPICoreReferenceApiTouchProviderRequest{
		ApiService: a,
		ctx: ctx,
		providerId: providerId,
	}
}

// Execute executes the request
//  @return CoreReferenceApiTouchProvider200Response
func (a *CoreReferenceApiAPIService) CoreReferenceApiTouchProviderExecute(r CoreReferenceApiAPICoreReferenceApiTouchProviderRequest) (*CoreReferenceApiTouchProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreReferenceApiTouchProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreReferenceApiAPIService.CoreReferenceApiTouchProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/references/provider/{providerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"providerId"+"}", url.PathEscape(parameterValueToString(r.providerId, "providerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.timestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
