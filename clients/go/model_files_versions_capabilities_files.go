/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesVersionsCapabilitiesFiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesVersionsCapabilitiesFiles{}

// FilesVersionsCapabilitiesFiles struct for FilesVersionsCapabilitiesFiles
type FilesVersionsCapabilitiesFiles struct {
	Versioning bool `json:"versioning"`
	VersionLabeling bool `json:"version_labeling"`
	VersionDeletion bool `json:"version_deletion"`
	AdditionalProperties map[string]interface{}
}

type _FilesVersionsCapabilitiesFiles FilesVersionsCapabilitiesFiles

// NewFilesVersionsCapabilitiesFiles instantiates a new FilesVersionsCapabilitiesFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesVersionsCapabilitiesFiles(versioning bool, versionLabeling bool, versionDeletion bool) *FilesVersionsCapabilitiesFiles {
	this := FilesVersionsCapabilitiesFiles{}
	this.Versioning = versioning
	this.VersionLabeling = versionLabeling
	this.VersionDeletion = versionDeletion
	return &this
}

// NewFilesVersionsCapabilitiesFilesWithDefaults instantiates a new FilesVersionsCapabilitiesFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesVersionsCapabilitiesFilesWithDefaults() *FilesVersionsCapabilitiesFiles {
	this := FilesVersionsCapabilitiesFiles{}
	return &this
}

// GetVersioning returns the Versioning field value
func (o *FilesVersionsCapabilitiesFiles) GetVersioning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Versioning
}

// GetVersioningOk returns a tuple with the Versioning field value
// and a boolean to check if the value has been set.
func (o *FilesVersionsCapabilitiesFiles) GetVersioningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Versioning, true
}

// SetVersioning sets field value
func (o *FilesVersionsCapabilitiesFiles) SetVersioning(v bool) {
	o.Versioning = v
}

// GetVersionLabeling returns the VersionLabeling field value
func (o *FilesVersionsCapabilitiesFiles) GetVersionLabeling() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VersionLabeling
}

// GetVersionLabelingOk returns a tuple with the VersionLabeling field value
// and a boolean to check if the value has been set.
func (o *FilesVersionsCapabilitiesFiles) GetVersionLabelingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionLabeling, true
}

// SetVersionLabeling sets field value
func (o *FilesVersionsCapabilitiesFiles) SetVersionLabeling(v bool) {
	o.VersionLabeling = v
}

// GetVersionDeletion returns the VersionDeletion field value
func (o *FilesVersionsCapabilitiesFiles) GetVersionDeletion() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VersionDeletion
}

// GetVersionDeletionOk returns a tuple with the VersionDeletion field value
// and a boolean to check if the value has been set.
func (o *FilesVersionsCapabilitiesFiles) GetVersionDeletionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionDeletion, true
}

// SetVersionDeletion sets field value
func (o *FilesVersionsCapabilitiesFiles) SetVersionDeletion(v bool) {
	o.VersionDeletion = v
}

func (o FilesVersionsCapabilitiesFiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesVersionsCapabilitiesFiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["versioning"] = o.Versioning
	toSerialize["version_labeling"] = o.VersionLabeling
	toSerialize["version_deletion"] = o.VersionDeletion

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesVersionsCapabilitiesFiles) UnmarshalJSON(bytes []byte) (err error) {
	varFilesVersionsCapabilitiesFiles := _FilesVersionsCapabilitiesFiles{}

	if err = json.Unmarshal(bytes, &varFilesVersionsCapabilitiesFiles); err == nil {
		*o = FilesVersionsCapabilitiesFiles(varFilesVersionsCapabilitiesFiles)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "versioning")
		delete(additionalProperties, "version_labeling")
		delete(additionalProperties, "version_deletion")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesVersionsCapabilitiesFiles struct {
	value *FilesVersionsCapabilitiesFiles
	isSet bool
}

func (v NullableFilesVersionsCapabilitiesFiles) Get() *FilesVersionsCapabilitiesFiles {
	return v.value
}

func (v *NullableFilesVersionsCapabilitiesFiles) Set(val *FilesVersionsCapabilitiesFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesVersionsCapabilitiesFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesVersionsCapabilitiesFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesVersionsCapabilitiesFiles(val *FilesVersionsCapabilitiesFiles) *NullableFilesVersionsCapabilitiesFiles {
	return &NullableFilesVersionsCapabilitiesFiles{value: val, isSet: true}
}

func (v NullableFilesVersionsCapabilitiesFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesVersionsCapabilitiesFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


