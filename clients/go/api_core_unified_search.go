/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CoreUnifiedSearchAPI interface {

	/*
	CoreUnifiedSearchGetProviders Get the providers for unified search

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest
	*/
	CoreUnifiedSearchGetProviders(ctx context.Context) CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest

	// CoreUnifiedSearchGetProvidersExecute executes the request
	//  @return CoreUnifiedSearchGetProviders200Response
	CoreUnifiedSearchGetProvidersExecute(r CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest) (*CoreUnifiedSearchGetProviders200Response, *http.Response, error)

	/*
	CoreUnifiedSearchSearch Search

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param providerId ID of the provider
	@return CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest
	*/
	CoreUnifiedSearchSearch(ctx context.Context, providerId string) CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest

	// CoreUnifiedSearchSearchExecute executes the request
	//  @return CoreUnifiedSearchSearch200Response
	CoreUnifiedSearchSearchExecute(r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) (*CoreUnifiedSearchSearch200Response, *http.Response, error)
}

// CoreUnifiedSearchAPIService CoreUnifiedSearchAPI service
type CoreUnifiedSearchAPIService service

type CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest struct {
	ctx context.Context
	ApiService CoreUnifiedSearchAPI
	oCSAPIRequest *string
	from *string
}

func (r CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest) OCSAPIRequest(oCSAPIRequest string) CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// the url the user is currently at
func (r CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest) From(from string) CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest {
	r.from = &from
	return r
}

func (r CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest) Execute() (*CoreUnifiedSearchGetProviders200Response, *http.Response, error) {
	return r.ApiService.CoreUnifiedSearchGetProvidersExecute(r)
}

/*
CoreUnifiedSearchGetProviders Get the providers for unified search

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest
*/
func (a *CoreUnifiedSearchAPIService) CoreUnifiedSearchGetProviders(ctx context.Context) CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest {
	return CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreUnifiedSearchGetProviders200Response
func (a *CoreUnifiedSearchAPIService) CoreUnifiedSearchGetProvidersExecute(r CoreUnifiedSearchAPICoreUnifiedSearchGetProvidersRequest) (*CoreUnifiedSearchGetProviders200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreUnifiedSearchGetProviders200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreUnifiedSearchAPIService.CoreUnifiedSearchGetProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/search/providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest struct {
	ctx context.Context
	ApiService CoreUnifiedSearchAPI
	providerId string
	oCSAPIRequest *string
	term *string
	sortOrder *int64
	limit *int64
	cursor *string
	from *string
}

func (r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) OCSAPIRequest(oCSAPIRequest string) CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Term to search
func (r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) Term(term string) CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest {
	r.term = &term
	return r
}

// Order of entries
func (r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) SortOrder(sortOrder int64) CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest {
	r.sortOrder = &sortOrder
	return r
}

// Maximum amount of entries
func (r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) Limit(limit int64) CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest {
	r.limit = &limit
	return r
}

// Offset for searching
func (r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) Cursor(cursor string) CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest {
	r.cursor = &cursor
	return r
}

// The current user URL
func (r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) From(from string) CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest {
	r.from = &from
	return r
}

func (r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) Execute() (*CoreUnifiedSearchSearch200Response, *http.Response, error) {
	return r.ApiService.CoreUnifiedSearchSearchExecute(r)
}

/*
CoreUnifiedSearchSearch Search

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param providerId ID of the provider
 @return CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest
*/
func (a *CoreUnifiedSearchAPIService) CoreUnifiedSearchSearch(ctx context.Context, providerId string) CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest {
	return CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest{
		ApiService: a,
		ctx: ctx,
		providerId: providerId,
	}
}

// Execute executes the request
//  @return CoreUnifiedSearchSearch200Response
func (a *CoreUnifiedSearchAPIService) CoreUnifiedSearchSearchExecute(r CoreUnifiedSearchAPICoreUnifiedSearchSearchRequest) (*CoreUnifiedSearchSearch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreUnifiedSearchSearch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreUnifiedSearchAPIService.CoreUnifiedSearchSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/search/providers/{providerId}/search"
	localVarPath = strings.Replace(localVarPath, "{"+"providerId"+"}", url.PathEscape(parameterValueToString(r.providerId, "providerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.term != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "term", r.term, "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
