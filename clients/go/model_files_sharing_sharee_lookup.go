/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesSharingShareeLookup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesSharingShareeLookup{}

// FilesSharingShareeLookup struct for FilesSharingShareeLookup
type FilesSharingShareeLookup struct {
	Count NullableInt64 `json:"count"`
	Label string `json:"label"`
	Extra FilesSharingShareeLookupAllOfExtra `json:"extra"`
	Value FilesSharingShareeLookupAllOfValue `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _FilesSharingShareeLookup FilesSharingShareeLookup

// NewFilesSharingShareeLookup instantiates a new FilesSharingShareeLookup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesSharingShareeLookup(count NullableInt64, label string, extra FilesSharingShareeLookupAllOfExtra, value FilesSharingShareeLookupAllOfValue) *FilesSharingShareeLookup {
	this := FilesSharingShareeLookup{}
	this.Count = count
	this.Label = label
	this.Extra = extra
	this.Value = value
	return &this
}

// NewFilesSharingShareeLookupWithDefaults instantiates a new FilesSharingShareeLookup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesSharingShareeLookupWithDefaults() *FilesSharingShareeLookup {
	this := FilesSharingShareeLookup{}
	return &this
}

// GetCount returns the Count field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FilesSharingShareeLookup) GetCount() int64 {
	if o == nil || o.Count.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShareeLookup) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// SetCount sets field value
func (o *FilesSharingShareeLookup) SetCount(v int64) {
	o.Count.Set(&v)
}

// GetLabel returns the Label field value
func (o *FilesSharingShareeLookup) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShareeLookup) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *FilesSharingShareeLookup) SetLabel(v string) {
	o.Label = v
}

// GetExtra returns the Extra field value
func (o *FilesSharingShareeLookup) GetExtra() FilesSharingShareeLookupAllOfExtra {
	if o == nil {
		var ret FilesSharingShareeLookupAllOfExtra
		return ret
	}

	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShareeLookup) GetExtraOk() (*FilesSharingShareeLookupAllOfExtra, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extra, true
}

// SetExtra sets field value
func (o *FilesSharingShareeLookup) SetExtra(v FilesSharingShareeLookupAllOfExtra) {
	o.Extra = v
}

// GetValue returns the Value field value
func (o *FilesSharingShareeLookup) GetValue() FilesSharingShareeLookupAllOfValue {
	if o == nil {
		var ret FilesSharingShareeLookupAllOfValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShareeLookup) GetValueOk() (*FilesSharingShareeLookupAllOfValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *FilesSharingShareeLookup) SetValue(v FilesSharingShareeLookupAllOfValue) {
	o.Value = v
}

func (o FilesSharingShareeLookup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesSharingShareeLookup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count.Get()
	toSerialize["label"] = o.Label
	toSerialize["extra"] = o.Extra
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesSharingShareeLookup) UnmarshalJSON(bytes []byte) (err error) {
	varFilesSharingShareeLookup := _FilesSharingShareeLookup{}

	if err = json.Unmarshal(bytes, &varFilesSharingShareeLookup); err == nil {
		*o = FilesSharingShareeLookup(varFilesSharingShareeLookup)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "label")
		delete(additionalProperties, "extra")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesSharingShareeLookup struct {
	value *FilesSharingShareeLookup
	isSet bool
}

func (v NullableFilesSharingShareeLookup) Get() *FilesSharingShareeLookup {
	return v.value
}

func (v *NullableFilesSharingShareeLookup) Set(val *FilesSharingShareeLookup) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingShareeLookup) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingShareeLookup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingShareeLookup(val *FilesSharingShareeLookup) *NullableFilesSharingShareeLookup {
	return &NullableFilesSharingShareeLookup{value: val, isSet: true}
}

func (v NullableFilesSharingShareeLookup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingShareeLookup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


