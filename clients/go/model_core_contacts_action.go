/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the CoreContactsAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreContactsAction{}

// CoreContactsAction struct for CoreContactsAction
type CoreContactsAction struct {
	Title string `json:"title"`
	Icon string `json:"icon"`
	Hyperlink string `json:"hyperlink"`
	AppId string `json:"appId"`
	AdditionalProperties map[string]interface{}
}

type _CoreContactsAction CoreContactsAction

// NewCoreContactsAction instantiates a new CoreContactsAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreContactsAction(title string, icon string, hyperlink string, appId string) *CoreContactsAction {
	this := CoreContactsAction{}
	this.Title = title
	this.Icon = icon
	this.Hyperlink = hyperlink
	this.AppId = appId
	return &this
}

// NewCoreContactsActionWithDefaults instantiates a new CoreContactsAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreContactsActionWithDefaults() *CoreContactsAction {
	this := CoreContactsAction{}
	return &this
}

// GetTitle returns the Title field value
func (o *CoreContactsAction) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CoreContactsAction) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CoreContactsAction) SetTitle(v string) {
	o.Title = v
}

// GetIcon returns the Icon field value
func (o *CoreContactsAction) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *CoreContactsAction) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *CoreContactsAction) SetIcon(v string) {
	o.Icon = v
}

// GetHyperlink returns the Hyperlink field value
func (o *CoreContactsAction) GetHyperlink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hyperlink
}

// GetHyperlinkOk returns a tuple with the Hyperlink field value
// and a boolean to check if the value has been set.
func (o *CoreContactsAction) GetHyperlinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hyperlink, true
}

// SetHyperlink sets field value
func (o *CoreContactsAction) SetHyperlink(v string) {
	o.Hyperlink = v
}

// GetAppId returns the AppId field value
func (o *CoreContactsAction) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *CoreContactsAction) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *CoreContactsAction) SetAppId(v string) {
	o.AppId = v
}

func (o CoreContactsAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreContactsAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["icon"] = o.Icon
	toSerialize["hyperlink"] = o.Hyperlink
	toSerialize["appId"] = o.AppId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreContactsAction) UnmarshalJSON(bytes []byte) (err error) {
	varCoreContactsAction := _CoreContactsAction{}

	if err = json.Unmarshal(bytes, &varCoreContactsAction); err == nil {
		*o = CoreContactsAction(varCoreContactsAction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "title")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "hyperlink")
		delete(additionalProperties, "appId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreContactsAction struct {
	value *CoreContactsAction
	isSet bool
}

func (v NullableCoreContactsAction) Get() *CoreContactsAction {
	return v.value
}

func (v *NullableCoreContactsAction) Set(val *CoreContactsAction) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreContactsAction) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreContactsAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreContactsAction(val *CoreContactsAction) *NullableCoreContactsAction {
	return &NullableCoreContactsAction{value: val, isSet: true}
}

func (v NullableCoreContactsAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreContactsAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


