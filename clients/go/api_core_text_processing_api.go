/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CoreTextProcessingApiAPI interface {

	/*
	CoreTextProcessingApiDeleteTask This endpoint allows to delete a scheduled task for a user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task
	@return CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest
	*/
	CoreTextProcessingApiDeleteTask(ctx context.Context, id int64) CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest

	// CoreTextProcessingApiDeleteTaskExecute executes the request
	//  @return CoreTextProcessingApiSchedule200Response
	CoreTextProcessingApiDeleteTaskExecute(r CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest) (*CoreTextProcessingApiSchedule200Response, *http.Response, error)

	/*
	CoreTextProcessingApiGetTask This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The id of the task
	@return CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest
	*/
	CoreTextProcessingApiGetTask(ctx context.Context, id int64) CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest

	// CoreTextProcessingApiGetTaskExecute executes the request
	//  @return CoreTextProcessingApiSchedule200Response
	CoreTextProcessingApiGetTaskExecute(r CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest) (*CoreTextProcessingApiSchedule200Response, *http.Response, error)

	/*
	CoreTextProcessingApiListTasksByApp This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param appId ID of the app
	@return CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest
	*/
	CoreTextProcessingApiListTasksByApp(ctx context.Context, appId string) CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest

	// CoreTextProcessingApiListTasksByAppExecute executes the request
	//  @return CoreTextProcessingApiListTasksByApp200Response
	CoreTextProcessingApiListTasksByAppExecute(r CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest) (*CoreTextProcessingApiListTasksByApp200Response, *http.Response, error)

	/*
	CoreTextProcessingApiSchedule This endpoint allows scheduling a language model task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest
	*/
	CoreTextProcessingApiSchedule(ctx context.Context) CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest

	// CoreTextProcessingApiScheduleExecute executes the request
	//  @return CoreTextProcessingApiSchedule200Response
	CoreTextProcessingApiScheduleExecute(r CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest) (*CoreTextProcessingApiSchedule200Response, *http.Response, error)

	/*
	CoreTextProcessingApiTaskTypes This endpoint returns all available LanguageModel task types

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest
	*/
	CoreTextProcessingApiTaskTypes(ctx context.Context) CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest

	// CoreTextProcessingApiTaskTypesExecute executes the request
	//  @return CoreTextProcessingApiTaskTypes200Response
	CoreTextProcessingApiTaskTypesExecute(r CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest) (*CoreTextProcessingApiTaskTypes200Response, *http.Response, error)
}

// CoreTextProcessingApiAPIService CoreTextProcessingApiAPI service
type CoreTextProcessingApiAPIService service

type CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest struct {
	ctx context.Context
	ApiService CoreTextProcessingApiAPI
	id int64
	oCSAPIRequest *string
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest) OCSAPIRequest(oCSAPIRequest string) CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest) Execute() (*CoreTextProcessingApiSchedule200Response, *http.Response, error) {
	return r.ApiService.CoreTextProcessingApiDeleteTaskExecute(r)
}

/*
CoreTextProcessingApiDeleteTask This endpoint allows to delete a scheduled task for a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task
 @return CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest
*/
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiDeleteTask(ctx context.Context, id int64) CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest {
	return CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CoreTextProcessingApiSchedule200Response
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiDeleteTaskExecute(r CoreTextProcessingApiAPICoreTextProcessingApiDeleteTaskRequest) (*CoreTextProcessingApiSchedule200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreTextProcessingApiSchedule200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreTextProcessingApiAPIService.CoreTextProcessingApiDeleteTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/textprocessing/task/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest struct {
	ctx context.Context
	ApiService CoreTextProcessingApiAPI
	id int64
	oCSAPIRequest *string
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest) OCSAPIRequest(oCSAPIRequest string) CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest) Execute() (*CoreTextProcessingApiSchedule200Response, *http.Response, error) {
	return r.ApiService.CoreTextProcessingApiGetTaskExecute(r)
}

/*
CoreTextProcessingApiGetTask This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the task
 @return CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest
*/
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiGetTask(ctx context.Context, id int64) CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest {
	return CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CoreTextProcessingApiSchedule200Response
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiGetTaskExecute(r CoreTextProcessingApiAPICoreTextProcessingApiGetTaskRequest) (*CoreTextProcessingApiSchedule200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreTextProcessingApiSchedule200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreTextProcessingApiAPIService.CoreTextProcessingApiGetTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/textprocessing/task/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest struct {
	ctx context.Context
	ApiService CoreTextProcessingApiAPI
	appId string
	oCSAPIRequest *string
	identifier *string
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest) OCSAPIRequest(oCSAPIRequest string) CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// An arbitrary identifier for the task
func (r CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest) Identifier(identifier string) CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest {
	r.identifier = &identifier
	return r
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest) Execute() (*CoreTextProcessingApiListTasksByApp200Response, *http.Response, error) {
	return r.ApiService.CoreTextProcessingApiListTasksByAppExecute(r)
}

/*
CoreTextProcessingApiListTasksByApp This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param appId ID of the app
 @return CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest
*/
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiListTasksByApp(ctx context.Context, appId string) CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest {
	return CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest{
		ApiService: a,
		ctx: ctx,
		appId: appId,
	}
}

// Execute executes the request
//  @return CoreTextProcessingApiListTasksByApp200Response
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiListTasksByAppExecute(r CoreTextProcessingApiAPICoreTextProcessingApiListTasksByAppRequest) (*CoreTextProcessingApiListTasksByApp200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreTextProcessingApiListTasksByApp200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreTextProcessingApiAPIService.CoreTextProcessingApiListTasksByApp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/textprocessing/tasks/app/{appId}"
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest struct {
	ctx context.Context
	ApiService CoreTextProcessingApiAPI
	input *string
	type_ *string
	appId *string
	oCSAPIRequest *string
	identifier *string
}

// Input text
func (r CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest) Input(input string) CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest {
	r.input = &input
	return r
}

// Type of the task
func (r CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest) Type_(type_ string) CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest {
	r.type_ = &type_
	return r
}

// ID of the app that will execute the task
func (r CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest) AppId(appId string) CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest {
	r.appId = &appId
	return r
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest) OCSAPIRequest(oCSAPIRequest string) CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// An arbitrary identifier for the task
func (r CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest) Identifier(identifier string) CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest {
	r.identifier = &identifier
	return r
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest) Execute() (*CoreTextProcessingApiSchedule200Response, *http.Response, error) {
	return r.ApiService.CoreTextProcessingApiScheduleExecute(r)
}

/*
CoreTextProcessingApiSchedule This endpoint allows scheduling a language model task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest
*/
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiSchedule(ctx context.Context) CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest {
	return CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreTextProcessingApiSchedule200Response
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiScheduleExecute(r CoreTextProcessingApiAPICoreTextProcessingApiScheduleRequest) (*CoreTextProcessingApiSchedule200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreTextProcessingApiSchedule200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreTextProcessingApiAPIService.CoreTextProcessingApiSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/textprocessing/schedule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.input == nil {
		return localVarReturnValue, nil, reportError("input is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}
	if r.appId == nil {
		return localVarReturnValue, nil, reportError("appId is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "input", r.input, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "appId", r.appId, "")
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest struct {
	ctx context.Context
	ApiService CoreTextProcessingApiAPI
	oCSAPIRequest *string
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest) OCSAPIRequest(oCSAPIRequest string) CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest) Execute() (*CoreTextProcessingApiTaskTypes200Response, *http.Response, error) {
	return r.ApiService.CoreTextProcessingApiTaskTypesExecute(r)
}

/*
CoreTextProcessingApiTaskTypes This endpoint returns all available LanguageModel task types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest
*/
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiTaskTypes(ctx context.Context) CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest {
	return CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreTextProcessingApiTaskTypes200Response
func (a *CoreTextProcessingApiAPIService) CoreTextProcessingApiTaskTypesExecute(r CoreTextProcessingApiAPICoreTextProcessingApiTaskTypesRequest) (*CoreTextProcessingApiTaskTypes200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreTextProcessingApiTaskTypes200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreTextProcessingApiAPIService.CoreTextProcessingApiTaskTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/textprocessing/tasktypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
