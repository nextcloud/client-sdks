/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesSharingCapabilitiesFilesSharing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesSharingCapabilitiesFilesSharing{}

// FilesSharingCapabilitiesFilesSharing struct for FilesSharingCapabilitiesFilesSharing
type FilesSharingCapabilitiesFilesSharing struct {
	ApiEnabled bool `json:"api_enabled"`
	Public FilesSharingCapabilitiesFilesSharingPublic `json:"public"`
	User FilesSharingCapabilitiesFilesSharingUser `json:"user"`
	Resharing bool `json:"resharing"`
	GroupSharing *bool `json:"group_sharing,omitempty"`
	Group *FilesSharingCapabilitiesFilesSharingGroup `json:"group,omitempty"`
	DefaultPermissions *int64 `json:"default_permissions,omitempty"`
	Federation FilesSharingCapabilitiesFilesSharingFederation `json:"federation"`
	Sharee FilesSharingCapabilitiesFilesSharingSharee `json:"sharee"`
	AdditionalProperties map[string]interface{}
}

type _FilesSharingCapabilitiesFilesSharing FilesSharingCapabilitiesFilesSharing

// NewFilesSharingCapabilitiesFilesSharing instantiates a new FilesSharingCapabilitiesFilesSharing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesSharingCapabilitiesFilesSharing(apiEnabled bool, public FilesSharingCapabilitiesFilesSharingPublic, user FilesSharingCapabilitiesFilesSharingUser, resharing bool, federation FilesSharingCapabilitiesFilesSharingFederation, sharee FilesSharingCapabilitiesFilesSharingSharee) *FilesSharingCapabilitiesFilesSharing {
	this := FilesSharingCapabilitiesFilesSharing{}
	this.ApiEnabled = apiEnabled
	this.Public = public
	this.User = user
	this.Resharing = resharing
	this.Federation = federation
	this.Sharee = sharee
	return &this
}

// NewFilesSharingCapabilitiesFilesSharingWithDefaults instantiates a new FilesSharingCapabilitiesFilesSharing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesSharingCapabilitiesFilesSharingWithDefaults() *FilesSharingCapabilitiesFilesSharing {
	this := FilesSharingCapabilitiesFilesSharing{}
	return &this
}

// GetApiEnabled returns the ApiEnabled field value
func (o *FilesSharingCapabilitiesFilesSharing) GetApiEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApiEnabled
}

// GetApiEnabledOk returns a tuple with the ApiEnabled field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetApiEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiEnabled, true
}

// SetApiEnabled sets field value
func (o *FilesSharingCapabilitiesFilesSharing) SetApiEnabled(v bool) {
	o.ApiEnabled = v
}

// GetPublic returns the Public field value
func (o *FilesSharingCapabilitiesFilesSharing) GetPublic() FilesSharingCapabilitiesFilesSharingPublic {
	if o == nil {
		var ret FilesSharingCapabilitiesFilesSharingPublic
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetPublicOk() (*FilesSharingCapabilitiesFilesSharingPublic, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *FilesSharingCapabilitiesFilesSharing) SetPublic(v FilesSharingCapabilitiesFilesSharingPublic) {
	o.Public = v
}

// GetUser returns the User field value
func (o *FilesSharingCapabilitiesFilesSharing) GetUser() FilesSharingCapabilitiesFilesSharingUser {
	if o == nil {
		var ret FilesSharingCapabilitiesFilesSharingUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetUserOk() (*FilesSharingCapabilitiesFilesSharingUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *FilesSharingCapabilitiesFilesSharing) SetUser(v FilesSharingCapabilitiesFilesSharingUser) {
	o.User = v
}

// GetResharing returns the Resharing field value
func (o *FilesSharingCapabilitiesFilesSharing) GetResharing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Resharing
}

// GetResharingOk returns a tuple with the Resharing field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetResharingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resharing, true
}

// SetResharing sets field value
func (o *FilesSharingCapabilitiesFilesSharing) SetResharing(v bool) {
	o.Resharing = v
}

// GetGroupSharing returns the GroupSharing field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharing) GetGroupSharing() bool {
	if o == nil || IsNil(o.GroupSharing) {
		var ret bool
		return ret
	}
	return *o.GroupSharing
}

// GetGroupSharingOk returns a tuple with the GroupSharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetGroupSharingOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupSharing) {
		return nil, false
	}
	return o.GroupSharing, true
}

// HasGroupSharing returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharing) HasGroupSharing() bool {
	if o != nil && !IsNil(o.GroupSharing) {
		return true
	}

	return false
}

// SetGroupSharing gets a reference to the given bool and assigns it to the GroupSharing field.
func (o *FilesSharingCapabilitiesFilesSharing) SetGroupSharing(v bool) {
	o.GroupSharing = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharing) GetGroup() FilesSharingCapabilitiesFilesSharingGroup {
	if o == nil || IsNil(o.Group) {
		var ret FilesSharingCapabilitiesFilesSharingGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetGroupOk() (*FilesSharingCapabilitiesFilesSharingGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharing) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given FilesSharingCapabilitiesFilesSharingGroup and assigns it to the Group field.
func (o *FilesSharingCapabilitiesFilesSharing) SetGroup(v FilesSharingCapabilitiesFilesSharingGroup) {
	o.Group = &v
}

// GetDefaultPermissions returns the DefaultPermissions field value if set, zero value otherwise.
func (o *FilesSharingCapabilitiesFilesSharing) GetDefaultPermissions() int64 {
	if o == nil || IsNil(o.DefaultPermissions) {
		var ret int64
		return ret
	}
	return *o.DefaultPermissions
}

// GetDefaultPermissionsOk returns a tuple with the DefaultPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetDefaultPermissionsOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultPermissions) {
		return nil, false
	}
	return o.DefaultPermissions, true
}

// HasDefaultPermissions returns a boolean if a field has been set.
func (o *FilesSharingCapabilitiesFilesSharing) HasDefaultPermissions() bool {
	if o != nil && !IsNil(o.DefaultPermissions) {
		return true
	}

	return false
}

// SetDefaultPermissions gets a reference to the given int64 and assigns it to the DefaultPermissions field.
func (o *FilesSharingCapabilitiesFilesSharing) SetDefaultPermissions(v int64) {
	o.DefaultPermissions = &v
}

// GetFederation returns the Federation field value
func (o *FilesSharingCapabilitiesFilesSharing) GetFederation() FilesSharingCapabilitiesFilesSharingFederation {
	if o == nil {
		var ret FilesSharingCapabilitiesFilesSharingFederation
		return ret
	}

	return o.Federation
}

// GetFederationOk returns a tuple with the Federation field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetFederationOk() (*FilesSharingCapabilitiesFilesSharingFederation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Federation, true
}

// SetFederation sets field value
func (o *FilesSharingCapabilitiesFilesSharing) SetFederation(v FilesSharingCapabilitiesFilesSharingFederation) {
	o.Federation = v
}

// GetSharee returns the Sharee field value
func (o *FilesSharingCapabilitiesFilesSharing) GetSharee() FilesSharingCapabilitiesFilesSharingSharee {
	if o == nil {
		var ret FilesSharingCapabilitiesFilesSharingSharee
		return ret
	}

	return o.Sharee
}

// GetShareeOk returns a tuple with the Sharee field value
// and a boolean to check if the value has been set.
func (o *FilesSharingCapabilitiesFilesSharing) GetShareeOk() (*FilesSharingCapabilitiesFilesSharingSharee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sharee, true
}

// SetSharee sets field value
func (o *FilesSharingCapabilitiesFilesSharing) SetSharee(v FilesSharingCapabilitiesFilesSharingSharee) {
	o.Sharee = v
}

func (o FilesSharingCapabilitiesFilesSharing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesSharingCapabilitiesFilesSharing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_enabled"] = o.ApiEnabled
	toSerialize["public"] = o.Public
	toSerialize["user"] = o.User
	toSerialize["resharing"] = o.Resharing
	if !IsNil(o.GroupSharing) {
		toSerialize["group_sharing"] = o.GroupSharing
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.DefaultPermissions) {
		toSerialize["default_permissions"] = o.DefaultPermissions
	}
	toSerialize["federation"] = o.Federation
	toSerialize["sharee"] = o.Sharee

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesSharingCapabilitiesFilesSharing) UnmarshalJSON(bytes []byte) (err error) {
	varFilesSharingCapabilitiesFilesSharing := _FilesSharingCapabilitiesFilesSharing{}

	if err = json.Unmarshal(bytes, &varFilesSharingCapabilitiesFilesSharing); err == nil {
		*o = FilesSharingCapabilitiesFilesSharing(varFilesSharingCapabilitiesFilesSharing)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "api_enabled")
		delete(additionalProperties, "public")
		delete(additionalProperties, "user")
		delete(additionalProperties, "resharing")
		delete(additionalProperties, "group_sharing")
		delete(additionalProperties, "group")
		delete(additionalProperties, "default_permissions")
		delete(additionalProperties, "federation")
		delete(additionalProperties, "sharee")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesSharingCapabilitiesFilesSharing struct {
	value *FilesSharingCapabilitiesFilesSharing
	isSet bool
}

func (v NullableFilesSharingCapabilitiesFilesSharing) Get() *FilesSharingCapabilitiesFilesSharing {
	return v.value
}

func (v *NullableFilesSharingCapabilitiesFilesSharing) Set(val *FilesSharingCapabilitiesFilesSharing) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingCapabilitiesFilesSharing) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingCapabilitiesFilesSharing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingCapabilitiesFilesSharing(val *FilesSharingCapabilitiesFilesSharing) *NullableFilesSharingCapabilitiesFilesSharing {
	return &NullableFilesSharingCapabilitiesFilesSharing{value: val, isSet: true}
}

func (v NullableFilesSharingCapabilitiesFilesSharing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingCapabilitiesFilesSharing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


