/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the CoreCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreCollection{}

// CoreCollection struct for CoreCollection
type CoreCollection struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	Resources []CoreResource `json:"resources"`
	AdditionalProperties map[string]interface{}
}

type _CoreCollection CoreCollection

// NewCoreCollection instantiates a new CoreCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCollection(id int64, name string, resources []CoreResource) *CoreCollection {
	this := CoreCollection{}
	this.Id = id
	this.Name = name
	this.Resources = resources
	return &this
}

// NewCoreCollectionWithDefaults instantiates a new CoreCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCollectionWithDefaults() *CoreCollection {
	this := CoreCollection{}
	return &this
}

// GetId returns the Id field value
func (o *CoreCollection) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CoreCollection) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CoreCollection) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CoreCollection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CoreCollection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CoreCollection) SetName(v string) {
	o.Name = v
}

// GetResources returns the Resources field value
func (o *CoreCollection) GetResources() []CoreResource {
	if o == nil {
		var ret []CoreResource
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *CoreCollection) GetResourcesOk() ([]CoreResource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resources, true
}

// SetResources sets field value
func (o *CoreCollection) SetResources(v []CoreResource) {
	o.Resources = v
}

func (o CoreCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["resources"] = o.Resources

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreCollection) UnmarshalJSON(bytes []byte) (err error) {
	varCoreCollection := _CoreCollection{}

	if err = json.Unmarshal(bytes, &varCoreCollection); err == nil {
		*o = CoreCollection(varCoreCollection)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "resources")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreCollection struct {
	value *CoreCollection
	isSet bool
}

func (v NullableCoreCollection) Get() *CoreCollection {
	return v.value
}

func (v *NullableCoreCollection) Set(val *CoreCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCollection(val *CoreCollection) *NullableCoreCollection {
	return &NullableCoreCollection{value: val, isSet: true}
}

func (v NullableCoreCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


