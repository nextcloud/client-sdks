/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)


type FilesVersionsPreviewAPI interface {

	/*
	FilesVersionsPreviewGetPreview Get the preview for a file version

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest
	*/
	FilesVersionsPreviewGetPreview(ctx context.Context) FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest

	// FilesVersionsPreviewGetPreviewExecute executes the request
	//  @return *os.File
	FilesVersionsPreviewGetPreviewExecute(r FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest) (*os.File, *http.Response, error)
}

// FilesVersionsPreviewAPIService FilesVersionsPreviewAPI service
type FilesVersionsPreviewAPIService service

type FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest struct {
	ctx context.Context
	ApiService FilesVersionsPreviewAPI
	file *string
	x *int64
	y *int64
	version *string
}

// Path of the file
func (r FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest) File(file string) FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest {
	r.file = &file
	return r
}

// Width of the preview
func (r FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest) X(x int64) FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest {
	r.x = &x
	return r
}

// Height of the preview
func (r FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest) Y(y int64) FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest {
	r.y = &y
	return r
}

// Version of the file to get the preview for
func (r FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest) Version(version string) FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest {
	r.version = &version
	return r
}

func (r FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FilesVersionsPreviewGetPreviewExecute(r)
}

/*
FilesVersionsPreviewGetPreview Get the preview for a file version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest
*/
func (a *FilesVersionsPreviewAPIService) FilesVersionsPreviewGetPreview(ctx context.Context) FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest {
	return FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return *os.File
func (a *FilesVersionsPreviewAPIService) FilesVersionsPreviewGetPreviewExecute(r FilesVersionsPreviewAPIFilesVersionsPreviewGetPreviewRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesVersionsPreviewAPIService.FilesVersionsPreviewGetPreview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/files_versions/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.file != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file", r.file, "")
	}
	if r.x != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "x", r.x, "")
	}
	if r.y != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "y", r.y, "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
