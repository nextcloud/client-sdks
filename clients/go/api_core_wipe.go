/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type CoreWipeAPI interface {

	/*
	CoreWipeCheckWipe Check if the device should be wiped

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreWipeAPICoreWipeCheckWipeRequest
	*/
	CoreWipeCheckWipe(ctx context.Context) CoreWipeAPICoreWipeCheckWipeRequest

	// CoreWipeCheckWipeExecute executes the request
	//  @return CoreWipeCheckWipe200Response
	CoreWipeCheckWipeExecute(r CoreWipeAPICoreWipeCheckWipeRequest) (*CoreWipeCheckWipe200Response, *http.Response, error)

	/*
	CoreWipeWipeDone Finish the wipe

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CoreWipeAPICoreWipeWipeDoneRequest
	*/
	CoreWipeWipeDone(ctx context.Context) CoreWipeAPICoreWipeWipeDoneRequest

	// CoreWipeWipeDoneExecute executes the request
	CoreWipeWipeDoneExecute(r CoreWipeAPICoreWipeWipeDoneRequest) (*http.Response, error)
}

// CoreWipeAPIService CoreWipeAPI service
type CoreWipeAPIService service

type CoreWipeAPICoreWipeCheckWipeRequest struct {
	ctx context.Context
	ApiService CoreWipeAPI
	token *string
}

// App password
func (r CoreWipeAPICoreWipeCheckWipeRequest) Token(token string) CoreWipeAPICoreWipeCheckWipeRequest {
	r.token = &token
	return r
}

func (r CoreWipeAPICoreWipeCheckWipeRequest) Execute() (*CoreWipeCheckWipe200Response, *http.Response, error) {
	return r.ApiService.CoreWipeCheckWipeExecute(r)
}

/*
CoreWipeCheckWipe Check if the device should be wiped

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreWipeAPICoreWipeCheckWipeRequest
*/
func (a *CoreWipeAPIService) CoreWipeCheckWipe(ctx context.Context) CoreWipeAPICoreWipeCheckWipeRequest {
	return CoreWipeAPICoreWipeCheckWipeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreWipeCheckWipe200Response
func (a *CoreWipeAPIService) CoreWipeCheckWipeExecute(r CoreWipeAPICoreWipeCheckWipeRequest) (*CoreWipeCheckWipe200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWipeCheckWipe200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreWipeAPIService.CoreWipeCheckWipe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/core/wipe/check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CoreWipeAPICoreWipeWipeDoneRequest struct {
	ctx context.Context
	ApiService CoreWipeAPI
	token *string
}

// App password
func (r CoreWipeAPICoreWipeWipeDoneRequest) Token(token string) CoreWipeAPICoreWipeWipeDoneRequest {
	r.token = &token
	return r
}

func (r CoreWipeAPICoreWipeWipeDoneRequest) Execute() (*http.Response, error) {
	return r.ApiService.CoreWipeWipeDoneExecute(r)
}

/*
CoreWipeWipeDone Finish the wipe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CoreWipeAPICoreWipeWipeDoneRequest
*/
func (a *CoreWipeAPIService) CoreWipeWipeDone(ctx context.Context) CoreWipeAPICoreWipeWipeDoneRequest {
	return CoreWipeAPICoreWipeWipeDoneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CoreWipeAPIService) CoreWipeWipeDoneExecute(r CoreWipeAPICoreWipeWipeDoneRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreWipeAPIService.CoreWipeWipeDone")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/core/wipe/success"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return nil, reportError("token is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
