/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData{}

// WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData struct for WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
type WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData struct {
	Success bool `json:"success"`
	Lat NullableFloat32 `json:"lat"`
	Lon NullableFloat32 `json:"lon"`
	Address NullableString `json:"address"`
	AdditionalProperties map[string]interface{}
}

type _WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData

// NewWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData instantiates a new WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData(success bool, lat NullableFloat32, lon NullableFloat32, address NullableString) *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData {
	this := WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData{}
	this.Success = success
	this.Lat = lat
	this.Lon = lon
	this.Address = address
	return &this
}

// NewWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsDataWithDefaults instantiates a new WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsDataWithDefaults() *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData {
	this := WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData{}
	return &this
}

// GetSuccess returns the Success field value
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) SetSuccess(v bool) {
	o.Success = v
}

// GetLat returns the Lat field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) GetLat() float32 {
	if o == nil || o.Lat.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Lat.Get()
}

// GetLatOk returns a tuple with the Lat field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) GetLatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lat.Get(), o.Lat.IsSet()
}

// SetLat sets field value
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) SetLat(v float32) {
	o.Lat.Set(&v)
}

// GetLon returns the Lon field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) GetLon() float32 {
	if o == nil || o.Lon.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Lon.Get()
}

// GetLonOk returns a tuple with the Lon field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) GetLonOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lon.Get(), o.Lon.IsSet()
}

// SetLon sets field value
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) SetLon(v float32) {
	o.Lon.Set(&v)
}

// GetAddress returns the Address field value
// If the value is explicit nil, the zero value for string will be returned
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) GetAddress() string {
	if o == nil || o.Address.Get() == nil {
		var ret string
		return ret
	}

	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// SetAddress sets field value
func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) SetAddress(v string) {
	o.Address.Set(&v)
}

func (o WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["lat"] = o.Lat.Get()
	toSerialize["lon"] = o.Lon.Get()
	toSerialize["address"] = o.Address.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) UnmarshalJSON(bytes []byte) (err error) {
	varWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData := _WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData{}

	if err = json.Unmarshal(bytes, &varWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData); err == nil {
		*o = WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData(varWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "lat")
		delete(additionalProperties, "lon")
		delete(additionalProperties, "address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData struct {
	value *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
	isSet bool
}

func (v NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) Get() *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData {
	return v.value
}

func (v *NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) Set(val *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) {
	v.value = val
	v.isSet = true
}

func (v NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) IsSet() bool {
	return v.isSet
}

func (v *NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData(val *WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) *NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData {
	return &NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData{value: val, isSet: true}
}

func (v NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


