/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type FilesTemplateAPI interface {

	/*
	FilesTemplateCreate Create a template

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesTemplateAPIFilesTemplateCreateRequest
	*/
	FilesTemplateCreate(ctx context.Context) FilesTemplateAPIFilesTemplateCreateRequest

	// FilesTemplateCreateExecute executes the request
	//  @return FilesTemplateCreate200Response
	FilesTemplateCreateExecute(r FilesTemplateAPIFilesTemplateCreateRequest) (*FilesTemplateCreate200Response, *http.Response, error)

	/*
	FilesTemplateList List the available templates

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesTemplateAPIFilesTemplateListRequest
	*/
	FilesTemplateList(ctx context.Context) FilesTemplateAPIFilesTemplateListRequest

	// FilesTemplateListExecute executes the request
	//  @return FilesTemplateList200Response
	FilesTemplateListExecute(r FilesTemplateAPIFilesTemplateListRequest) (*FilesTemplateList200Response, *http.Response, error)

	/*
	FilesTemplatePath Initialize the template directory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesTemplateAPIFilesTemplatePathRequest
	*/
	FilesTemplatePath(ctx context.Context) FilesTemplateAPIFilesTemplatePathRequest

	// FilesTemplatePathExecute executes the request
	//  @return FilesTemplatePath200Response
	FilesTemplatePathExecute(r FilesTemplateAPIFilesTemplatePathRequest) (*FilesTemplatePath200Response, *http.Response, error)
}

// FilesTemplateAPIService FilesTemplateAPI service
type FilesTemplateAPIService service

type FilesTemplateAPIFilesTemplateCreateRequest struct {
	ctx context.Context
	ApiService FilesTemplateAPI
	filePath *string
	oCSAPIRequest *string
	templatePath *string
	templateType *string
}

// Path of the file
func (r FilesTemplateAPIFilesTemplateCreateRequest) FilePath(filePath string) FilesTemplateAPIFilesTemplateCreateRequest {
	r.filePath = &filePath
	return r
}

func (r FilesTemplateAPIFilesTemplateCreateRequest) OCSAPIRequest(oCSAPIRequest string) FilesTemplateAPIFilesTemplateCreateRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Name of the template
func (r FilesTemplateAPIFilesTemplateCreateRequest) TemplatePath(templatePath string) FilesTemplateAPIFilesTemplateCreateRequest {
	r.templatePath = &templatePath
	return r
}

// Type of the template
func (r FilesTemplateAPIFilesTemplateCreateRequest) TemplateType(templateType string) FilesTemplateAPIFilesTemplateCreateRequest {
	r.templateType = &templateType
	return r
}

func (r FilesTemplateAPIFilesTemplateCreateRequest) Execute() (*FilesTemplateCreate200Response, *http.Response, error) {
	return r.ApiService.FilesTemplateCreateExecute(r)
}

/*
FilesTemplateCreate Create a template

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesTemplateAPIFilesTemplateCreateRequest
*/
func (a *FilesTemplateAPIService) FilesTemplateCreate(ctx context.Context) FilesTemplateAPIFilesTemplateCreateRequest {
	return FilesTemplateAPIFilesTemplateCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesTemplateCreate200Response
func (a *FilesTemplateAPIService) FilesTemplateCreateExecute(r FilesTemplateAPIFilesTemplateCreateRequest) (*FilesTemplateCreate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesTemplateCreate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesTemplateAPIService.FilesTemplateCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files/api/v1/templates/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filePath == nil {
		return localVarReturnValue, nil, reportError("filePath is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "filePath", r.filePath, "")
	if r.templatePath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "templatePath", r.templatePath, "")
	}
	if r.templateType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "templateType", r.templateType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesTemplateAPIFilesTemplateListRequest struct {
	ctx context.Context
	ApiService FilesTemplateAPI
	oCSAPIRequest *string
}

func (r FilesTemplateAPIFilesTemplateListRequest) OCSAPIRequest(oCSAPIRequest string) FilesTemplateAPIFilesTemplateListRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r FilesTemplateAPIFilesTemplateListRequest) Execute() (*FilesTemplateList200Response, *http.Response, error) {
	return r.ApiService.FilesTemplateListExecute(r)
}

/*
FilesTemplateList List the available templates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesTemplateAPIFilesTemplateListRequest
*/
func (a *FilesTemplateAPIService) FilesTemplateList(ctx context.Context) FilesTemplateAPIFilesTemplateListRequest {
	return FilesTemplateAPIFilesTemplateListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesTemplateList200Response
func (a *FilesTemplateAPIService) FilesTemplateListExecute(r FilesTemplateAPIFilesTemplateListRequest) (*FilesTemplateList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesTemplateList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesTemplateAPIService.FilesTemplateList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files/api/v1/templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesTemplateAPIFilesTemplatePathRequest struct {
	ctx context.Context
	ApiService FilesTemplateAPI
	oCSAPIRequest *string
	templatePath *string
	copySystemTemplates *int32
}

func (r FilesTemplateAPIFilesTemplatePathRequest) OCSAPIRequest(oCSAPIRequest string) FilesTemplateAPIFilesTemplatePathRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Path of the template directory
func (r FilesTemplateAPIFilesTemplatePathRequest) TemplatePath(templatePath string) FilesTemplateAPIFilesTemplatePathRequest {
	r.templatePath = &templatePath
	return r
}

// Whether to copy the system templates to the template directory
func (r FilesTemplateAPIFilesTemplatePathRequest) CopySystemTemplates(copySystemTemplates int32) FilesTemplateAPIFilesTemplatePathRequest {
	r.copySystemTemplates = &copySystemTemplates
	return r
}

func (r FilesTemplateAPIFilesTemplatePathRequest) Execute() (*FilesTemplatePath200Response, *http.Response, error) {
	return r.ApiService.FilesTemplatePathExecute(r)
}

/*
FilesTemplatePath Initialize the template directory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesTemplateAPIFilesTemplatePathRequest
*/
func (a *FilesTemplateAPIService) FilesTemplatePath(ctx context.Context) FilesTemplateAPIFilesTemplatePathRequest {
	return FilesTemplateAPIFilesTemplatePathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesTemplatePath200Response
func (a *FilesTemplateAPIService) FilesTemplatePathExecute(r FilesTemplateAPIFilesTemplatePathRequest) (*FilesTemplatePath200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesTemplatePath200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesTemplateAPIService.FilesTemplatePath")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files/api/v1/templates/path"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.templatePath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "templatePath", r.templatePath, "")
	}
	if r.copySystemTemplates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copySystemTemplates", r.copySystemTemplates, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
