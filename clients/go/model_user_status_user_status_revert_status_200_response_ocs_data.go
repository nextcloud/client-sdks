/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
	"fmt"
)

// UserStatusUserStatusRevertStatus200ResponseOcsData - struct for UserStatusUserStatusRevertStatus200ResponseOcsData
type UserStatusUserStatusRevertStatus200ResponseOcsData struct {
	UserStatusPrivate *UserStatusPrivate
}

// UserStatusPrivateAsUserStatusUserStatusRevertStatus200ResponseOcsData is a convenience function that returns UserStatusPrivate wrapped in UserStatusUserStatusRevertStatus200ResponseOcsData
func UserStatusPrivateAsUserStatusUserStatusRevertStatus200ResponseOcsData(v *UserStatusPrivate) UserStatusUserStatusRevertStatus200ResponseOcsData {
	return UserStatusUserStatusRevertStatus200ResponseOcsData{
		UserStatusPrivate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UserStatusUserStatusRevertStatus200ResponseOcsData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UserStatusPrivate
	err = newStrictDecoder(data).Decode(&dst.UserStatusPrivate)
	if err == nil {
		jsonUserStatusPrivate, _ := json.Marshal(dst.UserStatusPrivate)
		if string(jsonUserStatusPrivate) == "{}" { // empty struct
			dst.UserStatusPrivate = nil
		} else {
			match++
		}
	} else {
		dst.UserStatusPrivate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UserStatusPrivate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UserStatusUserStatusRevertStatus200ResponseOcsData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UserStatusUserStatusRevertStatus200ResponseOcsData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UserStatusUserStatusRevertStatus200ResponseOcsData) MarshalJSON() ([]byte, error) {
	if src.UserStatusPrivate != nil {
		return json.Marshal(&src.UserStatusPrivate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UserStatusUserStatusRevertStatus200ResponseOcsData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UserStatusPrivate != nil {
		return obj.UserStatusPrivate
	}

	// all schemas are nil
	return nil
}

type NullableUserStatusUserStatusRevertStatus200ResponseOcsData struct {
	value *UserStatusUserStatusRevertStatus200ResponseOcsData
	isSet bool
}

func (v NullableUserStatusUserStatusRevertStatus200ResponseOcsData) Get() *UserStatusUserStatusRevertStatus200ResponseOcsData {
	return v.value
}

func (v *NullableUserStatusUserStatusRevertStatus200ResponseOcsData) Set(val *UserStatusUserStatusRevertStatus200ResponseOcsData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStatusUserStatusRevertStatus200ResponseOcsData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStatusUserStatusRevertStatus200ResponseOcsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStatusUserStatusRevertStatus200ResponseOcsData(val *UserStatusUserStatusRevertStatus200ResponseOcsData) *NullableUserStatusUserStatusRevertStatus200ResponseOcsData {
	return &NullableUserStatusUserStatusRevertStatus200ResponseOcsData{value: val, isSet: true}
}

func (v NullableUserStatusUserStatusRevertStatus200ResponseOcsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStatusUserStatusRevertStatus200ResponseOcsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


