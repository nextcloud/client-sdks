/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the DavCapabilitiesDav type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DavCapabilitiesDav{}

// DavCapabilitiesDav struct for DavCapabilitiesDav
type DavCapabilitiesDav struct {
	Chunking string `json:"chunking"`
	Bulkupload *string `json:"bulkupload,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DavCapabilitiesDav DavCapabilitiesDav

// NewDavCapabilitiesDav instantiates a new DavCapabilitiesDav object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavCapabilitiesDav(chunking string) *DavCapabilitiesDav {
	this := DavCapabilitiesDav{}
	this.Chunking = chunking
	return &this
}

// NewDavCapabilitiesDavWithDefaults instantiates a new DavCapabilitiesDav object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavCapabilitiesDavWithDefaults() *DavCapabilitiesDav {
	this := DavCapabilitiesDav{}
	return &this
}

// GetChunking returns the Chunking field value
func (o *DavCapabilitiesDav) GetChunking() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Chunking
}

// GetChunkingOk returns a tuple with the Chunking field value
// and a boolean to check if the value has been set.
func (o *DavCapabilitiesDav) GetChunkingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chunking, true
}

// SetChunking sets field value
func (o *DavCapabilitiesDav) SetChunking(v string) {
	o.Chunking = v
}

// GetBulkupload returns the Bulkupload field value if set, zero value otherwise.
func (o *DavCapabilitiesDav) GetBulkupload() string {
	if o == nil || IsNil(o.Bulkupload) {
		var ret string
		return ret
	}
	return *o.Bulkupload
}

// GetBulkuploadOk returns a tuple with the Bulkupload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavCapabilitiesDav) GetBulkuploadOk() (*string, bool) {
	if o == nil || IsNil(o.Bulkupload) {
		return nil, false
	}
	return o.Bulkupload, true
}

// HasBulkupload returns a boolean if a field has been set.
func (o *DavCapabilitiesDav) HasBulkupload() bool {
	if o != nil && !IsNil(o.Bulkupload) {
		return true
	}

	return false
}

// SetBulkupload gets a reference to the given string and assigns it to the Bulkupload field.
func (o *DavCapabilitiesDav) SetBulkupload(v string) {
	o.Bulkupload = &v
}

func (o DavCapabilitiesDav) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DavCapabilitiesDav) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chunking"] = o.Chunking
	if !IsNil(o.Bulkupload) {
		toSerialize["bulkupload"] = o.Bulkupload
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DavCapabilitiesDav) UnmarshalJSON(bytes []byte) (err error) {
	varDavCapabilitiesDav := _DavCapabilitiesDav{}

	if err = json.Unmarshal(bytes, &varDavCapabilitiesDav); err == nil {
		*o = DavCapabilitiesDav(varDavCapabilitiesDav)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "chunking")
		delete(additionalProperties, "bulkupload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDavCapabilitiesDav struct {
	value *DavCapabilitiesDav
	isSet bool
}

func (v NullableDavCapabilitiesDav) Get() *DavCapabilitiesDav {
	return v.value
}

func (v *NullableDavCapabilitiesDav) Set(val *DavCapabilitiesDav) {
	v.value = val
	v.isSet = true
}

func (v NullableDavCapabilitiesDav) IsSet() bool {
	return v.isSet
}

func (v *NullableDavCapabilitiesDav) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavCapabilitiesDav(val *DavCapabilitiesDav) *NullableDavCapabilitiesDav {
	return &NullableDavCapabilitiesDav{value: val, isSet: true}
}

func (v NullableDavCapabilitiesDav) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavCapabilitiesDav) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


