/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesTemplateFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesTemplateFile{}

// FilesTemplateFile struct for FilesTemplateFile
type FilesTemplateFile struct {
	Basename string `json:"basename"`
	Etag string `json:"etag"`
	Fileid int64 `json:"fileid"`
	Filename NullableString `json:"filename"`
	Lastmod int64 `json:"lastmod"`
	Mime string `json:"mime"`
	Size int64 `json:"size"`
	Type string `json:"type"`
	HasPreview bool `json:"hasPreview"`
	AdditionalProperties map[string]interface{}
}

type _FilesTemplateFile FilesTemplateFile

// NewFilesTemplateFile instantiates a new FilesTemplateFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesTemplateFile(basename string, etag string, fileid int64, filename NullableString, lastmod int64, mime string, size int64, type_ string, hasPreview bool) *FilesTemplateFile {
	this := FilesTemplateFile{}
	this.Basename = basename
	this.Etag = etag
	this.Fileid = fileid
	this.Filename = filename
	this.Lastmod = lastmod
	this.Mime = mime
	this.Size = size
	this.Type = type_
	this.HasPreview = hasPreview
	return &this
}

// NewFilesTemplateFileWithDefaults instantiates a new FilesTemplateFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesTemplateFileWithDefaults() *FilesTemplateFile {
	this := FilesTemplateFile{}
	return &this
}

// GetBasename returns the Basename field value
func (o *FilesTemplateFile) GetBasename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Basename
}

// GetBasenameOk returns a tuple with the Basename field value
// and a boolean to check if the value has been set.
func (o *FilesTemplateFile) GetBasenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Basename, true
}

// SetBasename sets field value
func (o *FilesTemplateFile) SetBasename(v string) {
	o.Basename = v
}

// GetEtag returns the Etag field value
func (o *FilesTemplateFile) GetEtag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Etag
}

// GetEtagOk returns a tuple with the Etag field value
// and a boolean to check if the value has been set.
func (o *FilesTemplateFile) GetEtagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Etag, true
}

// SetEtag sets field value
func (o *FilesTemplateFile) SetEtag(v string) {
	o.Etag = v
}

// GetFileid returns the Fileid field value
func (o *FilesTemplateFile) GetFileid() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Fileid
}

// GetFileidOk returns a tuple with the Fileid field value
// and a boolean to check if the value has been set.
func (o *FilesTemplateFile) GetFileidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fileid, true
}

// SetFileid sets field value
func (o *FilesTemplateFile) SetFileid(v int64) {
	o.Fileid = v
}

// GetFilename returns the Filename field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilesTemplateFile) GetFilename() string {
	if o == nil || o.Filename.Get() == nil {
		var ret string
		return ret
	}

	return *o.Filename.Get()
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesTemplateFile) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filename.Get(), o.Filename.IsSet()
}

// SetFilename sets field value
func (o *FilesTemplateFile) SetFilename(v string) {
	o.Filename.Set(&v)
}

// GetLastmod returns the Lastmod field value
func (o *FilesTemplateFile) GetLastmod() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Lastmod
}

// GetLastmodOk returns a tuple with the Lastmod field value
// and a boolean to check if the value has been set.
func (o *FilesTemplateFile) GetLastmodOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lastmod, true
}

// SetLastmod sets field value
func (o *FilesTemplateFile) SetLastmod(v int64) {
	o.Lastmod = v
}

// GetMime returns the Mime field value
func (o *FilesTemplateFile) GetMime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mime
}

// GetMimeOk returns a tuple with the Mime field value
// and a boolean to check if the value has been set.
func (o *FilesTemplateFile) GetMimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mime, true
}

// SetMime sets field value
func (o *FilesTemplateFile) SetMime(v string) {
	o.Mime = v
}

// GetSize returns the Size field value
func (o *FilesTemplateFile) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *FilesTemplateFile) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *FilesTemplateFile) SetSize(v int64) {
	o.Size = v
}

// GetType returns the Type field value
func (o *FilesTemplateFile) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilesTemplateFile) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilesTemplateFile) SetType(v string) {
	o.Type = v
}

// GetHasPreview returns the HasPreview field value
func (o *FilesTemplateFile) GetHasPreview() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPreview
}

// GetHasPreviewOk returns a tuple with the HasPreview field value
// and a boolean to check if the value has been set.
func (o *FilesTemplateFile) GetHasPreviewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasPreview, true
}

// SetHasPreview sets field value
func (o *FilesTemplateFile) SetHasPreview(v bool) {
	o.HasPreview = v
}

func (o FilesTemplateFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesTemplateFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["basename"] = o.Basename
	toSerialize["etag"] = o.Etag
	toSerialize["fileid"] = o.Fileid
	toSerialize["filename"] = o.Filename.Get()
	toSerialize["lastmod"] = o.Lastmod
	toSerialize["mime"] = o.Mime
	toSerialize["size"] = o.Size
	toSerialize["type"] = o.Type
	toSerialize["hasPreview"] = o.HasPreview

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesTemplateFile) UnmarshalJSON(bytes []byte) (err error) {
	varFilesTemplateFile := _FilesTemplateFile{}

	if err = json.Unmarshal(bytes, &varFilesTemplateFile); err == nil {
		*o = FilesTemplateFile(varFilesTemplateFile)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "basename")
		delete(additionalProperties, "etag")
		delete(additionalProperties, "fileid")
		delete(additionalProperties, "filename")
		delete(additionalProperties, "lastmod")
		delete(additionalProperties, "mime")
		delete(additionalProperties, "size")
		delete(additionalProperties, "type")
		delete(additionalProperties, "hasPreview")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesTemplateFile struct {
	value *FilesTemplateFile
	isSet bool
}

func (v NullableFilesTemplateFile) Get() *FilesTemplateFile {
	return v.value
}

func (v *NullableFilesTemplateFile) Set(val *FilesTemplateFile) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesTemplateFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesTemplateFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesTemplateFile(val *FilesTemplateFile) *NullableFilesTemplateFile {
	return &NullableFilesTemplateFile{value: val, isSet: true}
}

func (v NullableFilesTemplateFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesTemplateFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


