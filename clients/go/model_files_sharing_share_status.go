/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesSharingShareStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesSharingShareStatus{}

// FilesSharingShareStatus struct for FilesSharingShareStatus
type FilesSharingShareStatus struct {
	ClearAt NullableInt64 `json:"clearAt,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	Message NullableString `json:"message,omitempty"`
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilesSharingShareStatus FilesSharingShareStatus

// NewFilesSharingShareStatus instantiates a new FilesSharingShareStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesSharingShareStatus() *FilesSharingShareStatus {
	this := FilesSharingShareStatus{}
	return &this
}

// NewFilesSharingShareStatusWithDefaults instantiates a new FilesSharingShareStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesSharingShareStatusWithDefaults() *FilesSharingShareStatus {
	this := FilesSharingShareStatus{}
	return &this
}

// GetClearAt returns the ClearAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesSharingShareStatus) GetClearAt() int64 {
	if o == nil || IsNil(o.ClearAt.Get()) {
		var ret int64
		return ret
	}
	return *o.ClearAt.Get()
}

// GetClearAtOk returns a tuple with the ClearAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShareStatus) GetClearAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClearAt.Get(), o.ClearAt.IsSet()
}

// HasClearAt returns a boolean if a field has been set.
func (o *FilesSharingShareStatus) HasClearAt() bool {
	if o != nil && o.ClearAt.IsSet() {
		return true
	}

	return false
}

// SetClearAt gets a reference to the given NullableInt64 and assigns it to the ClearAt field.
func (o *FilesSharingShareStatus) SetClearAt(v int64) {
	o.ClearAt.Set(&v)
}
// SetClearAtNil sets the value for ClearAt to be an explicit nil
func (o *FilesSharingShareStatus) SetClearAtNil() {
	o.ClearAt.Set(nil)
}

// UnsetClearAt ensures that no value is present for ClearAt, not even an explicit nil
func (o *FilesSharingShareStatus) UnsetClearAt() {
	o.ClearAt.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesSharingShareStatus) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShareStatus) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *FilesSharingShareStatus) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *FilesSharingShareStatus) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *FilesSharingShareStatus) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *FilesSharingShareStatus) UnsetIcon() {
	o.Icon.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesSharingShareStatus) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingShareStatus) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *FilesSharingShareStatus) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *FilesSharingShareStatus) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *FilesSharingShareStatus) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *FilesSharingShareStatus) UnsetMessage() {
	o.Message.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FilesSharingShareStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesSharingShareStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FilesSharingShareStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FilesSharingShareStatus) SetStatus(v string) {
	o.Status = &v
}

func (o FilesSharingShareStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesSharingShareStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClearAt.IsSet() {
		toSerialize["clearAt"] = o.ClearAt.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesSharingShareStatus) UnmarshalJSON(bytes []byte) (err error) {
	varFilesSharingShareStatus := _FilesSharingShareStatus{}

	if err = json.Unmarshal(bytes, &varFilesSharingShareStatus); err == nil {
		*o = FilesSharingShareStatus(varFilesSharingShareStatus)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "clearAt")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "message")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesSharingShareStatus struct {
	value *FilesSharingShareStatus
	isSet bool
}

func (v NullableFilesSharingShareStatus) Get() *FilesSharingShareStatus {
	return v.value
}

func (v *NullableFilesSharingShareStatus) Set(val *FilesSharingShareStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingShareStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingShareStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingShareStatus(val *FilesSharingShareStatus) *NullableFilesSharingShareStatus {
	return &NullableFilesSharingShareStatus{value: val, isSet: true}
}

func (v NullableFilesSharingShareStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingShareStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


