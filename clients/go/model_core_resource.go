/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the CoreResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreResource{}

// CoreResource struct for CoreResource
type CoreResource struct {
	RichObjectType string `json:"richObjectType"`
	RichObject map[string]map[string]interface{} `json:"richObject"`
	OpenGraphObject CoreOpenGraphObject `json:"openGraphObject"`
	Accessible bool `json:"accessible"`
	AdditionalProperties map[string]interface{}
}

type _CoreResource CoreResource

// NewCoreResource instantiates a new CoreResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreResource(richObjectType string, richObject map[string]map[string]interface{}, openGraphObject CoreOpenGraphObject, accessible bool) *CoreResource {
	this := CoreResource{}
	this.RichObjectType = richObjectType
	this.RichObject = richObject
	this.OpenGraphObject = openGraphObject
	this.Accessible = accessible
	return &this
}

// NewCoreResourceWithDefaults instantiates a new CoreResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreResourceWithDefaults() *CoreResource {
	this := CoreResource{}
	return &this
}

// GetRichObjectType returns the RichObjectType field value
func (o *CoreResource) GetRichObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RichObjectType
}

// GetRichObjectTypeOk returns a tuple with the RichObjectType field value
// and a boolean to check if the value has been set.
func (o *CoreResource) GetRichObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RichObjectType, true
}

// SetRichObjectType sets field value
func (o *CoreResource) SetRichObjectType(v string) {
	o.RichObjectType = v
}

// GetRichObject returns the RichObject field value
func (o *CoreResource) GetRichObject() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.RichObject
}

// GetRichObjectOk returns a tuple with the RichObject field value
// and a boolean to check if the value has been set.
func (o *CoreResource) GetRichObjectOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.RichObject, true
}

// SetRichObject sets field value
func (o *CoreResource) SetRichObject(v map[string]map[string]interface{}) {
	o.RichObject = v
}

// GetOpenGraphObject returns the OpenGraphObject field value
func (o *CoreResource) GetOpenGraphObject() CoreOpenGraphObject {
	if o == nil {
		var ret CoreOpenGraphObject
		return ret
	}

	return o.OpenGraphObject
}

// GetOpenGraphObjectOk returns a tuple with the OpenGraphObject field value
// and a boolean to check if the value has been set.
func (o *CoreResource) GetOpenGraphObjectOk() (*CoreOpenGraphObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenGraphObject, true
}

// SetOpenGraphObject sets field value
func (o *CoreResource) SetOpenGraphObject(v CoreOpenGraphObject) {
	o.OpenGraphObject = v
}

// GetAccessible returns the Accessible field value
func (o *CoreResource) GetAccessible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Accessible
}

// GetAccessibleOk returns a tuple with the Accessible field value
// and a boolean to check if the value has been set.
func (o *CoreResource) GetAccessibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Accessible, true
}

// SetAccessible sets field value
func (o *CoreResource) SetAccessible(v bool) {
	o.Accessible = v
}

func (o CoreResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["richObjectType"] = o.RichObjectType
	toSerialize["richObject"] = o.RichObject
	toSerialize["openGraphObject"] = o.OpenGraphObject
	toSerialize["accessible"] = o.Accessible

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreResource) UnmarshalJSON(bytes []byte) (err error) {
	varCoreResource := _CoreResource{}

	if err = json.Unmarshal(bytes, &varCoreResource); err == nil {
		*o = CoreResource(varCoreResource)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "richObjectType")
		delete(additionalProperties, "richObject")
		delete(additionalProperties, "openGraphObject")
		delete(additionalProperties, "accessible")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreResource struct {
	value *CoreResource
	isSet bool
}

func (v NullableCoreResource) Get() *CoreResource {
	return v.value
}

func (v *NullableCoreResource) Set(val *CoreResource) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreResource) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreResource(val *CoreResource) *NullableCoreResource {
	return &NullableCoreResource{value: val, isSet: true}
}

func (v NullableCoreResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


