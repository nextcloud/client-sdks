/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the ProvisioningApiUserDetailsQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvisioningApiUserDetailsQuota{}

// ProvisioningApiUserDetailsQuota struct for ProvisioningApiUserDetailsQuota
type ProvisioningApiUserDetailsQuota struct {
	Free *float32 `json:"free,omitempty"`
	Quota *ProvisioningApiUserDetailsQuotaQuota `json:"quota,omitempty"`
	Relative *float32 `json:"relative,omitempty"`
	Total *float32 `json:"total,omitempty"`
	Used *float32 `json:"used,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProvisioningApiUserDetailsQuota ProvisioningApiUserDetailsQuota

// NewProvisioningApiUserDetailsQuota instantiates a new ProvisioningApiUserDetailsQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningApiUserDetailsQuota() *ProvisioningApiUserDetailsQuota {
	this := ProvisioningApiUserDetailsQuota{}
	return &this
}

// NewProvisioningApiUserDetailsQuotaWithDefaults instantiates a new ProvisioningApiUserDetailsQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningApiUserDetailsQuotaWithDefaults() *ProvisioningApiUserDetailsQuota {
	this := ProvisioningApiUserDetailsQuota{}
	return &this
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *ProvisioningApiUserDetailsQuota) GetFree() float32 {
	if o == nil || IsNil(o.Free) {
		var ret float32
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningApiUserDetailsQuota) GetFreeOk() (*float32, bool) {
	if o == nil || IsNil(o.Free) {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *ProvisioningApiUserDetailsQuota) HasFree() bool {
	if o != nil && !IsNil(o.Free) {
		return true
	}

	return false
}

// SetFree gets a reference to the given float32 and assigns it to the Free field.
func (o *ProvisioningApiUserDetailsQuota) SetFree(v float32) {
	o.Free = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *ProvisioningApiUserDetailsQuota) GetQuota() ProvisioningApiUserDetailsQuotaQuota {
	if o == nil || IsNil(o.Quota) {
		var ret ProvisioningApiUserDetailsQuotaQuota
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningApiUserDetailsQuota) GetQuotaOk() (*ProvisioningApiUserDetailsQuotaQuota, bool) {
	if o == nil || IsNil(o.Quota) {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *ProvisioningApiUserDetailsQuota) HasQuota() bool {
	if o != nil && !IsNil(o.Quota) {
		return true
	}

	return false
}

// SetQuota gets a reference to the given ProvisioningApiUserDetailsQuotaQuota and assigns it to the Quota field.
func (o *ProvisioningApiUserDetailsQuota) SetQuota(v ProvisioningApiUserDetailsQuotaQuota) {
	o.Quota = &v
}

// GetRelative returns the Relative field value if set, zero value otherwise.
func (o *ProvisioningApiUserDetailsQuota) GetRelative() float32 {
	if o == nil || IsNil(o.Relative) {
		var ret float32
		return ret
	}
	return *o.Relative
}

// GetRelativeOk returns a tuple with the Relative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningApiUserDetailsQuota) GetRelativeOk() (*float32, bool) {
	if o == nil || IsNil(o.Relative) {
		return nil, false
	}
	return o.Relative, true
}

// HasRelative returns a boolean if a field has been set.
func (o *ProvisioningApiUserDetailsQuota) HasRelative() bool {
	if o != nil && !IsNil(o.Relative) {
		return true
	}

	return false
}

// SetRelative gets a reference to the given float32 and assigns it to the Relative field.
func (o *ProvisioningApiUserDetailsQuota) SetRelative(v float32) {
	o.Relative = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ProvisioningApiUserDetailsQuota) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningApiUserDetailsQuota) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ProvisioningApiUserDetailsQuota) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *ProvisioningApiUserDetailsQuota) SetTotal(v float32) {
	o.Total = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *ProvisioningApiUserDetailsQuota) GetUsed() float32 {
	if o == nil || IsNil(o.Used) {
		var ret float32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningApiUserDetailsQuota) GetUsedOk() (*float32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *ProvisioningApiUserDetailsQuota) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given float32 and assigns it to the Used field.
func (o *ProvisioningApiUserDetailsQuota) SetUsed(v float32) {
	o.Used = &v
}

func (o ProvisioningApiUserDetailsQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvisioningApiUserDetailsQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Free) {
		toSerialize["free"] = o.Free
	}
	if !IsNil(o.Quota) {
		toSerialize["quota"] = o.Quota
	}
	if !IsNil(o.Relative) {
		toSerialize["relative"] = o.Relative
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProvisioningApiUserDetailsQuota) UnmarshalJSON(bytes []byte) (err error) {
	varProvisioningApiUserDetailsQuota := _ProvisioningApiUserDetailsQuota{}

	if err = json.Unmarshal(bytes, &varProvisioningApiUserDetailsQuota); err == nil {
		*o = ProvisioningApiUserDetailsQuota(varProvisioningApiUserDetailsQuota)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "free")
		delete(additionalProperties, "quota")
		delete(additionalProperties, "relative")
		delete(additionalProperties, "total")
		delete(additionalProperties, "used")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProvisioningApiUserDetailsQuota struct {
	value *ProvisioningApiUserDetailsQuota
	isSet bool
}

func (v NullableProvisioningApiUserDetailsQuota) Get() *ProvisioningApiUserDetailsQuota {
	return v.value
}

func (v *NullableProvisioningApiUserDetailsQuota) Set(val *ProvisioningApiUserDetailsQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningApiUserDetailsQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningApiUserDetailsQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningApiUserDetailsQuota(val *ProvisioningApiUserDetailsQuota) *NullableProvisioningApiUserDetailsQuota {
	return &NullableProvisioningApiUserDetailsQuota{value: val, isSet: true}
}

func (v NullableProvisioningApiUserDetailsQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningApiUserDetailsQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


