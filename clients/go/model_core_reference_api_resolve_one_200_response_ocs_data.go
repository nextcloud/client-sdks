/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the CoreReferenceApiResolveOne200ResponseOcsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreReferenceApiResolveOne200ResponseOcsData{}

// CoreReferenceApiResolveOne200ResponseOcsData struct for CoreReferenceApiResolveOne200ResponseOcsData
type CoreReferenceApiResolveOne200ResponseOcsData struct {
	References map[string]CoreReference `json:"references"`
	AdditionalProperties map[string]interface{}
}

type _CoreReferenceApiResolveOne200ResponseOcsData CoreReferenceApiResolveOne200ResponseOcsData

// NewCoreReferenceApiResolveOne200ResponseOcsData instantiates a new CoreReferenceApiResolveOne200ResponseOcsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreReferenceApiResolveOne200ResponseOcsData(references map[string]CoreReference) *CoreReferenceApiResolveOne200ResponseOcsData {
	this := CoreReferenceApiResolveOne200ResponseOcsData{}
	this.References = references
	return &this
}

// NewCoreReferenceApiResolveOne200ResponseOcsDataWithDefaults instantiates a new CoreReferenceApiResolveOne200ResponseOcsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreReferenceApiResolveOne200ResponseOcsDataWithDefaults() *CoreReferenceApiResolveOne200ResponseOcsData {
	this := CoreReferenceApiResolveOne200ResponseOcsData{}
	return &this
}

// GetReferences returns the References field value
func (o *CoreReferenceApiResolveOne200ResponseOcsData) GetReferences() map[string]CoreReference {
	if o == nil {
		var ret map[string]CoreReference
		return ret
	}

	return o.References
}

// GetReferencesOk returns a tuple with the References field value
// and a boolean to check if the value has been set.
func (o *CoreReferenceApiResolveOne200ResponseOcsData) GetReferencesOk() (*map[string]CoreReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.References, true
}

// SetReferences sets field value
func (o *CoreReferenceApiResolveOne200ResponseOcsData) SetReferences(v map[string]CoreReference) {
	o.References = v
}

func (o CoreReferenceApiResolveOne200ResponseOcsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreReferenceApiResolveOne200ResponseOcsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["references"] = o.References

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreReferenceApiResolveOne200ResponseOcsData) UnmarshalJSON(bytes []byte) (err error) {
	varCoreReferenceApiResolveOne200ResponseOcsData := _CoreReferenceApiResolveOne200ResponseOcsData{}

	if err = json.Unmarshal(bytes, &varCoreReferenceApiResolveOne200ResponseOcsData); err == nil {
		*o = CoreReferenceApiResolveOne200ResponseOcsData(varCoreReferenceApiResolveOne200ResponseOcsData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "references")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreReferenceApiResolveOne200ResponseOcsData struct {
	value *CoreReferenceApiResolveOne200ResponseOcsData
	isSet bool
}

func (v NullableCoreReferenceApiResolveOne200ResponseOcsData) Get() *CoreReferenceApiResolveOne200ResponseOcsData {
	return v.value
}

func (v *NullableCoreReferenceApiResolveOne200ResponseOcsData) Set(val *CoreReferenceApiResolveOne200ResponseOcsData) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreReferenceApiResolveOne200ResponseOcsData) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreReferenceApiResolveOne200ResponseOcsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreReferenceApiResolveOne200ResponseOcsData(val *CoreReferenceApiResolveOne200ResponseOcsData) *NullableCoreReferenceApiResolveOne200ResponseOcsData {
	return &NullableCoreReferenceApiResolveOne200ResponseOcsData{value: val, isSet: true}
}

func (v NullableCoreReferenceApiResolveOne200ResponseOcsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreReferenceApiResolveOne200ResponseOcsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


