/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the DashboardWidget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardWidget{}

// DashboardWidget struct for DashboardWidget
type DashboardWidget struct {
	Id string `json:"id"`
	Title string `json:"title"`
	Order int64 `json:"order"`
	IconClass string `json:"icon_class"`
	IconUrl string `json:"icon_url"`
	WidgetUrl NullableString `json:"widget_url"`
	ItemIconsRound bool `json:"item_icons_round"`
	ItemApiVersions []int64 `json:"item_api_versions"`
	ReloadInterval int64 `json:"reload_interval"`
	Buttons []DashboardWidgetButtonsInner `json:"buttons,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DashboardWidget DashboardWidget

// NewDashboardWidget instantiates a new DashboardWidget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardWidget(id string, title string, order int64, iconClass string, iconUrl string, widgetUrl NullableString, itemIconsRound bool, itemApiVersions []int64, reloadInterval int64) *DashboardWidget {
	this := DashboardWidget{}
	this.Id = id
	this.Title = title
	this.Order = order
	this.IconClass = iconClass
	this.IconUrl = iconUrl
	this.WidgetUrl = widgetUrl
	this.ItemIconsRound = itemIconsRound
	this.ItemApiVersions = itemApiVersions
	this.ReloadInterval = reloadInterval
	return &this
}

// NewDashboardWidgetWithDefaults instantiates a new DashboardWidget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardWidgetWithDefaults() *DashboardWidget {
	this := DashboardWidget{}
	return &this
}

// GetId returns the Id field value
func (o *DashboardWidget) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DashboardWidget) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *DashboardWidget) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *DashboardWidget) SetTitle(v string) {
	o.Title = v
}

// GetOrder returns the Order field value
func (o *DashboardWidget) GetOrder() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetOrderOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *DashboardWidget) SetOrder(v int64) {
	o.Order = v
}

// GetIconClass returns the IconClass field value
func (o *DashboardWidget) GetIconClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconClass
}

// GetIconClassOk returns a tuple with the IconClass field value
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetIconClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconClass, true
}

// SetIconClass sets field value
func (o *DashboardWidget) SetIconClass(v string) {
	o.IconClass = v
}

// GetIconUrl returns the IconUrl field value
func (o *DashboardWidget) GetIconUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUrl, true
}

// SetIconUrl sets field value
func (o *DashboardWidget) SetIconUrl(v string) {
	o.IconUrl = v
}

// GetWidgetUrl returns the WidgetUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DashboardWidget) GetWidgetUrl() string {
	if o == nil || o.WidgetUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.WidgetUrl.Get()
}

// GetWidgetUrlOk returns a tuple with the WidgetUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DashboardWidget) GetWidgetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WidgetUrl.Get(), o.WidgetUrl.IsSet()
}

// SetWidgetUrl sets field value
func (o *DashboardWidget) SetWidgetUrl(v string) {
	o.WidgetUrl.Set(&v)
}

// GetItemIconsRound returns the ItemIconsRound field value
func (o *DashboardWidget) GetItemIconsRound() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ItemIconsRound
}

// GetItemIconsRoundOk returns a tuple with the ItemIconsRound field value
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetItemIconsRoundOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemIconsRound, true
}

// SetItemIconsRound sets field value
func (o *DashboardWidget) SetItemIconsRound(v bool) {
	o.ItemIconsRound = v
}

// GetItemApiVersions returns the ItemApiVersions field value
func (o *DashboardWidget) GetItemApiVersions() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.ItemApiVersions
}

// GetItemApiVersionsOk returns a tuple with the ItemApiVersions field value
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetItemApiVersionsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemApiVersions, true
}

// SetItemApiVersions sets field value
func (o *DashboardWidget) SetItemApiVersions(v []int64) {
	o.ItemApiVersions = v
}

// GetReloadInterval returns the ReloadInterval field value
func (o *DashboardWidget) GetReloadInterval() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ReloadInterval
}

// GetReloadIntervalOk returns a tuple with the ReloadInterval field value
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetReloadIntervalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReloadInterval, true
}

// SetReloadInterval sets field value
func (o *DashboardWidget) SetReloadInterval(v int64) {
	o.ReloadInterval = v
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *DashboardWidget) GetButtons() []DashboardWidgetButtonsInner {
	if o == nil || IsNil(o.Buttons) {
		var ret []DashboardWidgetButtonsInner
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardWidget) GetButtonsOk() ([]DashboardWidgetButtonsInner, bool) {
	if o == nil || IsNil(o.Buttons) {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *DashboardWidget) HasButtons() bool {
	if o != nil && !IsNil(o.Buttons) {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []DashboardWidgetButtonsInner and assigns it to the Buttons field.
func (o *DashboardWidget) SetButtons(v []DashboardWidgetButtonsInner) {
	o.Buttons = v
}

func (o DashboardWidget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardWidget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["order"] = o.Order
	toSerialize["icon_class"] = o.IconClass
	toSerialize["icon_url"] = o.IconUrl
	toSerialize["widget_url"] = o.WidgetUrl.Get()
	toSerialize["item_icons_round"] = o.ItemIconsRound
	toSerialize["item_api_versions"] = o.ItemApiVersions
	toSerialize["reload_interval"] = o.ReloadInterval
	if !IsNil(o.Buttons) {
		toSerialize["buttons"] = o.Buttons
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DashboardWidget) UnmarshalJSON(bytes []byte) (err error) {
	varDashboardWidget := _DashboardWidget{}

	if err = json.Unmarshal(bytes, &varDashboardWidget); err == nil {
		*o = DashboardWidget(varDashboardWidget)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "order")
		delete(additionalProperties, "icon_class")
		delete(additionalProperties, "icon_url")
		delete(additionalProperties, "widget_url")
		delete(additionalProperties, "item_icons_round")
		delete(additionalProperties, "item_api_versions")
		delete(additionalProperties, "reload_interval")
		delete(additionalProperties, "buttons")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDashboardWidget struct {
	value *DashboardWidget
	isSet bool
}

func (v NullableDashboardWidget) Get() *DashboardWidget {
	return v.value
}

func (v *NullableDashboardWidget) Set(val *DashboardWidget) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardWidget) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardWidget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardWidget(val *DashboardWidget) *NullableDashboardWidget {
	return &NullableDashboardWidget{value: val, isSet: true}
}

func (v NullableDashboardWidget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardWidget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


