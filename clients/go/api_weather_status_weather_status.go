/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


type WeatherStatusWeatherStatusAPI interface {

	/*
	WeatherStatusWeatherStatusGetFavorites Get favorites list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest
	*/
	WeatherStatusWeatherStatusGetFavorites(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest

	// WeatherStatusWeatherStatusGetFavoritesExecute executes the request
	//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	WeatherStatusWeatherStatusGetFavoritesExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error)

	/*
	WeatherStatusWeatherStatusGetForecast Get forecast for current location

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest
	*/
	WeatherStatusWeatherStatusGetForecast(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest

	// WeatherStatusWeatherStatusGetForecastExecute executes the request
	//  @return WeatherStatusWeatherStatusGetForecast200Response
	WeatherStatusWeatherStatusGetForecastExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest) (*WeatherStatusWeatherStatusGetForecast200Response, *http.Response, error)

	/*
	WeatherStatusWeatherStatusGetLocation Get stored user location

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest
	*/
	WeatherStatusWeatherStatusGetLocation(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest

	// WeatherStatusWeatherStatusGetLocationExecute executes the request
	//  @return WeatherStatusWeatherStatusGetLocation200Response
	WeatherStatusWeatherStatusGetLocationExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest) (*WeatherStatusWeatherStatusGetLocation200Response, *http.Response, error)

	/*
	WeatherStatusWeatherStatusSetFavorites Set favorites list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest
	*/
	WeatherStatusWeatherStatusSetFavorites(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest

	// WeatherStatusWeatherStatusSetFavoritesExecute executes the request
	//  @return CoreReferenceApiTouchProvider200Response
	WeatherStatusWeatherStatusSetFavoritesExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest) (*CoreReferenceApiTouchProvider200Response, *http.Response, error)

	/*
	WeatherStatusWeatherStatusSetLocation Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest
	*/
	WeatherStatusWeatherStatusSetLocation(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest

	// WeatherStatusWeatherStatusSetLocationExecute executes the request
	//  @return WeatherStatusWeatherStatusUsePersonalAddress200Response
	WeatherStatusWeatherStatusSetLocationExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest) (*WeatherStatusWeatherStatusUsePersonalAddress200Response, *http.Response, error)

	/*
	WeatherStatusWeatherStatusSetMode Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest
	*/
	WeatherStatusWeatherStatusSetMode(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest

	// WeatherStatusWeatherStatusSetModeExecute executes the request
	//  @return CoreReferenceApiTouchProvider200Response
	WeatherStatusWeatherStatusSetModeExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest) (*CoreReferenceApiTouchProvider200Response, *http.Response, error)

	/*
	WeatherStatusWeatherStatusUsePersonalAddress Try to use the address set in user personal settings as weather location

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest
	*/
	WeatherStatusWeatherStatusUsePersonalAddress(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest

	// WeatherStatusWeatherStatusUsePersonalAddressExecute executes the request
	//  @return WeatherStatusWeatherStatusUsePersonalAddress200Response
	WeatherStatusWeatherStatusUsePersonalAddressExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest) (*WeatherStatusWeatherStatusUsePersonalAddress200Response, *http.Response, error)
}

// WeatherStatusWeatherStatusAPIService WeatherStatusWeatherStatusAPI service
type WeatherStatusWeatherStatusAPIService service

type WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest struct {
	ctx context.Context
	ApiService WeatherStatusWeatherStatusAPI
	oCSAPIRequest *string
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest) OCSAPIRequest(oCSAPIRequest string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.WeatherStatusWeatherStatusGetFavoritesExecute(r)
}

/*
WeatherStatusWeatherStatusGetFavorites Get favorites list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest
*/
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusGetFavorites(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest {
	return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusGetFavoritesExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetFavoritesRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WeatherStatusWeatherStatusAPIService.WeatherStatusWeatherStatusGetFavorites")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/weather_status/api/v1/favorites"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest struct {
	ctx context.Context
	ApiService WeatherStatusWeatherStatusAPI
	oCSAPIRequest *string
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest) OCSAPIRequest(oCSAPIRequest string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest) Execute() (*WeatherStatusWeatherStatusGetForecast200Response, *http.Response, error) {
	return r.ApiService.WeatherStatusWeatherStatusGetForecastExecute(r)
}

/*
WeatherStatusWeatherStatusGetForecast Get forecast for current location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest
*/
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusGetForecast(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest {
	return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WeatherStatusWeatherStatusGetForecast200Response
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusGetForecastExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetForecastRequest) (*WeatherStatusWeatherStatusGetForecast200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WeatherStatusWeatherStatusGetForecast200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WeatherStatusWeatherStatusAPIService.WeatherStatusWeatherStatusGetForecast")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/weather_status/api/v1/forecast"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest struct {
	ctx context.Context
	ApiService WeatherStatusWeatherStatusAPI
	oCSAPIRequest *string
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest) OCSAPIRequest(oCSAPIRequest string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest) Execute() (*WeatherStatusWeatherStatusGetLocation200Response, *http.Response, error) {
	return r.ApiService.WeatherStatusWeatherStatusGetLocationExecute(r)
}

/*
WeatherStatusWeatherStatusGetLocation Get stored user location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest
*/
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusGetLocation(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest {
	return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WeatherStatusWeatherStatusGetLocation200Response
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusGetLocationExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusGetLocationRequest) (*WeatherStatusWeatherStatusGetLocation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WeatherStatusWeatherStatusGetLocation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WeatherStatusWeatherStatusAPIService.WeatherStatusWeatherStatusGetLocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/weather_status/api/v1/location"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest struct {
	ctx context.Context
	ApiService WeatherStatusWeatherStatusAPI
	favorites *[]string
	oCSAPIRequest *string
}

// Favorite addresses
func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest) Favorites(favorites []string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest {
	r.favorites = &favorites
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest) OCSAPIRequest(oCSAPIRequest string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest) Execute() (*CoreReferenceApiTouchProvider200Response, *http.Response, error) {
	return r.ApiService.WeatherStatusWeatherStatusSetFavoritesExecute(r)
}

/*
WeatherStatusWeatherStatusSetFavorites Set favorites list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest
*/
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusSetFavorites(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest {
	return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreReferenceApiTouchProvider200Response
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusSetFavoritesExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetFavoritesRequest) (*CoreReferenceApiTouchProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreReferenceApiTouchProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WeatherStatusWeatherStatusAPIService.WeatherStatusWeatherStatusSetFavorites")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/weather_status/api/v1/favorites"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.favorites == nil {
		return localVarReturnValue, nil, reportError("favorites is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	{
		t := *r.favorites
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "favorites[]", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "favorites[]", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest struct {
	ctx context.Context
	ApiService WeatherStatusWeatherStatusAPI
	oCSAPIRequest *string
	address *string
	lat *float32
	lon *float32
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest) OCSAPIRequest(oCSAPIRequest string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Any approximative or exact address
func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest) Address(address string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest {
	r.address = &address
	return r
}

// Latitude in decimal degree format
func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest) Lat(lat float32) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest {
	r.lat = &lat
	return r
}

// Longitude in decimal degree format
func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest) Lon(lon float32) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest {
	r.lon = &lon
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest) Execute() (*WeatherStatusWeatherStatusUsePersonalAddress200Response, *http.Response, error) {
	return r.ApiService.WeatherStatusWeatherStatusSetLocationExecute(r)
}

/*
WeatherStatusWeatherStatusSetLocation Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest
*/
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusSetLocation(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest {
	return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WeatherStatusWeatherStatusUsePersonalAddress200Response
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusSetLocationExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetLocationRequest) (*WeatherStatusWeatherStatusUsePersonalAddress200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WeatherStatusWeatherStatusUsePersonalAddress200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WeatherStatusWeatherStatusAPIService.WeatherStatusWeatherStatusSetLocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/weather_status/api/v1/location"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "")
	}
	if r.lat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lat", r.lat, "")
	}
	if r.lon != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lon", r.lon, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest struct {
	ctx context.Context
	ApiService WeatherStatusWeatherStatusAPI
	mode *int64
	oCSAPIRequest *string
}

// New mode
func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest) Mode(mode int64) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest {
	r.mode = &mode
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest) OCSAPIRequest(oCSAPIRequest string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest) Execute() (*CoreReferenceApiTouchProvider200Response, *http.Response, error) {
	return r.ApiService.WeatherStatusWeatherStatusSetModeExecute(r)
}

/*
WeatherStatusWeatherStatusSetMode Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest
*/
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusSetMode(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest {
	return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreReferenceApiTouchProvider200Response
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusSetModeExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusSetModeRequest) (*CoreReferenceApiTouchProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreReferenceApiTouchProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WeatherStatusWeatherStatusAPIService.WeatherStatusWeatherStatusSetMode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/weather_status/api/v1/mode"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mode == nil {
		return localVarReturnValue, nil, reportError("mode is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "mode", r.mode, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest struct {
	ctx context.Context
	ApiService WeatherStatusWeatherStatusAPI
	oCSAPIRequest *string
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest) OCSAPIRequest(oCSAPIRequest string) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest) Execute() (*WeatherStatusWeatherStatusUsePersonalAddress200Response, *http.Response, error) {
	return r.ApiService.WeatherStatusWeatherStatusUsePersonalAddressExecute(r)
}

/*
WeatherStatusWeatherStatusUsePersonalAddress Try to use the address set in user personal settings as weather location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest
*/
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusUsePersonalAddress(ctx context.Context) WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest {
	return WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WeatherStatusWeatherStatusUsePersonalAddress200Response
func (a *WeatherStatusWeatherStatusAPIService) WeatherStatusWeatherStatusUsePersonalAddressExecute(r WeatherStatusWeatherStatusAPIWeatherStatusWeatherStatusUsePersonalAddressRequest) (*WeatherStatusWeatherStatusUsePersonalAddress200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WeatherStatusWeatherStatusUsePersonalAddress200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WeatherStatusWeatherStatusAPIService.WeatherStatusWeatherStatusUsePersonalAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/weather_status/api/v1/use-personal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
