/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ProvisioningApiAppsAPI interface {

	/*
	ProvisioningApiAppsDisable Disable an app

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@return ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest
	*/
	ProvisioningApiAppsDisable(ctx context.Context, app string) ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest

	// ProvisioningApiAppsDisableExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiAppsDisableExecute(r ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiAppsEnable Enable an app

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@return ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest
	*/
	ProvisioningApiAppsEnable(ctx context.Context, app string) ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest

	// ProvisioningApiAppsEnableExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	ProvisioningApiAppsEnableExecute(r ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	ProvisioningApiAppsGetAppInfo Get the app info for an app

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param app ID of the app
	@return ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest
	*/
	ProvisioningApiAppsGetAppInfo(ctx context.Context, app string) ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest

	// ProvisioningApiAppsGetAppInfoExecute executes the request
	//  @return ProvisioningApiAppsGetAppInfo200Response
	ProvisioningApiAppsGetAppInfoExecute(r ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest) (*ProvisioningApiAppsGetAppInfo200Response, *http.Response, error)

	/*
	ProvisioningApiAppsGetApps Get a list of installed apps

	This endpoint requires admin access

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest
	*/
	ProvisioningApiAppsGetApps(ctx context.Context) ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest

	// ProvisioningApiAppsGetAppsExecute executes the request
	//  @return ProvisioningApiAppsGetApps200Response
	ProvisioningApiAppsGetAppsExecute(r ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest) (*ProvisioningApiAppsGetApps200Response, *http.Response, error)
}

// ProvisioningApiAppsAPIService ProvisioningApiAppsAPI service
type ProvisioningApiAppsAPIService service

type ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppsAPI
	app string
	oCSAPIRequest *string
}

func (r ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppsDisableExecute(r)
}

/*
ProvisioningApiAppsDisable Disable an app

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @return ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest
*/
func (a *ProvisioningApiAppsAPIService) ProvisioningApiAppsDisable(ctx context.Context, app string) ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest {
	return ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiAppsAPIService) ProvisioningApiAppsDisableExecute(r ProvisioningApiAppsAPIProvisioningApiAppsDisableRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppsAPIService.ProvisioningApiAppsDisable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/apps/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppsAPI
	app string
	oCSAPIRequest *string
}

func (r ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppsEnableExecute(r)
}

/*
ProvisioningApiAppsEnable Enable an app

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @return ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest
*/
func (a *ProvisioningApiAppsAPIService) ProvisioningApiAppsEnable(ctx context.Context, app string) ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest {
	return ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiAppsAPIService) ProvisioningApiAppsEnableExecute(r ProvisioningApiAppsAPIProvisioningApiAppsEnableRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppsAPIService.ProvisioningApiAppsEnable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/apps/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppsAPI
	app string
	oCSAPIRequest *string
}

func (r ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest) Execute() (*ProvisioningApiAppsGetAppInfo200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppsGetAppInfoExecute(r)
}

/*
ProvisioningApiAppsGetAppInfo Get the app info for an app

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @return ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest
*/
func (a *ProvisioningApiAppsAPIService) ProvisioningApiAppsGetAppInfo(ctx context.Context, app string) ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest {
	return ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
	}
}

// Execute executes the request
//  @return ProvisioningApiAppsGetAppInfo200Response
func (a *ProvisioningApiAppsAPIService) ProvisioningApiAppsGetAppInfoExecute(r ProvisioningApiAppsAPIProvisioningApiAppsGetAppInfoRequest) (*ProvisioningApiAppsGetAppInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiAppsGetAppInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppsAPIService.ProvisioningApiAppsGetAppInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/apps/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest struct {
	ctx context.Context
	ApiService ProvisioningApiAppsAPI
	oCSAPIRequest *string
	filter *string
}

func (r ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest) OCSAPIRequest(oCSAPIRequest string) ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Filter for enabled or disabled apps
func (r ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest) Filter(filter string) ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest {
	r.filter = &filter
	return r
}

func (r ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest) Execute() (*ProvisioningApiAppsGetApps200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiAppsGetAppsExecute(r)
}

/*
ProvisioningApiAppsGetApps Get a list of installed apps

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest
*/
func (a *ProvisioningApiAppsAPIService) ProvisioningApiAppsGetApps(ctx context.Context) ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest {
	return ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiAppsGetApps200Response
func (a *ProvisioningApiAppsAPIService) ProvisioningApiAppsGetAppsExecute(r ProvisioningApiAppsAPIProvisioningApiAppsGetAppsRequest) (*ProvisioningApiAppsGetApps200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiAppsGetApps200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiAppsAPIService.ProvisioningApiAppsGetApps")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/apps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
