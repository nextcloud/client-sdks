/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
	"fmt"
)

// CoreOcsGetCapabilities200ResponseOcsDataCapabilities struct for CoreOcsGetCapabilities200ResponseOcsDataCapabilities
type CoreOcsGetCapabilities200ResponseOcsDataCapabilities struct {
	CommentsCapabilities *CommentsCapabilities
	DavCapabilities *DavCapabilities
	FilesCapabilities *FilesCapabilities
	FilesSharingCapabilities *FilesSharingCapabilities
	FilesTrashbinCapabilities *FilesTrashbinCapabilities
	FilesVersionsCapabilities *FilesVersionsCapabilities
	ProvisioningApiCapabilities *ProvisioningApiCapabilities
	SharebymailCapabilities *SharebymailCapabilities
	ThemingPublicCapabilities *ThemingPublicCapabilities
	UserStatusCapabilities *UserStatusCapabilities
	WeatherStatusCapabilities *WeatherStatusCapabilities
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CoreOcsGetCapabilities200ResponseOcsDataCapabilities) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CommentsCapabilities
	err = json.Unmarshal(data, &dst.CommentsCapabilities);
	if err == nil {
		jsonCommentsCapabilities, _ := json.Marshal(dst.CommentsCapabilities)
		if string(jsonCommentsCapabilities) == "{}" { // empty struct
			dst.CommentsCapabilities = nil
		} else {
			return nil // data stored in dst.CommentsCapabilities, return on the first match
		}
	} else {
		dst.CommentsCapabilities = nil
	}

	// try to unmarshal JSON data into DavCapabilities
	err = json.Unmarshal(data, &dst.DavCapabilities);
	if err == nil {
		jsonDavCapabilities, _ := json.Marshal(dst.DavCapabilities)
		if string(jsonDavCapabilities) == "{}" { // empty struct
			dst.DavCapabilities = nil
		} else {
			return nil // data stored in dst.DavCapabilities, return on the first match
		}
	} else {
		dst.DavCapabilities = nil
	}

	// try to unmarshal JSON data into FilesCapabilities
	err = json.Unmarshal(data, &dst.FilesCapabilities);
	if err == nil {
		jsonFilesCapabilities, _ := json.Marshal(dst.FilesCapabilities)
		if string(jsonFilesCapabilities) == "{}" { // empty struct
			dst.FilesCapabilities = nil
		} else {
			return nil // data stored in dst.FilesCapabilities, return on the first match
		}
	} else {
		dst.FilesCapabilities = nil
	}

	// try to unmarshal JSON data into FilesSharingCapabilities
	err = json.Unmarshal(data, &dst.FilesSharingCapabilities);
	if err == nil {
		jsonFilesSharingCapabilities, _ := json.Marshal(dst.FilesSharingCapabilities)
		if string(jsonFilesSharingCapabilities) == "{}" { // empty struct
			dst.FilesSharingCapabilities = nil
		} else {
			return nil // data stored in dst.FilesSharingCapabilities, return on the first match
		}
	} else {
		dst.FilesSharingCapabilities = nil
	}

	// try to unmarshal JSON data into FilesTrashbinCapabilities
	err = json.Unmarshal(data, &dst.FilesTrashbinCapabilities);
	if err == nil {
		jsonFilesTrashbinCapabilities, _ := json.Marshal(dst.FilesTrashbinCapabilities)
		if string(jsonFilesTrashbinCapabilities) == "{}" { // empty struct
			dst.FilesTrashbinCapabilities = nil
		} else {
			return nil // data stored in dst.FilesTrashbinCapabilities, return on the first match
		}
	} else {
		dst.FilesTrashbinCapabilities = nil
	}

	// try to unmarshal JSON data into FilesVersionsCapabilities
	err = json.Unmarshal(data, &dst.FilesVersionsCapabilities);
	if err == nil {
		jsonFilesVersionsCapabilities, _ := json.Marshal(dst.FilesVersionsCapabilities)
		if string(jsonFilesVersionsCapabilities) == "{}" { // empty struct
			dst.FilesVersionsCapabilities = nil
		} else {
			return nil // data stored in dst.FilesVersionsCapabilities, return on the first match
		}
	} else {
		dst.FilesVersionsCapabilities = nil
	}

	// try to unmarshal JSON data into ProvisioningApiCapabilities
	err = json.Unmarshal(data, &dst.ProvisioningApiCapabilities);
	if err == nil {
		jsonProvisioningApiCapabilities, _ := json.Marshal(dst.ProvisioningApiCapabilities)
		if string(jsonProvisioningApiCapabilities) == "{}" { // empty struct
			dst.ProvisioningApiCapabilities = nil
		} else {
			return nil // data stored in dst.ProvisioningApiCapabilities, return on the first match
		}
	} else {
		dst.ProvisioningApiCapabilities = nil
	}

	// try to unmarshal JSON data into SharebymailCapabilities
	err = json.Unmarshal(data, &dst.SharebymailCapabilities);
	if err == nil {
		jsonSharebymailCapabilities, _ := json.Marshal(dst.SharebymailCapabilities)
		if string(jsonSharebymailCapabilities) == "{}" { // empty struct
			dst.SharebymailCapabilities = nil
		} else {
			return nil // data stored in dst.SharebymailCapabilities, return on the first match
		}
	} else {
		dst.SharebymailCapabilities = nil
	}

	// try to unmarshal JSON data into ThemingPublicCapabilities
	err = json.Unmarshal(data, &dst.ThemingPublicCapabilities);
	if err == nil {
		jsonThemingPublicCapabilities, _ := json.Marshal(dst.ThemingPublicCapabilities)
		if string(jsonThemingPublicCapabilities) == "{}" { // empty struct
			dst.ThemingPublicCapabilities = nil
		} else {
			return nil // data stored in dst.ThemingPublicCapabilities, return on the first match
		}
	} else {
		dst.ThemingPublicCapabilities = nil
	}

	// try to unmarshal JSON data into UserStatusCapabilities
	err = json.Unmarshal(data, &dst.UserStatusCapabilities);
	if err == nil {
		jsonUserStatusCapabilities, _ := json.Marshal(dst.UserStatusCapabilities)
		if string(jsonUserStatusCapabilities) == "{}" { // empty struct
			dst.UserStatusCapabilities = nil
		} else {
			return nil // data stored in dst.UserStatusCapabilities, return on the first match
		}
	} else {
		dst.UserStatusCapabilities = nil
	}

	// try to unmarshal JSON data into WeatherStatusCapabilities
	err = json.Unmarshal(data, &dst.WeatherStatusCapabilities);
	if err == nil {
		jsonWeatherStatusCapabilities, _ := json.Marshal(dst.WeatherStatusCapabilities)
		if string(jsonWeatherStatusCapabilities) == "{}" { // empty struct
			dst.WeatherStatusCapabilities = nil
		} else {
			return nil // data stored in dst.WeatherStatusCapabilities, return on the first match
		}
	} else {
		dst.WeatherStatusCapabilities = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CoreOcsGetCapabilities200ResponseOcsDataCapabilities)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CoreOcsGetCapabilities200ResponseOcsDataCapabilities) MarshalJSON() ([]byte, error) {
	if src.CommentsCapabilities != nil {
		return json.Marshal(&src.CommentsCapabilities)
	}

	if src.DavCapabilities != nil {
		return json.Marshal(&src.DavCapabilities)
	}

	if src.FilesCapabilities != nil {
		return json.Marshal(&src.FilesCapabilities)
	}

	if src.FilesSharingCapabilities != nil {
		return json.Marshal(&src.FilesSharingCapabilities)
	}

	if src.FilesTrashbinCapabilities != nil {
		return json.Marshal(&src.FilesTrashbinCapabilities)
	}

	if src.FilesVersionsCapabilities != nil {
		return json.Marshal(&src.FilesVersionsCapabilities)
	}

	if src.ProvisioningApiCapabilities != nil {
		return json.Marshal(&src.ProvisioningApiCapabilities)
	}

	if src.SharebymailCapabilities != nil {
		return json.Marshal(&src.SharebymailCapabilities)
	}

	if src.ThemingPublicCapabilities != nil {
		return json.Marshal(&src.ThemingPublicCapabilities)
	}

	if src.UserStatusCapabilities != nil {
		return json.Marshal(&src.UserStatusCapabilities)
	}

	if src.WeatherStatusCapabilities != nil {
		return json.Marshal(&src.WeatherStatusCapabilities)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities struct {
	value *CoreOcsGetCapabilities200ResponseOcsDataCapabilities
	isSet bool
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities) Get() *CoreOcsGetCapabilities200ResponseOcsDataCapabilities {
	return v.value
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities) Set(val *CoreOcsGetCapabilities200ResponseOcsDataCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities(val *CoreOcsGetCapabilities200ResponseOcsDataCapabilities) *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities {
	return &NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities{value: val, isSet: true}
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


