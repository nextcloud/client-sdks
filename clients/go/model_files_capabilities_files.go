/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the FilesCapabilitiesFiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesCapabilitiesFiles{}

// FilesCapabilitiesFiles struct for FilesCapabilitiesFiles
type FilesCapabilitiesFiles struct {
	Bigfilechunking bool `json:"bigfilechunking"`
	BlacklistedFiles []map[string]interface{} `json:"blacklisted_files"`
	DirectEditing FilesCapabilitiesFilesDirectEditing `json:"directEditing"`
	AdditionalProperties map[string]interface{}
}

type _FilesCapabilitiesFiles FilesCapabilitiesFiles

// NewFilesCapabilitiesFiles instantiates a new FilesCapabilitiesFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesCapabilitiesFiles(bigfilechunking bool, blacklistedFiles []map[string]interface{}, directEditing FilesCapabilitiesFilesDirectEditing) *FilesCapabilitiesFiles {
	this := FilesCapabilitiesFiles{}
	this.Bigfilechunking = bigfilechunking
	this.BlacklistedFiles = blacklistedFiles
	this.DirectEditing = directEditing
	return &this
}

// NewFilesCapabilitiesFilesWithDefaults instantiates a new FilesCapabilitiesFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesCapabilitiesFilesWithDefaults() *FilesCapabilitiesFiles {
	this := FilesCapabilitiesFiles{}
	return &this
}

// GetBigfilechunking returns the Bigfilechunking field value
func (o *FilesCapabilitiesFiles) GetBigfilechunking() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Bigfilechunking
}

// GetBigfilechunkingOk returns a tuple with the Bigfilechunking field value
// and a boolean to check if the value has been set.
func (o *FilesCapabilitiesFiles) GetBigfilechunkingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bigfilechunking, true
}

// SetBigfilechunking sets field value
func (o *FilesCapabilitiesFiles) SetBigfilechunking(v bool) {
	o.Bigfilechunking = v
}

// GetBlacklistedFiles returns the BlacklistedFiles field value
func (o *FilesCapabilitiesFiles) GetBlacklistedFiles() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.BlacklistedFiles
}

// GetBlacklistedFilesOk returns a tuple with the BlacklistedFiles field value
// and a boolean to check if the value has been set.
func (o *FilesCapabilitiesFiles) GetBlacklistedFilesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlacklistedFiles, true
}

// SetBlacklistedFiles sets field value
func (o *FilesCapabilitiesFiles) SetBlacklistedFiles(v []map[string]interface{}) {
	o.BlacklistedFiles = v
}

// GetDirectEditing returns the DirectEditing field value
func (o *FilesCapabilitiesFiles) GetDirectEditing() FilesCapabilitiesFilesDirectEditing {
	if o == nil {
		var ret FilesCapabilitiesFilesDirectEditing
		return ret
	}

	return o.DirectEditing
}

// GetDirectEditingOk returns a tuple with the DirectEditing field value
// and a boolean to check if the value has been set.
func (o *FilesCapabilitiesFiles) GetDirectEditingOk() (*FilesCapabilitiesFilesDirectEditing, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirectEditing, true
}

// SetDirectEditing sets field value
func (o *FilesCapabilitiesFiles) SetDirectEditing(v FilesCapabilitiesFilesDirectEditing) {
	o.DirectEditing = v
}

func (o FilesCapabilitiesFiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesCapabilitiesFiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bigfilechunking"] = o.Bigfilechunking
	toSerialize["blacklisted_files"] = o.BlacklistedFiles
	toSerialize["directEditing"] = o.DirectEditing

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesCapabilitiesFiles) UnmarshalJSON(bytes []byte) (err error) {
	varFilesCapabilitiesFiles := _FilesCapabilitiesFiles{}

	if err = json.Unmarshal(bytes, &varFilesCapabilitiesFiles); err == nil {
		*o = FilesCapabilitiesFiles(varFilesCapabilitiesFiles)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "bigfilechunking")
		delete(additionalProperties, "blacklisted_files")
		delete(additionalProperties, "directEditing")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesCapabilitiesFiles struct {
	value *FilesCapabilitiesFiles
	isSet bool
}

func (v NullableFilesCapabilitiesFiles) Get() *FilesCapabilitiesFiles {
	return v.value
}

func (v *NullableFilesCapabilitiesFiles) Set(val *FilesCapabilitiesFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesCapabilitiesFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesCapabilitiesFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesCapabilitiesFiles(val *FilesCapabilitiesFiles) *NullableFilesCapabilitiesFiles {
	return &NullableFilesCapabilitiesFiles{value: val, isSet: true}
}

func (v NullableFilesCapabilitiesFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesCapabilitiesFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


