/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
)

// checks if the UserStatusCapabilitiesUserStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserStatusCapabilitiesUserStatus{}

// UserStatusCapabilitiesUserStatus struct for UserStatusCapabilitiesUserStatus
type UserStatusCapabilitiesUserStatus struct {
	Enabled bool `json:"enabled"`
	Restore bool `json:"restore"`
	SupportsEmoji bool `json:"supports_emoji"`
	AdditionalProperties map[string]interface{}
}

type _UserStatusCapabilitiesUserStatus UserStatusCapabilitiesUserStatus

// NewUserStatusCapabilitiesUserStatus instantiates a new UserStatusCapabilitiesUserStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserStatusCapabilitiesUserStatus(enabled bool, restore bool, supportsEmoji bool) *UserStatusCapabilitiesUserStatus {
	this := UserStatusCapabilitiesUserStatus{}
	this.Enabled = enabled
	this.Restore = restore
	this.SupportsEmoji = supportsEmoji
	return &this
}

// NewUserStatusCapabilitiesUserStatusWithDefaults instantiates a new UserStatusCapabilitiesUserStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserStatusCapabilitiesUserStatusWithDefaults() *UserStatusCapabilitiesUserStatus {
	this := UserStatusCapabilitiesUserStatus{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *UserStatusCapabilitiesUserStatus) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UserStatusCapabilitiesUserStatus) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UserStatusCapabilitiesUserStatus) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRestore returns the Restore field value
func (o *UserStatusCapabilitiesUserStatus) GetRestore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Restore
}

// GetRestoreOk returns a tuple with the Restore field value
// and a boolean to check if the value has been set.
func (o *UserStatusCapabilitiesUserStatus) GetRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Restore, true
}

// SetRestore sets field value
func (o *UserStatusCapabilitiesUserStatus) SetRestore(v bool) {
	o.Restore = v
}

// GetSupportsEmoji returns the SupportsEmoji field value
func (o *UserStatusCapabilitiesUserStatus) GetSupportsEmoji() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsEmoji
}

// GetSupportsEmojiOk returns a tuple with the SupportsEmoji field value
// and a boolean to check if the value has been set.
func (o *UserStatusCapabilitiesUserStatus) GetSupportsEmojiOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsEmoji, true
}

// SetSupportsEmoji sets field value
func (o *UserStatusCapabilitiesUserStatus) SetSupportsEmoji(v bool) {
	o.SupportsEmoji = v
}

func (o UserStatusCapabilitiesUserStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserStatusCapabilitiesUserStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["restore"] = o.Restore
	toSerialize["supports_emoji"] = o.SupportsEmoji

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserStatusCapabilitiesUserStatus) UnmarshalJSON(bytes []byte) (err error) {
	varUserStatusCapabilitiesUserStatus := _UserStatusCapabilitiesUserStatus{}

	if err = json.Unmarshal(bytes, &varUserStatusCapabilitiesUserStatus); err == nil {
		*o = UserStatusCapabilitiesUserStatus(varUserStatusCapabilitiesUserStatus)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "restore")
		delete(additionalProperties, "supports_emoji")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserStatusCapabilitiesUserStatus struct {
	value *UserStatusCapabilitiesUserStatus
	isSet bool
}

func (v NullableUserStatusCapabilitiesUserStatus) Get() *UserStatusCapabilitiesUserStatus {
	return v.value
}

func (v *NullableUserStatusCapabilitiesUserStatus) Set(val *UserStatusCapabilitiesUserStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStatusCapabilitiesUserStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStatusCapabilitiesUserStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStatusCapabilitiesUserStatus(val *UserStatusCapabilitiesUserStatus) *NullableUserStatusCapabilitiesUserStatus {
	return &NullableUserStatusCapabilitiesUserStatus{value: val, isSet: true}
}

func (v NullableUserStatusCapabilitiesUserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStatusCapabilitiesUserStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


