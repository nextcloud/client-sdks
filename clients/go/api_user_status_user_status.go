/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type UserStatusUserStatusAPI interface {

	/*
	UserStatusUserStatusClearMessage Clear the message of the current user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest
	*/
	UserStatusUserStatusClearMessage(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest

	// UserStatusUserStatusClearMessageExecute executes the request
	//  @return CoreWhatsNewDismiss200Response
	UserStatusUserStatusClearMessageExecute(r UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error)

	/*
	UserStatusUserStatusGetStatus Get the status of the current user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest
	*/
	UserStatusUserStatusGetStatus(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest

	// UserStatusUserStatusGetStatusExecute executes the request
	//  @return UserStatusUserStatusGetStatus200Response
	UserStatusUserStatusGetStatusExecute(r UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error)

	/*
	UserStatusUserStatusRevertStatus Revert the status to the previous status

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param messageId ID of the message to delete
	@return UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest
	*/
	UserStatusUserStatusRevertStatus(ctx context.Context, messageId string) UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest

	// UserStatusUserStatusRevertStatusExecute executes the request
	//  @return UserStatusUserStatusRevertStatus200Response
	UserStatusUserStatusRevertStatusExecute(r UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest) (*UserStatusUserStatusRevertStatus200Response, *http.Response, error)

	/*
	UserStatusUserStatusSetCustomMessage Set the message to a custom message for the current user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest
	*/
	UserStatusUserStatusSetCustomMessage(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest

	// UserStatusUserStatusSetCustomMessageExecute executes the request
	//  @return UserStatusUserStatusGetStatus200Response
	UserStatusUserStatusSetCustomMessageExecute(r UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error)

	/*
	UserStatusUserStatusSetPredefinedMessage Set the message to a predefined message for the current user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest
	*/
	UserStatusUserStatusSetPredefinedMessage(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest

	// UserStatusUserStatusSetPredefinedMessageExecute executes the request
	//  @return UserStatusUserStatusGetStatus200Response
	UserStatusUserStatusSetPredefinedMessageExecute(r UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error)

	/*
	UserStatusUserStatusSetStatus Update the status type of the current user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest
	*/
	UserStatusUserStatusSetStatus(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest

	// UserStatusUserStatusSetStatusExecute executes the request
	//  @return UserStatusUserStatusGetStatus200Response
	UserStatusUserStatusSetStatusExecute(r UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error)
}

// UserStatusUserStatusAPIService UserStatusUserStatusAPI service
type UserStatusUserStatusAPIService service

type UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest struct {
	ctx context.Context
	ApiService UserStatusUserStatusAPI
	oCSAPIRequest *string
}

func (r UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest) OCSAPIRequest(oCSAPIRequest string) UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusClearMessageExecute(r)
}

/*
UserStatusUserStatusClearMessage Clear the message of the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest
*/
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusClearMessage(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest {
	return UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusClearMessageExecute(r UserStatusUserStatusAPIUserStatusUserStatusClearMessageRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusAPIService.UserStatusUserStatusClearMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/message"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest struct {
	ctx context.Context
	ApiService UserStatusUserStatusAPI
	oCSAPIRequest *string
}

func (r UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest) OCSAPIRequest(oCSAPIRequest string) UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusGetStatusExecute(r)
}

/*
UserStatusUserStatusGetStatus Get the status of the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest
*/
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusGetStatus(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest {
	return UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusGetStatusExecute(r UserStatusUserStatusAPIUserStatusUserStatusGetStatusRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusAPIService.UserStatusUserStatusGetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest struct {
	ctx context.Context
	ApiService UserStatusUserStatusAPI
	messageId string
	oCSAPIRequest *string
}

func (r UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest) OCSAPIRequest(oCSAPIRequest string) UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest) Execute() (*UserStatusUserStatusRevertStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusRevertStatusExecute(r)
}

/*
UserStatusUserStatusRevertStatus Revert the status to the previous status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param messageId ID of the message to delete
 @return UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest
*/
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusRevertStatus(ctx context.Context, messageId string) UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest {
	return UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest{
		ApiService: a,
		ctx: ctx,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusRevertStatus200Response
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusRevertStatusExecute(r UserStatusUserStatusAPIUserStatusUserStatusRevertStatusRequest) (*UserStatusUserStatusRevertStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusRevertStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusAPIService.UserStatusUserStatusRevertStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/revert/{messageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"messageId"+"}", url.PathEscape(parameterValueToString(r.messageId, "messageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest struct {
	ctx context.Context
	ApiService UserStatusUserStatusAPI
	oCSAPIRequest *string
	statusIcon *string
	message *string
	clearAt *int64
}

func (r UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest) OCSAPIRequest(oCSAPIRequest string) UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Icon of the status
func (r UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest) StatusIcon(statusIcon string) UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest {
	r.statusIcon = &statusIcon
	return r
}

// Message of the status
func (r UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest) Message(message string) UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest {
	r.message = &message
	return r
}

// When the message should be cleared
func (r UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest) ClearAt(clearAt int64) UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest {
	r.clearAt = &clearAt
	return r
}

func (r UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusSetCustomMessageExecute(r)
}

/*
UserStatusUserStatusSetCustomMessage Set the message to a custom message for the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest
*/
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusSetCustomMessage(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest {
	return UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusSetCustomMessageExecute(r UserStatusUserStatusAPIUserStatusUserStatusSetCustomMessageRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusAPIService.UserStatusUserStatusSetCustomMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/message/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.statusIcon != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statusIcon", r.statusIcon, "")
	}
	if r.message != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message", r.message, "")
	}
	if r.clearAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clearAt", r.clearAt, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest struct {
	ctx context.Context
	ApiService UserStatusUserStatusAPI
	messageId *string
	oCSAPIRequest *string
	clearAt *int64
}

// ID of the predefined message
func (r UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest) MessageId(messageId string) UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest {
	r.messageId = &messageId
	return r
}

func (r UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest) OCSAPIRequest(oCSAPIRequest string) UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// When the message should be cleared
func (r UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest) ClearAt(clearAt int64) UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest {
	r.clearAt = &clearAt
	return r
}

func (r UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusSetPredefinedMessageExecute(r)
}

/*
UserStatusUserStatusSetPredefinedMessage Set the message to a predefined message for the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest
*/
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusSetPredefinedMessage(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest {
	return UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusSetPredefinedMessageExecute(r UserStatusUserStatusAPIUserStatusUserStatusSetPredefinedMessageRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusAPIService.UserStatusUserStatusSetPredefinedMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/message/predefined"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.messageId == nil {
		return localVarReturnValue, nil, reportError("messageId is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "messageId", r.messageId, "")
	if r.clearAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clearAt", r.clearAt, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest struct {
	ctx context.Context
	ApiService UserStatusUserStatusAPI
	statusType *string
	oCSAPIRequest *string
}

// The new status type
func (r UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest) StatusType(statusType string) UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest {
	r.statusType = &statusType
	return r
}

func (r UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest) OCSAPIRequest(oCSAPIRequest string) UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusSetStatusExecute(r)
}

/*
UserStatusUserStatusSetStatus Update the status type of the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest
*/
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusSetStatus(ctx context.Context) UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest {
	return UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusAPIService) UserStatusUserStatusSetStatusExecute(r UserStatusUserStatusAPIUserStatusUserStatusSetStatusRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusAPIService.UserStatusUserStatusSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.statusType == nil {
		return localVarReturnValue, nil, reportError("statusType is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "statusType", r.statusType, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
