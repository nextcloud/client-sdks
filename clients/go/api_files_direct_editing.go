/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type FilesDirectEditingAPI interface {

	/*
	FilesDirectEditingCreate Create a file for direct editing

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesDirectEditingAPIFilesDirectEditingCreateRequest
	*/
	FilesDirectEditingCreate(ctx context.Context) FilesDirectEditingAPIFilesDirectEditingCreateRequest

	// FilesDirectEditingCreateExecute executes the request
	//  @return DavDirectGetUrl200Response
	FilesDirectEditingCreateExecute(r FilesDirectEditingAPIFilesDirectEditingCreateRequest) (*DavDirectGetUrl200Response, *http.Response, error)

	/*
	FilesDirectEditingInfo Get the direct editing capabilities

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesDirectEditingAPIFilesDirectEditingInfoRequest
	*/
	FilesDirectEditingInfo(ctx context.Context) FilesDirectEditingAPIFilesDirectEditingInfoRequest

	// FilesDirectEditingInfoExecute executes the request
	//  @return FilesDirectEditingInfo200Response
	FilesDirectEditingInfoExecute(r FilesDirectEditingAPIFilesDirectEditingInfoRequest) (*FilesDirectEditingInfo200Response, *http.Response, error)

	/*
	FilesDirectEditingOpen Open a file for direct editing

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilesDirectEditingAPIFilesDirectEditingOpenRequest
	*/
	FilesDirectEditingOpen(ctx context.Context) FilesDirectEditingAPIFilesDirectEditingOpenRequest

	// FilesDirectEditingOpenExecute executes the request
	//  @return DavDirectGetUrl200Response
	FilesDirectEditingOpenExecute(r FilesDirectEditingAPIFilesDirectEditingOpenRequest) (*DavDirectGetUrl200Response, *http.Response, error)

	/*
	FilesDirectEditingTemplates Get the templates for direct editing

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param editorId ID of the editor
	@param creatorId ID of the creator
	@return FilesDirectEditingAPIFilesDirectEditingTemplatesRequest
	*/
	FilesDirectEditingTemplates(ctx context.Context, editorId string, creatorId string) FilesDirectEditingAPIFilesDirectEditingTemplatesRequest

	// FilesDirectEditingTemplatesExecute executes the request
	//  @return FilesDirectEditingTemplates200Response
	FilesDirectEditingTemplatesExecute(r FilesDirectEditingAPIFilesDirectEditingTemplatesRequest) (*FilesDirectEditingTemplates200Response, *http.Response, error)
}

// FilesDirectEditingAPIService FilesDirectEditingAPI service
type FilesDirectEditingAPIService service

type FilesDirectEditingAPIFilesDirectEditingCreateRequest struct {
	ctx context.Context
	ApiService FilesDirectEditingAPI
	path *string
	editorId *string
	creatorId *string
	oCSAPIRequest *string
	templateId *string
}

// Path of the file
func (r FilesDirectEditingAPIFilesDirectEditingCreateRequest) Path(path string) FilesDirectEditingAPIFilesDirectEditingCreateRequest {
	r.path = &path
	return r
}

// ID of the editor
func (r FilesDirectEditingAPIFilesDirectEditingCreateRequest) EditorId(editorId string) FilesDirectEditingAPIFilesDirectEditingCreateRequest {
	r.editorId = &editorId
	return r
}

// ID of the creator
func (r FilesDirectEditingAPIFilesDirectEditingCreateRequest) CreatorId(creatorId string) FilesDirectEditingAPIFilesDirectEditingCreateRequest {
	r.creatorId = &creatorId
	return r
}

func (r FilesDirectEditingAPIFilesDirectEditingCreateRequest) OCSAPIRequest(oCSAPIRequest string) FilesDirectEditingAPIFilesDirectEditingCreateRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// ID of the template
func (r FilesDirectEditingAPIFilesDirectEditingCreateRequest) TemplateId(templateId string) FilesDirectEditingAPIFilesDirectEditingCreateRequest {
	r.templateId = &templateId
	return r
}

func (r FilesDirectEditingAPIFilesDirectEditingCreateRequest) Execute() (*DavDirectGetUrl200Response, *http.Response, error) {
	return r.ApiService.FilesDirectEditingCreateExecute(r)
}

/*
FilesDirectEditingCreate Create a file for direct editing

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesDirectEditingAPIFilesDirectEditingCreateRequest
*/
func (a *FilesDirectEditingAPIService) FilesDirectEditingCreate(ctx context.Context) FilesDirectEditingAPIFilesDirectEditingCreateRequest {
	return FilesDirectEditingAPIFilesDirectEditingCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DavDirectGetUrl200Response
func (a *FilesDirectEditingAPIService) FilesDirectEditingCreateExecute(r FilesDirectEditingAPIFilesDirectEditingCreateRequest) (*DavDirectGetUrl200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DavDirectGetUrl200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesDirectEditingAPIService.FilesDirectEditingCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files/api/v1/directEditing/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}
	if r.editorId == nil {
		return localVarReturnValue, nil, reportError("editorId is required and must be specified")
	}
	if r.creatorId == nil {
		return localVarReturnValue, nil, reportError("creatorId is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "editorId", r.editorId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "creatorId", r.creatorId, "")
	if r.templateId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "templateId", r.templateId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesDirectEditingAPIFilesDirectEditingInfoRequest struct {
	ctx context.Context
	ApiService FilesDirectEditingAPI
	oCSAPIRequest *string
}

func (r FilesDirectEditingAPIFilesDirectEditingInfoRequest) OCSAPIRequest(oCSAPIRequest string) FilesDirectEditingAPIFilesDirectEditingInfoRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r FilesDirectEditingAPIFilesDirectEditingInfoRequest) Execute() (*FilesDirectEditingInfo200Response, *http.Response, error) {
	return r.ApiService.FilesDirectEditingInfoExecute(r)
}

/*
FilesDirectEditingInfo Get the direct editing capabilities

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesDirectEditingAPIFilesDirectEditingInfoRequest
*/
func (a *FilesDirectEditingAPIService) FilesDirectEditingInfo(ctx context.Context) FilesDirectEditingAPIFilesDirectEditingInfoRequest {
	return FilesDirectEditingAPIFilesDirectEditingInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesDirectEditingInfo200Response
func (a *FilesDirectEditingAPIService) FilesDirectEditingInfoExecute(r FilesDirectEditingAPIFilesDirectEditingInfoRequest) (*FilesDirectEditingInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesDirectEditingInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesDirectEditingAPIService.FilesDirectEditingInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files/api/v1/directEditing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesDirectEditingAPIFilesDirectEditingOpenRequest struct {
	ctx context.Context
	ApiService FilesDirectEditingAPI
	path *string
	oCSAPIRequest *string
	editorId *string
	fileId *int64
}

// Path of the file
func (r FilesDirectEditingAPIFilesDirectEditingOpenRequest) Path(path string) FilesDirectEditingAPIFilesDirectEditingOpenRequest {
	r.path = &path
	return r
}

func (r FilesDirectEditingAPIFilesDirectEditingOpenRequest) OCSAPIRequest(oCSAPIRequest string) FilesDirectEditingAPIFilesDirectEditingOpenRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// ID of the editor
func (r FilesDirectEditingAPIFilesDirectEditingOpenRequest) EditorId(editorId string) FilesDirectEditingAPIFilesDirectEditingOpenRequest {
	r.editorId = &editorId
	return r
}

// ID of the file
func (r FilesDirectEditingAPIFilesDirectEditingOpenRequest) FileId(fileId int64) FilesDirectEditingAPIFilesDirectEditingOpenRequest {
	r.fileId = &fileId
	return r
}

func (r FilesDirectEditingAPIFilesDirectEditingOpenRequest) Execute() (*DavDirectGetUrl200Response, *http.Response, error) {
	return r.ApiService.FilesDirectEditingOpenExecute(r)
}

/*
FilesDirectEditingOpen Open a file for direct editing

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FilesDirectEditingAPIFilesDirectEditingOpenRequest
*/
func (a *FilesDirectEditingAPIService) FilesDirectEditingOpen(ctx context.Context) FilesDirectEditingAPIFilesDirectEditingOpenRequest {
	return FilesDirectEditingAPIFilesDirectEditingOpenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DavDirectGetUrl200Response
func (a *FilesDirectEditingAPIService) FilesDirectEditingOpenExecute(r FilesDirectEditingAPIFilesDirectEditingOpenRequest) (*DavDirectGetUrl200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DavDirectGetUrl200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesDirectEditingAPIService.FilesDirectEditingOpen")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files/api/v1/directEditing/open"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "")
	if r.editorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "editorId", r.editorId, "")
	}
	if r.fileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fileId", r.fileId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilesDirectEditingAPIFilesDirectEditingTemplatesRequest struct {
	ctx context.Context
	ApiService FilesDirectEditingAPI
	editorId string
	creatorId string
	oCSAPIRequest *string
}

func (r FilesDirectEditingAPIFilesDirectEditingTemplatesRequest) OCSAPIRequest(oCSAPIRequest string) FilesDirectEditingAPIFilesDirectEditingTemplatesRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r FilesDirectEditingAPIFilesDirectEditingTemplatesRequest) Execute() (*FilesDirectEditingTemplates200Response, *http.Response, error) {
	return r.ApiService.FilesDirectEditingTemplatesExecute(r)
}

/*
FilesDirectEditingTemplates Get the templates for direct editing

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param editorId ID of the editor
 @param creatorId ID of the creator
 @return FilesDirectEditingAPIFilesDirectEditingTemplatesRequest
*/
func (a *FilesDirectEditingAPIService) FilesDirectEditingTemplates(ctx context.Context, editorId string, creatorId string) FilesDirectEditingAPIFilesDirectEditingTemplatesRequest {
	return FilesDirectEditingAPIFilesDirectEditingTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		editorId: editorId,
		creatorId: creatorId,
	}
}

// Execute executes the request
//  @return FilesDirectEditingTemplates200Response
func (a *FilesDirectEditingAPIService) FilesDirectEditingTemplatesExecute(r FilesDirectEditingAPIFilesDirectEditingTemplatesRequest) (*FilesDirectEditingTemplates200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesDirectEditingTemplates200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesDirectEditingAPIService.FilesDirectEditingTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/files/api/v1/directEditing/templates/{editorId}/{creatorId}"
	localVarPath = strings.Replace(localVarPath, "{"+"editorId"+"}", url.PathEscape(parameterValueToString(r.editorId, "editorId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"creatorId"+"}", url.PathEscape(parameterValueToString(r.creatorId, "creatorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
