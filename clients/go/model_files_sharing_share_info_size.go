/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_sdk

import (
	"encoding/json"
	"fmt"
)

// FilesSharingShareInfoSize - struct for FilesSharingShareInfoSize
type FilesSharingShareInfoSize struct {
	Float32 *float32
	Int64 *int64
}

// float32AsFilesSharingShareInfoSize is a convenience function that returns float32 wrapped in FilesSharingShareInfoSize
func Float32AsFilesSharingShareInfoSize(v *float32) FilesSharingShareInfoSize {
	return FilesSharingShareInfoSize{
		Float32: v,
	}
}

// int64AsFilesSharingShareInfoSize is a convenience function that returns int64 wrapped in FilesSharingShareInfoSize
func Int64AsFilesSharingShareInfoSize(v *int64) FilesSharingShareInfoSize {
	return FilesSharingShareInfoSize{
		Int64: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilesSharingShareInfoSize) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into Int64
	err = newStrictDecoder(data).Decode(&dst.Int64)
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			match++
		}
	} else {
		dst.Int64 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Float32 = nil
		dst.Int64 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilesSharingShareInfoSize)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilesSharingShareInfoSize)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilesSharingShareInfoSize) MarshalJSON() ([]byte, error) {
	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilesSharingShareInfoSize) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.Int64 != nil {
		return obj.Int64
	}

	// all schemas are nil
	return nil
}

type NullableFilesSharingShareInfoSize struct {
	value *FilesSharingShareInfoSize
	isSet bool
}

func (v NullableFilesSharingShareInfoSize) Get() *FilesSharingShareInfoSize {
	return v.value
}

func (v *NullableFilesSharingShareInfoSize) Set(val *FilesSharingShareInfoSize) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingShareInfoSize) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingShareInfoSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingShareInfoSize(val *FilesSharingShareInfoSize) *NullableFilesSharingShareInfoSize {
	return &NullableFilesSharingShareInfoSize{value: val, isSet: true}
}

func (v NullableFilesSharingShareInfoSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingShareInfoSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


