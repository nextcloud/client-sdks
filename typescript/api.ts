/* tslint:disable */
/* eslint-disable */
/**
 * nextcloud
 * Nextcloud APIs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CloudFederationApiAddShare
 */
export interface CloudFederationApiAddShare {
    /**
     * 
     * @type {string}
     * @memberof CloudFederationApiAddShare
     */
    'recipientDisplayName': string;
}
/**
 * 
 * @export
 * @interface CloudFederationApiCapabilities
 */
export interface CloudFederationApiCapabilities {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm}
     * @memberof CloudFederationApiCapabilities
     */
    'ocm': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm;
}
/**
 * 
 * @export
 * @interface CloudFederationApiError
 */
export interface CloudFederationApiError {
    /**
     * 
     * @type {string}
     * @memberof CloudFederationApiError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CloudFederationApiValidationError
 */
export interface CloudFederationApiValidationError {
    /**
     * 
     * @type {string}
     * @memberof CloudFederationApiValidationError
     */
    'message': string;
    /**
     * 
     * @type {Array<CloudFederationApiValidationErrorAllOfValidationErrors>}
     * @memberof CloudFederationApiValidationError
     */
    'validationErrors': Array<CloudFederationApiValidationErrorAllOfValidationErrors>;
}
/**
 * 
 * @export
 * @interface CloudFederationApiValidationErrorAllOf
 */
export interface CloudFederationApiValidationErrorAllOf {
    /**
     * 
     * @type {Array<CloudFederationApiValidationErrorAllOfValidationErrors>}
     * @memberof CloudFederationApiValidationErrorAllOf
     */
    'validationErrors': Array<CloudFederationApiValidationErrorAllOfValidationErrors>;
}
/**
 * 
 * @export
 * @interface CloudFederationApiValidationErrorAllOfValidationErrors
 */
export interface CloudFederationApiValidationErrorAllOfValidationErrors {
    /**
     * 
     * @type {string}
     * @memberof CloudFederationApiValidationErrorAllOfValidationErrors
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CloudFederationApiValidationErrorAllOfValidationErrors
     */
    'message': string | null;
}
/**
 * 
 * @export
 * @interface CoreAppPasswordGetAppPassword200Response
 */
export interface CoreAppPasswordGetAppPassword200Response {
    /**
     * 
     * @type {CoreAppPasswordGetAppPassword200ResponseOcs}
     * @memberof CoreAppPasswordGetAppPassword200Response
     */
    'ocs': CoreAppPasswordGetAppPassword200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreAppPasswordGetAppPassword200ResponseOcs
 */
export interface CoreAppPasswordGetAppPassword200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreAppPasswordGetAppPassword200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreAppPasswordGetAppPassword200ResponseOcsData}
     * @memberof CoreAppPasswordGetAppPassword200ResponseOcs
     */
    'data': CoreAppPasswordGetAppPassword200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreAppPasswordGetAppPassword200ResponseOcsData
 */
export interface CoreAppPasswordGetAppPassword200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof CoreAppPasswordGetAppPassword200ResponseOcsData
     */
    'apppassword': string;
}
/**
 * 
 * @export
 * @interface CoreAutoCompleteGet200Response
 */
export interface CoreAutoCompleteGet200Response {
    /**
     * 
     * @type {CoreAutoCompleteGet200ResponseOcs}
     * @memberof CoreAutoCompleteGet200Response
     */
    'ocs': CoreAutoCompleteGet200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreAutoCompleteGet200ResponseOcs
 */
export interface CoreAutoCompleteGet200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreAutoCompleteGet200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreAutocompleteResult>}
     * @memberof CoreAutoCompleteGet200ResponseOcs
     */
    'data': Array<CoreAutocompleteResult>;
}
/**
 * 
 * @export
 * @interface CoreAutocompleteResult
 */
export interface CoreAutocompleteResult {
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'subline': string;
    /**
     * 
     * @type {string}
     * @memberof CoreAutocompleteResult
     */
    'shareWithDisplayNameUnique': string;
}
/**
 * 
 * @export
 * @interface CoreCollaborationResourcesListCollection200Response
 */
export interface CoreCollaborationResourcesListCollection200Response {
    /**
     * 
     * @type {CoreCollaborationResourcesListCollection200ResponseOcs}
     * @memberof CoreCollaborationResourcesListCollection200Response
     */
    'ocs': CoreCollaborationResourcesListCollection200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreCollaborationResourcesListCollection200ResponseOcs
 */
export interface CoreCollaborationResourcesListCollection200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreCollaborationResourcesListCollection200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreCollection}
     * @memberof CoreCollaborationResourcesListCollection200ResponseOcs
     */
    'data': CoreCollection;
}
/**
 * 
 * @export
 * @interface CoreCollaborationResourcesSearchCollections200Response
 */
export interface CoreCollaborationResourcesSearchCollections200Response {
    /**
     * 
     * @type {CoreCollaborationResourcesSearchCollections200ResponseOcs}
     * @memberof CoreCollaborationResourcesSearchCollections200Response
     */
    'ocs': CoreCollaborationResourcesSearchCollections200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreCollaborationResourcesSearchCollections200ResponseOcs
 */
export interface CoreCollaborationResourcesSearchCollections200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreCollaborationResourcesSearchCollections200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreCollection>}
     * @memberof CoreCollaborationResourcesSearchCollections200ResponseOcs
     */
    'data': Array<CoreCollection>;
}
/**
 * 
 * @export
 * @interface CoreCollection
 */
export interface CoreCollection {
    /**
     * 
     * @type {string}
     * @memberof CoreCollection
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreCollection
     */
    'name': string;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof CoreCollection
     */
    'resources': Array<{ [key: string]: object; }>;
}
/**
 * 
 * @export
 * @interface CoreContactsAction
 */
export interface CoreContactsAction {
    /**
     * 
     * @type {string}
     * @memberof CoreContactsAction
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CoreContactsAction
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof CoreContactsAction
     */
    'hyperlink': string;
    /**
     * 
     * @type {string}
     * @memberof CoreContactsAction
     */
    'appId': string;
}
/**
 * 
 * @export
 * @interface CoreHoverCardGetUser200Response
 */
export interface CoreHoverCardGetUser200Response {
    /**
     * 
     * @type {CoreHoverCardGetUser200ResponseOcs}
     * @memberof CoreHoverCardGetUser200Response
     */
    'ocs': CoreHoverCardGetUser200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreHoverCardGetUser200ResponseOcs
 */
export interface CoreHoverCardGetUser200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreHoverCardGetUser200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreHoverCardGetUser200ResponseOcsData}
     * @memberof CoreHoverCardGetUser200ResponseOcs
     */
    'data': CoreHoverCardGetUser200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreHoverCardGetUser200ResponseOcsData
 */
export interface CoreHoverCardGetUser200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof CoreHoverCardGetUser200ResponseOcsData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof CoreHoverCardGetUser200ResponseOcsData
     */
    'displayName': string;
    /**
     * 
     * @type {Array<CoreContactsAction>}
     * @memberof CoreHoverCardGetUser200ResponseOcsData
     */
    'actions': Array<CoreContactsAction>;
}
/**
 * 
 * @export
 * @interface CoreLoginFlowV2
 */
export interface CoreLoginFlowV2 {
    /**
     * 
     * @type {CoreLoginFlowV2Poll}
     * @memberof CoreLoginFlowV2
     */
    'poll': CoreLoginFlowV2Poll;
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface CoreLoginFlowV2Credentials
 */
export interface CoreLoginFlowV2Credentials {
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Credentials
     */
    'server': string;
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Credentials
     */
    'loginName': string;
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Credentials
     */
    'appPassword': string;
}
/**
 * 
 * @export
 * @interface CoreLoginFlowV2Poll
 */
export interface CoreLoginFlowV2Poll {
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Poll
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof CoreLoginFlowV2Poll
     */
    'endpoint': string;
}
/**
 * 
 * @export
 * @interface CoreNavigationEntry
 */
export interface CoreNavigationEntry {
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'id': string;
    /**
     * 
     * @type {CoreNavigationEntryOrder}
     * @memberof CoreNavigationEntry
     */
    'order': CoreNavigationEntryOrder;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'href': string;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreNavigationEntry
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof CoreNavigationEntry
     */
    'classes': string;
    /**
     * 
     * @type {number}
     * @memberof CoreNavigationEntry
     */
    'unread': number;
}
/**
 * @type CoreNavigationEntryOrder
 * @export
 */
export type CoreNavigationEntryOrder = number | string;

/**
 * 
 * @export
 * @interface CoreNavigationGetAppsNavigation200Response
 */
export interface CoreNavigationGetAppsNavigation200Response {
    /**
     * 
     * @type {CoreNavigationGetAppsNavigation200ResponseOcs}
     * @memberof CoreNavigationGetAppsNavigation200Response
     */
    'ocs': CoreNavigationGetAppsNavigation200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreNavigationGetAppsNavigation200ResponseOcs
 */
export interface CoreNavigationGetAppsNavigation200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreNavigationGetAppsNavigation200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreNavigationEntry>}
     * @memberof CoreNavigationGetAppsNavigation200ResponseOcs
     */
    'data': Array<CoreNavigationEntry>;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200Response
 */
export interface CoreOcsGetCapabilities200Response {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcs}
     * @memberof CoreOcsGetCapabilities200Response
     */
    'ocs': CoreOcsGetCapabilities200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcs
 */
export interface CoreOcsGetCapabilities200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreOcsGetCapabilities200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsData}
     * @memberof CoreOcsGetCapabilities200ResponseOcs
     */
    'data': CoreOcsGetCapabilities200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsData
 */
export interface CoreOcsGetCapabilities200ResponseOcsData {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataVersion}
     * @memberof CoreOcsGetCapabilities200ResponseOcsData
     */
    'version': CoreOcsGetCapabilities200ResponseOcsDataVersion;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilities}
     * @memberof CoreOcsGetCapabilities200ResponseOcsData
     */
    'capabilities': CoreOcsGetCapabilities200ResponseOcsDataCapabilities;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilities
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilities {
    [key: string]: object | any;

    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'ocm'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'dav'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'files_sharing'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'provisioning_api'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'theming'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'user_status'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilities
     */
    'weather_status'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav {
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav
     */
    'chunking': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav
     */
    'bulkupload'?: string;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'api_enabled': boolean;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'public': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'user': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'resharing': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'group_sharing'?: boolean;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'group'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup;
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'default_permissions'?: number;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'federation': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
     */
    'sharee': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation
     */
    'outgoing': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation
     */
    'incoming': boolean;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation
     */
    'expire_date': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation
     */
    'expire_date_supported': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup
     */
    'enabled': boolean;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup
     */
    'expire_date'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'enabled': boolean;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicPassword}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'password'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicPassword;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'multiple_links'?: boolean;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'expire_date'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'expire_date_internal'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'expire_date_remote'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'send_mail'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'upload'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
     */
    'upload_files_drop'?: boolean;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate
     */
    'enabled': boolean;
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate
     */
    'days'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicExpireDate
     */
    'enforced'?: boolean;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicPassword
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicPassword {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicPassword
     */
    'enforced': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublicPassword
     */
    'askForOptionalPassword': boolean;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee
     */
    'query_lookup_default': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee
     */
    'always_show_unique': boolean;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser
     */
    'send_mail': boolean;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser
     */
    'expire_date'?: CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm
     */
    'enabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm
     */
    'apiVersion': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm
     */
    'endPoint': string;
    /**
     * 
     * @type {Array<CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner>}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm
     */
    'resourceTypes': Array<CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner>;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner {
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner
     */
    'shareTypes': Array<string>;
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInnerProtocols}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner
     */
    'protocols': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInnerProtocols;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInnerProtocols
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInnerProtocols {
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInnerProtocols
     */
    'webdav': string;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi {
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi
     */
    'version': string;
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi
     */
    'AccountPropertyScopesVersion': number;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi
     */
    'AccountPropertyScopesFederatedEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi
     */
    'AccountPropertyScopesPublishedEnabled': boolean;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming {
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'slogan': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'color': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'color-text': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'color-element': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'color-element-bright': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'color-element-dark': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'logo': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'background': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'background-plain': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'background-default': boolean;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'logoheader': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
     */
    'favicon': string;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus {
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus
     */
    'enabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus
     */
    'restore': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus
     */
    'supports_emoji': boolean;
}
/**
 * 
 * @export
 * @interface CoreOcsGetCapabilities200ResponseOcsDataVersion
 */
export interface CoreOcsGetCapabilities200ResponseOcsDataVersion {
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'major': number;
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'minor': number;
    /**
     * 
     * @type {number}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'micro': number;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'string': string;
    /**
     * 
     * @type {string}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'edition': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreOcsGetCapabilities200ResponseOcsDataVersion
     */
    'extendedSupport': boolean;
}
/**
 * 
 * @export
 * @interface CoreReference
 */
export interface CoreReference {
    /**
     * 
     * @type {string}
     * @memberof CoreReference
     */
    'richObjectType': string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CoreReference
     */
    'richObject': { [key: string]: object; };
    /**
     * 
     * @type {CoreReferenceOpenGraphObject}
     * @memberof CoreReference
     */
    'openGraphObject': CoreReferenceOpenGraphObject;
    /**
     * 
     * @type {boolean}
     * @memberof CoreReference
     */
    'accessible': boolean;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiGetProvidersInfo200Response
 */
export interface CoreReferenceApiGetProvidersInfo200Response {
    /**
     * 
     * @type {CoreReferenceApiGetProvidersInfo200ResponseOcs}
     * @memberof CoreReferenceApiGetProvidersInfo200Response
     */
    'ocs': CoreReferenceApiGetProvidersInfo200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiGetProvidersInfo200ResponseOcs
 */
export interface CoreReferenceApiGetProvidersInfo200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreReferenceApiGetProvidersInfo200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreReferenceProvider>}
     * @memberof CoreReferenceApiGetProvidersInfo200ResponseOcs
     */
    'data': Array<CoreReferenceProvider>;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiResolveOne200Response
 */
export interface CoreReferenceApiResolveOne200Response {
    /**
     * 
     * @type {CoreReferenceApiResolveOne200ResponseOcs}
     * @memberof CoreReferenceApiResolveOne200Response
     */
    'ocs': CoreReferenceApiResolveOne200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiResolveOne200ResponseOcs
 */
export interface CoreReferenceApiResolveOne200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreReferenceApiResolveOne200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreReferenceApiResolveOne200ResponseOcsData}
     * @memberof CoreReferenceApiResolveOne200ResponseOcs
     */
    'data': CoreReferenceApiResolveOne200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiResolveOne200ResponseOcsData
 */
export interface CoreReferenceApiResolveOne200ResponseOcsData {
    /**
     * 
     * @type {{ [key: string]: CoreReference; }}
     * @memberof CoreReferenceApiResolveOne200ResponseOcsData
     */
    'references': { [key: string]: CoreReference; };
}
/**
 * 
 * @export
 * @interface CoreReferenceApiTouchProvider200Response
 */
export interface CoreReferenceApiTouchProvider200Response {
    /**
     * 
     * @type {CoreReferenceApiTouchProvider200ResponseOcs}
     * @memberof CoreReferenceApiTouchProvider200Response
     */
    'ocs': CoreReferenceApiTouchProvider200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiTouchProvider200ResponseOcs
 */
export interface CoreReferenceApiTouchProvider200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreReferenceApiTouchProvider200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreReferenceApiTouchProvider200ResponseOcsData}
     * @memberof CoreReferenceApiTouchProvider200ResponseOcs
     */
    'data': CoreReferenceApiTouchProvider200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreReferenceApiTouchProvider200ResponseOcsData
 */
export interface CoreReferenceApiTouchProvider200ResponseOcsData {
    /**
     * 
     * @type {boolean}
     * @memberof CoreReferenceApiTouchProvider200ResponseOcsData
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface CoreReferenceOpenGraphObject
 */
export interface CoreReferenceOpenGraphObject {
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceOpenGraphObject
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceOpenGraphObject
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceOpenGraphObject
     */
    'description': string | null;
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceOpenGraphObject
     */
    'thumb': string | null;
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceOpenGraphObject
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface CoreReferenceProvider
 */
export interface CoreReferenceProvider {
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceProvider
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceProvider
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CoreReferenceProvider
     */
    'icon_url': string;
    /**
     * 
     * @type {number}
     * @memberof CoreReferenceProvider
     */
    'order': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreReferenceProvider
     */
    'search_providers_ids': Array<string> | null;
}
/**
 * 
 * @export
 * @interface CoreStatus
 */
export interface CoreStatus {
    /**
     * 
     * @type {boolean}
     * @memberof CoreStatus
     */
    'installed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreStatus
     */
    'maintenance': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoreStatus
     */
    'needsDbUpgrade': boolean;
    /**
     * 
     * @type {string}
     * @memberof CoreStatus
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof CoreStatus
     */
    'versionstring': string;
    /**
     * 
     * @type {string}
     * @memberof CoreStatus
     */
    'edition': string;
    /**
     * 
     * @type {string}
     * @memberof CoreStatus
     */
    'productname': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreStatus
     */
    'extendedSupport': boolean;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiLanguages200Response
 */
export interface CoreTranslationApiLanguages200Response {
    /**
     * 
     * @type {CoreTranslationApiLanguages200ResponseOcs}
     * @memberof CoreTranslationApiLanguages200Response
     */
    'ocs': CoreTranslationApiLanguages200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiLanguages200ResponseOcs
 */
export interface CoreTranslationApiLanguages200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreTranslationApiLanguages200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreTranslationApiLanguages200ResponseOcsData}
     * @memberof CoreTranslationApiLanguages200ResponseOcs
     */
    'data': CoreTranslationApiLanguages200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiLanguages200ResponseOcsData
 */
export interface CoreTranslationApiLanguages200ResponseOcsData {
    /**
     * 
     * @type {Array<CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner>}
     * @memberof CoreTranslationApiLanguages200ResponseOcsData
     */
    'languages': Array<CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner>;
    /**
     * 
     * @type {boolean}
     * @memberof CoreTranslationApiLanguages200ResponseOcsData
     */
    'languageDetection': boolean;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
 */
export interface CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner {
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
     */
    'from': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
     */
    'fromLabel': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
     */
    'to': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiLanguages200ResponseOcsDataLanguagesInner
     */
    'toLabel': string;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiTranslate200Response
 */
export interface CoreTranslationApiTranslate200Response {
    /**
     * 
     * @type {CoreTranslationApiTranslate200ResponseOcs}
     * @memberof CoreTranslationApiTranslate200Response
     */
    'ocs': CoreTranslationApiTranslate200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiTranslate200ResponseOcs
 */
export interface CoreTranslationApiTranslate200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreTranslationApiTranslate200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreTranslationApiTranslate200ResponseOcsData}
     * @memberof CoreTranslationApiTranslate200ResponseOcs
     */
    'data': CoreTranslationApiTranslate200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreTranslationApiTranslate200ResponseOcsData
 */
export interface CoreTranslationApiTranslate200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiTranslate200ResponseOcsData
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof CoreTranslationApiTranslate200ResponseOcsData
     */
    'from': string | null;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchGetProviders200Response
 */
export interface CoreUnifiedSearchGetProviders200Response {
    /**
     * 
     * @type {CoreUnifiedSearchGetProviders200ResponseOcs}
     * @memberof CoreUnifiedSearchGetProviders200Response
     */
    'ocs': CoreUnifiedSearchGetProviders200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchGetProviders200ResponseOcs
 */
export interface CoreUnifiedSearchGetProviders200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreUnifiedSearchGetProviders200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<CoreUnifiedSearchProvider>}
     * @memberof CoreUnifiedSearchGetProviders200ResponseOcs
     */
    'data': Array<CoreUnifiedSearchProvider>;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchProvider
 */
export interface CoreUnifiedSearchProvider {
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchProvider
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchProvider
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CoreUnifiedSearchProvider
     */
    'order': number;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchResult
 */
export interface CoreUnifiedSearchResult {
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResult
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreUnifiedSearchResult
     */
    'isPaginated': boolean;
    /**
     * 
     * @type {Array<CoreUnifiedSearchResultEntry>}
     * @memberof CoreUnifiedSearchResult
     */
    'entries': Array<CoreUnifiedSearchResultEntry>;
    /**
     * 
     * @type {CoreUnifiedSearchResultCursor}
     * @memberof CoreUnifiedSearchResult
     */
    'cursor': CoreUnifiedSearchResultCursor | null;
}
/**
 * @type CoreUnifiedSearchResultCursor
 * @export
 */
export type CoreUnifiedSearchResultCursor = number | string;

/**
 * 
 * @export
 * @interface CoreUnifiedSearchResultEntry
 */
export interface CoreUnifiedSearchResultEntry {
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'thumbnailUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'subline': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'resourceUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'icon': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'rounded': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreUnifiedSearchResultEntry
     */
    'attributes': Array<string>;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchSearch200Response
 */
export interface CoreUnifiedSearchSearch200Response {
    /**
     * 
     * @type {CoreUnifiedSearchSearch200ResponseOcs}
     * @memberof CoreUnifiedSearchSearch200Response
     */
    'ocs': CoreUnifiedSearchSearch200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreUnifiedSearchSearch200ResponseOcs
 */
export interface CoreUnifiedSearchSearch200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreUnifiedSearchSearch200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreUnifiedSearchResult}
     * @memberof CoreUnifiedSearchSearch200ResponseOcs
     */
    'data': CoreUnifiedSearchResult;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewDismiss200Response
 */
export interface CoreWhatsNewDismiss200Response {
    /**
     * 
     * @type {CoreWhatsNewDismiss200ResponseOcs}
     * @memberof CoreWhatsNewDismiss200Response
     */
    'ocs': CoreWhatsNewDismiss200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewDismiss200ResponseOcs
 */
export interface CoreWhatsNewDismiss200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreWhatsNewDismiss200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CoreWhatsNewDismiss200ResponseOcs
     */
    'data': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface CoreWhatsNewGet200Response
 */
export interface CoreWhatsNewGet200Response {
    /**
     * 
     * @type {CoreWhatsNewGet200ResponseOcs}
     * @memberof CoreWhatsNewGet200Response
     */
    'ocs': CoreWhatsNewGet200ResponseOcs;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewGet200ResponseOcs
 */
export interface CoreWhatsNewGet200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof CoreWhatsNewGet200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {CoreWhatsNewGet200ResponseOcsData}
     * @memberof CoreWhatsNewGet200ResponseOcs
     */
    'data': CoreWhatsNewGet200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewGet200ResponseOcsData
 */
export interface CoreWhatsNewGet200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof CoreWhatsNewGet200ResponseOcsData
     */
    'changelogURL': string;
    /**
     * 
     * @type {string}
     * @memberof CoreWhatsNewGet200ResponseOcsData
     */
    'product': string;
    /**
     * 
     * @type {string}
     * @memberof CoreWhatsNewGet200ResponseOcsData
     */
    'version': string;
    /**
     * 
     * @type {CoreWhatsNewGet200ResponseOcsDataWhatsNew}
     * @memberof CoreWhatsNewGet200ResponseOcsData
     */
    'whatsNew': CoreWhatsNewGet200ResponseOcsDataWhatsNew;
}
/**
 * 
 * @export
 * @interface CoreWhatsNewGet200ResponseOcsDataWhatsNew
 */
export interface CoreWhatsNewGet200ResponseOcsDataWhatsNew {
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreWhatsNewGet200ResponseOcsDataWhatsNew
     */
    'regular': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CoreWhatsNewGet200ResponseOcsDataWhatsNew
     */
    'admin': Array<string>;
}
/**
 * 
 * @export
 * @interface CoreWipeCheckWipe200Response
 */
export interface CoreWipeCheckWipe200Response {
    /**
     * 
     * @type {boolean}
     * @memberof CoreWipeCheckWipe200Response
     */
    'wipe': boolean;
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgetItems200Response
 */
export interface DashboardDashboardApiGetWidgetItems200Response {
    /**
     * 
     * @type {DashboardDashboardApiGetWidgetItems200ResponseOcs}
     * @memberof DashboardDashboardApiGetWidgetItems200Response
     */
    'ocs': DashboardDashboardApiGetWidgetItems200ResponseOcs;
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgetItems200ResponseOcs
 */
export interface DashboardDashboardApiGetWidgetItems200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof DashboardDashboardApiGetWidgetItems200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {{ [key: string]: Array<DashboardWidgetItem>; }}
     * @memberof DashboardDashboardApiGetWidgetItems200ResponseOcs
     */
    'data': { [key: string]: Array<DashboardWidgetItem>; };
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgets200Response
 */
export interface DashboardDashboardApiGetWidgets200Response {
    /**
     * 
     * @type {DashboardDashboardApiGetWidgets200ResponseOcs}
     * @memberof DashboardDashboardApiGetWidgets200Response
     */
    'ocs': DashboardDashboardApiGetWidgets200ResponseOcs;
}
/**
 * 
 * @export
 * @interface DashboardDashboardApiGetWidgets200ResponseOcs
 */
export interface DashboardDashboardApiGetWidgets200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof DashboardDashboardApiGetWidgets200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<DashboardWidget>}
     * @memberof DashboardDashboardApiGetWidgets200ResponseOcs
     */
    'data': Array<DashboardWidget>;
}
/**
 * 
 * @export
 * @interface DashboardWidget
 */
export interface DashboardWidget {
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof DashboardWidget
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'icon_class': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'icon_url': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidget
     */
    'widget_url': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DashboardWidget
     */
    'item_icons_round': boolean;
    /**
     * 
     * @type {Array<DashboardWidgetButtonsInner>}
     * @memberof DashboardWidget
     */
    'buttons'?: Array<DashboardWidgetButtonsInner>;
}
/**
 * 
 * @export
 * @interface DashboardWidgetButtonsInner
 */
export interface DashboardWidgetButtonsInner {
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetButtonsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetButtonsInner
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetButtonsInner
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface DashboardWidgetItem
 */
export interface DashboardWidgetItem {
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'subtitle': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'iconUrl': string;
    /**
     * 
     * @type {string}
     * @memberof DashboardWidgetItem
     */
    'sinceId': string;
}
/**
 * 
 * @export
 * @interface DavCapabilities
 */
export interface DavCapabilities {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav}
     * @memberof DavCapabilities
     */
    'dav': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav;
}
/**
 * 
 * @export
 * @interface DavDirectGetUrl200Response
 */
export interface DavDirectGetUrl200Response {
    /**
     * 
     * @type {DavDirectGetUrl200ResponseOcs}
     * @memberof DavDirectGetUrl200Response
     */
    'ocs': DavDirectGetUrl200ResponseOcs;
}
/**
 * 
 * @export
 * @interface DavDirectGetUrl200ResponseOcs
 */
export interface DavDirectGetUrl200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof DavDirectGetUrl200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {DavDirectGetUrl200ResponseOcsData}
     * @memberof DavDirectGetUrl200ResponseOcs
     */
    'data': DavDirectGetUrl200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface DavDirectGetUrl200ResponseOcsData
 */
export interface DavDirectGetUrl200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof DavDirectGetUrl200ResponseOcsData
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface FilesSharingCapabilities
 */
export interface FilesSharingCapabilities {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing}
     * @memberof FilesSharingCapabilities
     */
    'files_sharing': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing;
}
/**
 * 
 * @export
 * @interface FilesSharingDeletedShare
 */
export interface FilesSharingDeletedShare {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'share_type': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'uid_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'displayname_owner': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'permissions': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'stime': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'uid_file_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'displayname_file_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'item_type': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'mimetype': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'storage': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'item_source': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'file_source': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'file_parent': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingDeletedShare
     */
    'file_target': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'expiration': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'share_with': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'share_with_displayname': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingDeletedShare
     */
    'share_with_link': string | null;
}
/**
 * 
 * @export
 * @interface FilesSharingDeletedShareapiList200Response
 */
export interface FilesSharingDeletedShareapiList200Response {
    /**
     * 
     * @type {FilesSharingDeletedShareapiList200ResponseOcs}
     * @memberof FilesSharingDeletedShareapiList200Response
     */
    'ocs': FilesSharingDeletedShareapiList200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingDeletedShareapiList200ResponseOcs
 */
export interface FilesSharingDeletedShareapiList200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingDeletedShareapiList200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<FilesSharingDeletedShare>}
     * @memberof FilesSharingDeletedShareapiList200ResponseOcs
     */
    'data': Array<FilesSharingDeletedShare>;
}
/**
 * 
 * @export
 * @interface FilesSharingLookup
 */
export interface FilesSharingLookup {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingLookup
     */
    'value': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingLookup
     */
    'verified': number;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteGetShare200Response
 */
export interface FilesSharingRemoteGetShare200Response {
    /**
     * 
     * @type {FilesSharingRemoteGetShare200ResponseOcs}
     * @memberof FilesSharingRemoteGetShare200Response
     */
    'ocs': FilesSharingRemoteGetShare200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteGetShare200ResponseOcs
 */
export interface FilesSharingRemoteGetShare200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingRemoteGetShare200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesSharingRemoteShare}
     * @memberof FilesSharingRemoteGetShare200ResponseOcs
     */
    'data': FilesSharingRemoteShare;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteGetShares200Response
 */
export interface FilesSharingRemoteGetShares200Response {
    /**
     * 
     * @type {FilesSharingRemoteGetShares200ResponseOcs}
     * @memberof FilesSharingRemoteGetShares200Response
     */
    'ocs': FilesSharingRemoteGetShares200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteGetShares200ResponseOcs
 */
export interface FilesSharingRemoteGetShares200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingRemoteGetShares200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<FilesSharingRemoteShare>}
     * @memberof FilesSharingRemoteGetShares200ResponseOcs
     */
    'data': Array<FilesSharingRemoteShare>;
}
/**
 * 
 * @export
 * @interface FilesSharingRemoteShare
 */
export interface FilesSharingRemoteShare {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingRemoteShare
     */
    'accepted': boolean;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'file_id': number | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'mimetype': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'mountpoint': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'mtime': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'owner': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'parent': number | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'permissions': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'remote': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'remote_id': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'share_token': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingRemoteShare
     */
    'share_type': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'type': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingRemoteShare
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShare
 */
export interface FilesSharingShare {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'attributes': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShare
     */
    'can_delete': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShare
     */
    'can_edit': boolean;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'displayname_file_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'displayname_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'expiration': string | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'file_parent': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'file_source': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'file_target': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShare
     */
    'has_preview': boolean;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'item_source': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'item_type': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'mail_send': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'mimetype': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'note': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'password': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'password_expiration_time': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'path': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'permissions': number;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShare
     */
    'send_password_by_talk': boolean | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'share_type': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with_avatar': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with_displayname': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'share_with_link': string | null;
    /**
     * 
     * @type {FilesSharingShareStatus}
     * @memberof FilesSharingShare
     */
    'status': FilesSharingShareStatus | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'stime': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShare
     */
    'storage': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'storage_id': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'token': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'uid_file_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'uid_owner': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShare
     */
    'url': string | null;
}
/**
 * 
 * @export
 * @interface FilesSharingShareInfo
 */
export interface FilesSharingShareInfo {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'parentId': number;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'mtime': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareInfo
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'permissions': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareInfo
     */
    'mimetype': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareInfo
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareInfo
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareInfo
     */
    'etag': string;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof FilesSharingShareInfo
     */
    'children': Array<{ [key: string]: object; }> | null;
}
/**
 * @type FilesSharingShareStatus
 * @export
 */
export type FilesSharingShareStatus = FilesSharingShareStatusOneOf | number;

/**
 * 
 * @export
 * @interface FilesSharingShareStatusOneOf
 */
export interface FilesSharingShareStatusOneOf {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareStatusOneOf
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareStatusOneOf
     */
    'message': string | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareStatusOneOf
     */
    'icon': string | null;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareStatusOneOf
     */
    'clearAt': number | null;
}
/**
 * 
 * @export
 * @interface FilesSharingShareapiCreateShare200Response
 */
export interface FilesSharingShareapiCreateShare200Response {
    /**
     * 
     * @type {FilesSharingShareapiCreateShare200ResponseOcs}
     * @memberof FilesSharingShareapiCreateShare200Response
     */
    'ocs': FilesSharingShareapiCreateShare200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingShareapiCreateShare200ResponseOcs
 */
export interface FilesSharingShareapiCreateShare200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingShareapiCreateShare200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesSharingShare}
     * @memberof FilesSharingShareapiCreateShare200ResponseOcs
     */
    'data': FilesSharingShare;
}
/**
 * 
 * @export
 * @interface FilesSharingShareapiGetShares200Response
 */
export interface FilesSharingShareapiGetShares200Response {
    /**
     * 
     * @type {FilesSharingShareapiGetShares200ResponseOcs}
     * @memberof FilesSharingShareapiGetShares200Response
     */
    'ocs': FilesSharingShareapiGetShares200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingShareapiGetShares200ResponseOcs
 */
export interface FilesSharingShareapiGetShares200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingShareapiGetShares200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<FilesSharingShare>}
     * @memberof FilesSharingShareapiGetShares200ResponseOcs
     */
    'data': Array<FilesSharingShare>;
}
/**
 * 
 * @export
 * @interface FilesSharingSharee
 */
export interface FilesSharingSharee {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingSharee
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingSharee
     */
    'label': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeCircle
 */
export interface FilesSharingShareeCircle {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeCircle
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircle
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircle
     */
    'shareWithDescription': string;
    /**
     * 
     * @type {FilesSharingShareeCircleAllOfValue}
     * @memberof FilesSharingShareeCircle
     */
    'value': FilesSharingShareeCircleAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeCircleAllOf
 */
export interface FilesSharingShareeCircleAllOf {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircleAllOf
     */
    'shareWithDescription': string;
    /**
     * 
     * @type {FilesSharingShareeCircleAllOfValue}
     * @memberof FilesSharingShareeCircleAllOf
     */
    'value': FilesSharingShareeCircleAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeCircleAllOfValue
 */
export interface FilesSharingShareeCircleAllOfValue {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeCircleAllOfValue
     */
    'shareType': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircleAllOfValue
     */
    'shareWith': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircleAllOfValue
     */
    'circle': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeCircleAllOfValueAllOf
 */
export interface FilesSharingShareeCircleAllOfValueAllOf {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeCircleAllOfValueAllOf
     */
    'circle': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeEmail
 */
export interface FilesSharingShareeEmail {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeEmail
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmail
     */
    'shareWithDisplayNameUnique': string;
    /**
     * 
     * @type {FilesSharingShareeValue}
     * @memberof FilesSharingShareeEmail
     */
    'value': FilesSharingShareeValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeEmailAllOf
 */
export interface FilesSharingShareeEmailAllOf {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmailAllOf
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmailAllOf
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmailAllOf
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeEmailAllOf
     */
    'shareWithDisplayNameUnique': string;
    /**
     * 
     * @type {FilesSharingShareeValue}
     * @memberof FilesSharingShareeEmailAllOf
     */
    'value': FilesSharingShareeValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeLookup
 */
export interface FilesSharingShareeLookup {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeLookup
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeLookup
     */
    'label': string;
    /**
     * 
     * @type {FilesSharingShareeLookupAllOfExtra}
     * @memberof FilesSharingShareeLookup
     */
    'extra': FilesSharingShareeLookupAllOfExtra;
    /**
     * 
     * @type {FilesSharingShareeLookupAllOfValue}
     * @memberof FilesSharingShareeLookup
     */
    'value': FilesSharingShareeLookupAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeLookupAllOf
 */
export interface FilesSharingShareeLookupAllOf {
    /**
     * 
     * @type {FilesSharingShareeLookupAllOfExtra}
     * @memberof FilesSharingShareeLookupAllOf
     */
    'extra': FilesSharingShareeLookupAllOfExtra;
    /**
     * 
     * @type {FilesSharingShareeLookupAllOfValue}
     * @memberof FilesSharingShareeLookupAllOf
     */
    'value': FilesSharingShareeLookupAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeLookupAllOfExtra
 */
export interface FilesSharingShareeLookupAllOfExtra {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'federationId': string;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'name': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'email': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'address': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'website': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'twitter': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'phone': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'twitter_signature': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'website_signature': FilesSharingLookup;
    /**
     * 
     * @type {FilesSharingLookup}
     * @memberof FilesSharingShareeLookupAllOfExtra
     */
    'userid': FilesSharingLookup;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeLookupAllOfValue
 */
export interface FilesSharingShareeLookupAllOfValue {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeLookupAllOfValue
     */
    'shareType': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeLookupAllOfValue
     */
    'shareWith': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShareeLookupAllOfValue
     */
    'globalScale': boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeLookupAllOfValueAllOf
 */
export interface FilesSharingShareeLookupAllOfValueAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShareeLookupAllOfValueAllOf
     */
    'globalScale': boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemote
 */
export interface FilesSharingShareeRemote {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeRemote
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemote
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemote
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemote
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemote
     */
    'type': string;
    /**
     * 
     * @type {FilesSharingShareeRemoteAllOfValue}
     * @memberof FilesSharingShareeRemote
     */
    'value': FilesSharingShareeRemoteAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemoteAllOf
 */
export interface FilesSharingShareeRemoteAllOf {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteAllOf
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteAllOf
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteAllOf
     */
    'type': string;
    /**
     * 
     * @type {FilesSharingShareeRemoteAllOfValue}
     * @memberof FilesSharingShareeRemoteAllOf
     */
    'value': FilesSharingShareeRemoteAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemoteAllOfValue
 */
export interface FilesSharingShareeRemoteAllOfValue {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeRemoteAllOfValue
     */
    'shareType': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteAllOfValue
     */
    'shareWith': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteAllOfValue
     */
    'server': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemoteAllOfValueAllOf
 */
export interface FilesSharingShareeRemoteAllOfValueAllOf {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteAllOfValueAllOf
     */
    'server': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemoteGroup
 */
export interface FilesSharingShareeRemoteGroup {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'guid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'name': string;
    /**
     * 
     * @type {FilesSharingShareeRemoteAllOfValue}
     * @memberof FilesSharingShareeRemoteGroup
     */
    'value': FilesSharingShareeRemoteAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeRemoteGroupAllOf
 */
export interface FilesSharingShareeRemoteGroupAllOf {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteGroupAllOf
     */
    'guid': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeRemoteGroupAllOf
     */
    'name': string;
    /**
     * 
     * @type {FilesSharingShareeRemoteAllOfValue}
     * @memberof FilesSharingShareeRemoteGroupAllOf
     */
    'value': FilesSharingShareeRemoteAllOfValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeUser
 */
export interface FilesSharingShareeUser {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeUser
     */
    'count': number | null;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUser
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUser
     */
    'subline': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUser
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUser
     */
    'shareWithDisplayNameUnique': string;
    /**
     * 
     * @type {FilesSharingShareeUserAllOfStatus}
     * @memberof FilesSharingShareeUser
     */
    'status': FilesSharingShareeUserAllOfStatus;
    /**
     * 
     * @type {FilesSharingShareeValue}
     * @memberof FilesSharingShareeUser
     */
    'value': FilesSharingShareeValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeUserAllOf
 */
export interface FilesSharingShareeUserAllOf {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOf
     */
    'subline': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOf
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOf
     */
    'shareWithDisplayNameUnique': string;
    /**
     * 
     * @type {FilesSharingShareeUserAllOfStatus}
     * @memberof FilesSharingShareeUserAllOf
     */
    'status': FilesSharingShareeUserAllOfStatus;
    /**
     * 
     * @type {FilesSharingShareeValue}
     * @memberof FilesSharingShareeUserAllOf
     */
    'value': FilesSharingShareeValue;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeUserAllOfStatus
 */
export interface FilesSharingShareeUserAllOfStatus {
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOfStatus
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOfStatus
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeUserAllOfStatus
     */
    'icon': string;
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeUserAllOfStatus
     */
    'clearAt': number | null;
}
/**
 * 
 * @export
 * @interface FilesSharingShareeValue
 */
export interface FilesSharingShareeValue {
    /**
     * 
     * @type {number}
     * @memberof FilesSharingShareeValue
     */
    'shareType': number;
    /**
     * 
     * @type {string}
     * @memberof FilesSharingShareeValue
     */
    'shareWith': string;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesRecommendedResult
 */
export interface FilesSharingShareesRecommendedResult {
    /**
     * 
     * @type {FilesSharingShareesRecommendedResultExact}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'exact': FilesSharingShareesRecommendedResultExact;
    /**
     * 
     * @type {Array<FilesSharingShareeEmail>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'emails': Array<FilesSharingShareeEmail>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'groups': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemoteGroup>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'remote_groups': Array<FilesSharingShareeRemoteGroup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemote>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'remotes': Array<FilesSharingShareeRemote>;
    /**
     * 
     * @type {Array<FilesSharingShareeUser>}
     * @memberof FilesSharingShareesRecommendedResult
     */
    'users': Array<FilesSharingShareeUser>;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesRecommendedResultExact
 */
export interface FilesSharingShareesRecommendedResultExact {
    /**
     * 
     * @type {Array<FilesSharingShareeEmail>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'emails': Array<FilesSharingShareeEmail>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'groups': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemoteGroup>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'remote_groups': Array<FilesSharingShareeRemoteGroup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemote>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'remotes': Array<FilesSharingShareeRemote>;
    /**
     * 
     * @type {Array<FilesSharingShareeUser>}
     * @memberof FilesSharingShareesRecommendedResultExact
     */
    'users': Array<FilesSharingShareeUser>;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesSearchResult
 */
export interface FilesSharingShareesSearchResult {
    /**
     * 
     * @type {FilesSharingShareesSearchResultExact}
     * @memberof FilesSharingShareesSearchResult
     */
    'exact': FilesSharingShareesSearchResultExact;
    /**
     * 
     * @type {Array<FilesSharingShareeCircle>}
     * @memberof FilesSharingShareesSearchResult
     */
    'circles': Array<FilesSharingShareeCircle>;
    /**
     * 
     * @type {Array<FilesSharingShareeEmail>}
     * @memberof FilesSharingShareesSearchResult
     */
    'emails': Array<FilesSharingShareeEmail>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesSearchResult
     */
    'groups': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeLookup>}
     * @memberof FilesSharingShareesSearchResult
     */
    'lookup': Array<FilesSharingShareeLookup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemoteGroup>}
     * @memberof FilesSharingShareesSearchResult
     */
    'remote_groups': Array<FilesSharingShareeRemoteGroup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemote>}
     * @memberof FilesSharingShareesSearchResult
     */
    'remotes': Array<FilesSharingShareeRemote>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesSearchResult
     */
    'rooms': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeUser>}
     * @memberof FilesSharingShareesSearchResult
     */
    'users': Array<FilesSharingShareeUser>;
    /**
     * 
     * @type {boolean}
     * @memberof FilesSharingShareesSearchResult
     */
    'lookupEnabled': boolean;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesSearchResultExact
 */
export interface FilesSharingShareesSearchResultExact {
    /**
     * 
     * @type {Array<FilesSharingShareeCircle>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'circles': Array<FilesSharingShareeCircle>;
    /**
     * 
     * @type {Array<FilesSharingShareeEmail>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'emails': Array<FilesSharingShareeEmail>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'groups': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemoteGroup>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'remote_groups': Array<FilesSharingShareeRemoteGroup>;
    /**
     * 
     * @type {Array<FilesSharingShareeRemote>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'remotes': Array<FilesSharingShareeRemote>;
    /**
     * 
     * @type {Array<FilesSharingSharee>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'rooms': Array<FilesSharingSharee>;
    /**
     * 
     * @type {Array<FilesSharingShareeUser>}
     * @memberof FilesSharingShareesSearchResultExact
     */
    'users': Array<FilesSharingShareeUser>;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesapiFindRecommended200Response
 */
export interface FilesSharingShareesapiFindRecommended200Response {
    /**
     * 
     * @type {FilesSharingShareesapiFindRecommended200ResponseOcs}
     * @memberof FilesSharingShareesapiFindRecommended200Response
     */
    'ocs': FilesSharingShareesapiFindRecommended200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesapiFindRecommended200ResponseOcs
 */
export interface FilesSharingShareesapiFindRecommended200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingShareesapiFindRecommended200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesSharingShareesRecommendedResult}
     * @memberof FilesSharingShareesapiFindRecommended200ResponseOcs
     */
    'data': FilesSharingShareesRecommendedResult;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesapiSearch200Response
 */
export interface FilesSharingShareesapiSearch200Response {
    /**
     * 
     * @type {FilesSharingShareesapiSearch200ResponseOcs}
     * @memberof FilesSharingShareesapiSearch200Response
     */
    'ocs': FilesSharingShareesapiSearch200ResponseOcs;
}
/**
 * 
 * @export
 * @interface FilesSharingShareesapiSearch200ResponseOcs
 */
export interface FilesSharingShareesapiSearch200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof FilesSharingShareesapiSearch200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {FilesSharingShareesSearchResult}
     * @memberof FilesSharingShareesapiSearch200ResponseOcs
     */
    'data': FilesSharingShareesSearchResult;
}
/**
 * 
 * @export
 * @interface OCSMeta
 */
export interface OCSMeta {
    /**
     * 
     * @type {string}
     * @memberof OCSMeta
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof OCSMeta
     */
    'statuscode': number;
    /**
     * 
     * @type {string}
     * @memberof OCSMeta
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof OCSMeta
     */
    'totalitems'?: string;
    /**
     * 
     * @type {string}
     * @memberof OCSMeta
     */
    'itemsperpage'?: string;
}
/**
 * 
 * @export
 * @interface Oauth2OauthApiGetToken200Response
 */
export interface Oauth2OauthApiGetToken200Response {
    /**
     * 
     * @type {string}
     * @memberof Oauth2OauthApiGetToken200Response
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2OauthApiGetToken200Response
     */
    'token_type': string;
    /**
     * 
     * @type {number}
     * @memberof Oauth2OauthApiGetToken200Response
     */
    'expires_in': number;
    /**
     * 
     * @type {string}
     * @memberof Oauth2OauthApiGetToken200Response
     */
    'refresh_token': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2OauthApiGetToken200Response
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetApps200Response
 */
export interface ProvisioningApiAppConfigGetApps200Response {
    /**
     * 
     * @type {ProvisioningApiAppConfigGetApps200ResponseOcs}
     * @memberof ProvisioningApiAppConfigGetApps200Response
     */
    'ocs': ProvisioningApiAppConfigGetApps200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetApps200ResponseOcs
 */
export interface ProvisioningApiAppConfigGetApps200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiAppConfigGetApps200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiAppConfigGetApps200ResponseOcsData}
     * @memberof ProvisioningApiAppConfigGetApps200ResponseOcs
     */
    'data': ProvisioningApiAppConfigGetApps200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetApps200ResponseOcsData
 */
export interface ProvisioningApiAppConfigGetApps200ResponseOcsData {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiAppConfigGetApps200ResponseOcsData
     */
    'data': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetValue200Response
 */
export interface ProvisioningApiAppConfigGetValue200Response {
    /**
     * 
     * @type {ProvisioningApiAppConfigGetValue200ResponseOcs}
     * @memberof ProvisioningApiAppConfigGetValue200Response
     */
    'ocs': ProvisioningApiAppConfigGetValue200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetValue200ResponseOcs
 */
export interface ProvisioningApiAppConfigGetValue200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiAppConfigGetValue200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiAppConfigGetValue200ResponseOcsData}
     * @memberof ProvisioningApiAppConfigGetValue200ResponseOcs
     */
    'data': ProvisioningApiAppConfigGetValue200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppConfigGetValue200ResponseOcsData
 */
export interface ProvisioningApiAppConfigGetValue200ResponseOcsData {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppConfigGetValue200ResponseOcsData
     */
    'data': string;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppInfo
 */
export interface ProvisioningApiAppInfo {
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiAppInfo
     */
    'active': boolean | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'activity': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'author': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'background-jobs': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'bugs': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'category': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'collaboration': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'commands': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'default_enable': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'dependencies': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'discussion': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'documentation': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'groups': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'id': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'info': object | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiAppInfo
     */
    'internal': boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiAppInfo
     */
    'level': number | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'licence': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'namespace': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'navigations': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'preview': object | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiAppInfo
     */
    'previewAsIcon': boolean | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'public': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'remote': object | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiAppInfo
     */
    'removable': boolean | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'repair-steps': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'repository': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'sabre': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'screenshot': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'settings': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'summary': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'trash': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'two-factor-providers': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'types': object | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiAppInfo
     */
    'version': string;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'versions': object | null;
    /**
     * 
     * @type {object}
     * @memberof ProvisioningApiAppInfo
     */
    'website': object | null;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetAppInfo200Response
 */
export interface ProvisioningApiAppsGetAppInfo200Response {
    /**
     * 
     * @type {ProvisioningApiAppsGetAppInfo200ResponseOcs}
     * @memberof ProvisioningApiAppsGetAppInfo200Response
     */
    'ocs': ProvisioningApiAppsGetAppInfo200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetAppInfo200ResponseOcs
 */
export interface ProvisioningApiAppsGetAppInfo200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiAppsGetAppInfo200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiAppInfo}
     * @memberof ProvisioningApiAppsGetAppInfo200ResponseOcs
     */
    'data': ProvisioningApiAppInfo;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetApps200Response
 */
export interface ProvisioningApiAppsGetApps200Response {
    /**
     * 
     * @type {ProvisioningApiAppsGetApps200ResponseOcs}
     * @memberof ProvisioningApiAppsGetApps200Response
     */
    'ocs': ProvisioningApiAppsGetApps200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetApps200ResponseOcs
 */
export interface ProvisioningApiAppsGetApps200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiAppsGetApps200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiAppsGetApps200ResponseOcsData}
     * @memberof ProvisioningApiAppsGetApps200ResponseOcs
     */
    'data': ProvisioningApiAppsGetApps200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiAppsGetApps200ResponseOcsData
 */
export interface ProvisioningApiAppsGetApps200ResponseOcsData {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiAppsGetApps200ResponseOcsData
     */
    'apps': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiCapabilities
 */
export interface ProvisioningApiCapabilities {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi}
     * @memberof ProvisioningApiCapabilities
     */
    'provisioning_api': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupDetails
 */
export interface ProvisioningApiGroupDetails {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupDetails
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupDetails
     */
    'displayname': string;
    /**
     * 
     * @type {ProvisioningApiGroupDetailsUsercount}
     * @memberof ProvisioningApiGroupDetails
     */
    'usercount': ProvisioningApiGroupDetailsUsercount;
    /**
     * 
     * @type {ProvisioningApiGroupDetailsUsercount}
     * @memberof ProvisioningApiGroupDetails
     */
    'disabled': ProvisioningApiGroupDetailsUsercount;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiGroupDetails
     */
    'canAdd': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiGroupDetails
     */
    'canRemove': boolean;
}
/**
 * @type ProvisioningApiGroupDetailsUsercount
 * @export
 */
export type ProvisioningApiGroupDetailsUsercount = boolean | number;

/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsers200Response
 */
export interface ProvisioningApiGroupsGetGroupUsers200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsers200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetGroupUsers200Response
     */
    'ocs': ProvisioningApiGroupsGetGroupUsers200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsers200ResponseOcs
 */
export interface ProvisioningApiGroupsGetGroupUsers200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetGroupUsers200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsers200ResponseOcsData}
     * @memberof ProvisioningApiGroupsGetGroupUsers200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroupUsers200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsers200ResponseOcsData
 */
export interface ProvisioningApiGroupsGetGroupUsers200ResponseOcsData {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiGroupsGetGroupUsers200ResponseOcsData
     */
    'users': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsersDetails200Response
 */
export interface ProvisioningApiGroupsGetGroupUsersDetails200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200Response
     */
    'ocs': ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs
 */
export interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData
 */
export interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData {
    /**
     * 
     * @type {{ [key: string]: ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue; }}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsData
     */
    'users': { [key: string]: ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue; };
}
/**
 * @type ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue
 * @export
 */
export type ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValue = ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf | ProvisioningApiUserDetails;

/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf
 */
export interface ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf {
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroups200Response
 */
export interface ProvisioningApiGroupsGetGroups200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroups200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetGroups200Response
     */
    'ocs': ProvisioningApiGroupsGetGroups200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroups200ResponseOcs
 */
export interface ProvisioningApiGroupsGetGroups200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetGroups200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroups200ResponseOcsData}
     * @memberof ProvisioningApiGroupsGetGroups200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroups200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroups200ResponseOcsData
 */
export interface ProvisioningApiGroupsGetGroups200ResponseOcsData {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiGroupsGetGroups200ResponseOcsData
     */
    'groups': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupsDetails200Response
 */
export interface ProvisioningApiGroupsGetGroupsDetails200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupsDetails200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetGroupsDetails200Response
     */
    'ocs': ProvisioningApiGroupsGetGroupsDetails200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupsDetails200ResponseOcs
 */
export interface ProvisioningApiGroupsGetGroupsDetails200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetGroupsDetails200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData}
     * @memberof ProvisioningApiGroupsGetGroupsDetails200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData
 */
export interface ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData {
    /**
     * 
     * @type {Array<ProvisioningApiGroupDetails>}
     * @memberof ProvisioningApiGroupsGetGroupsDetails200ResponseOcsData
     */
    'groups': Array<ProvisioningApiGroupDetails>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetSubAdminsOfGroup200Response
 */
export interface ProvisioningApiGroupsGetSubAdminsOfGroup200Response {
    /**
     * 
     * @type {ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs}
     * @memberof ProvisioningApiGroupsGetSubAdminsOfGroup200Response
     */
    'ocs': ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs
 */
export interface ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiGroupsGetSubAdminsOfGroup200ResponseOcs
     */
    'data': Array<string>;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUserDetails
 */
export interface ProvisioningApiUserDetails {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiUserDetails
     */
    'additional_mail': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiUserDetails
     */
    'additional_mailScope': Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'addressScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'avatarScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'backend': string;
    /**
     * 
     * @type {ProvisioningApiUserDetailsBackendCapabilities}
     * @memberof ProvisioningApiUserDetails
     */
    'backendCapabilities': ProvisioningApiUserDetailsBackendCapabilities;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'biography': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'biographyScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'displayname': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'display-name': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'displaynameScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'emailScope': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiUserDetails
     */
    'enabled': boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'fediverse': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'fediverseScope': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiUserDetails
     */
    'groups': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'headline': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'headlineScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'language': string;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetails
     */
    'lastLogin': number;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'notify_email': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'organisation': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'organisationScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'phoneScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'profile_enabled': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'profile_enabledScope': string | null;
    /**
     * 
     * @type {ProvisioningApiUserDetailsQuota}
     * @memberof ProvisioningApiUserDetails
     */
    'quota': ProvisioningApiUserDetailsQuota;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'roleScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'storageLocation': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProvisioningApiUserDetails
     */
    'subadmin': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'twitter': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'twitterScope': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'website': string;
    /**
     * 
     * @type {string}
     * @memberof ProvisioningApiUserDetails
     */
    'websiteScope': string | null;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUserDetailsBackendCapabilities
 */
export interface ProvisioningApiUserDetailsBackendCapabilities {
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiUserDetailsBackendCapabilities
     */
    'setDisplayName': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProvisioningApiUserDetailsBackendCapabilities
     */
    'setPassword': boolean;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUserDetailsQuota
 */
export interface ProvisioningApiUserDetailsQuota {
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'free': number | null;
    /**
     * 
     * @type {ProvisioningApiUserDetailsQuotaQuota}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'quota': ProvisioningApiUserDetailsQuotaQuota;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'relative': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof ProvisioningApiUserDetailsQuota
     */
    'used': number;
}
/**
 * @type ProvisioningApiUserDetailsQuotaQuota
 * @export
 */
export type ProvisioningApiUserDetailsQuotaQuota = boolean | number | string;

/**
 * 
 * @export
 * @interface ProvisioningApiUsersAddUser200Response
 */
export interface ProvisioningApiUsersAddUser200Response {
    /**
     * 
     * @type {ProvisioningApiUsersAddUser200ResponseOcs}
     * @memberof ProvisioningApiUsersAddUser200Response
     */
    'ocs': ProvisioningApiUsersAddUser200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersAddUser200ResponseOcs
 */
export interface ProvisioningApiUsersAddUser200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiUsersAddUser200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf}
     * @memberof ProvisioningApiUsersAddUser200ResponseOcs
     */
    'data': ProvisioningApiGroupsGetGroupUsersDetails200ResponseOcsDataUsersValueOneOf;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersGetUser200Response
 */
export interface ProvisioningApiUsersGetUser200Response {
    /**
     * 
     * @type {ProvisioningApiUsersGetUser200ResponseOcs}
     * @memberof ProvisioningApiUsersGetUser200Response
     */
    'ocs': ProvisioningApiUsersGetUser200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersGetUser200ResponseOcs
 */
export interface ProvisioningApiUsersGetUser200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiUsersGetUser200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {ProvisioningApiUserDetails}
     * @memberof ProvisioningApiUsersGetUser200ResponseOcs
     */
    'data': ProvisioningApiUserDetails;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersSearchByPhoneNumbers200Response
 */
export interface ProvisioningApiUsersSearchByPhoneNumbers200Response {
    /**
     * 
     * @type {ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs}
     * @memberof ProvisioningApiUsersSearchByPhoneNumbers200Response
     */
    'ocs': ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs;
}
/**
 * 
 * @export
 * @interface ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs
 */
export interface ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProvisioningApiUsersSearchByPhoneNumbers200ResponseOcs
     */
    'data': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ThemingBackground
 */
export interface ThemingBackground {
    /**
     * 
     * @type {string}
     * @memberof ThemingBackground
     */
    'backgroundImage': string | null;
    /**
     * 
     * @type {string}
     * @memberof ThemingBackground
     */
    'backgroundColor': string;
    /**
     * 
     * @type {number}
     * @memberof ThemingBackground
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface ThemingPublicCapabilities
 */
export interface ThemingPublicCapabilities {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming}
     * @memberof ThemingPublicCapabilities
     */
    'theming': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming;
}
/**
 * 
 * @export
 * @interface ThemingThemingGetManifest200Response
 */
export interface ThemingThemingGetManifest200Response {
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'short_name': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'start_url': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'theme_color': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'background_color': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'description': string;
    /**
     * 
     * @type {Array<ThemingThemingGetManifest200ResponseIconsInner>}
     * @memberof ThemingThemingGetManifest200Response
     */
    'icons': Array<ThemingThemingGetManifest200ResponseIconsInner>;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200Response
     */
    'display': string;
}
/**
 * 
 * @export
 * @interface ThemingThemingGetManifest200ResponseIconsInner
 */
export interface ThemingThemingGetManifest200ResponseIconsInner {
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200ResponseIconsInner
     */
    'src': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200ResponseIconsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ThemingThemingGetManifest200ResponseIconsInner
     */
    'sizes': string;
}
/**
 * 
 * @export
 * @interface UserStatusCapabilities
 */
export interface UserStatusCapabilities {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus}
     * @memberof UserStatusCapabilities
     */
    'user_status': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus;
}
/**
 * 
 * @export
 * @interface UserStatusClearAt
 */
export interface UserStatusClearAt {
    /**
     * 
     * @type {string}
     * @memberof UserStatusClearAt
     */
    'type': UserStatusClearAtTypeEnum;
    /**
     * 
     * @type {UserStatusClearAtTime}
     * @memberof UserStatusClearAt
     */
    'time': UserStatusClearAtTime;
}

export const UserStatusClearAtTypeEnum = {
    Period: 'period',
    EndOf: 'end-of'
} as const;

export type UserStatusClearAtTypeEnum = typeof UserStatusClearAtTypeEnum[keyof typeof UserStatusClearAtTypeEnum];

/**
 * @type UserStatusClearAtTime
 * @export
 */
export type UserStatusClearAtTime = UserStatusClearAtTimeType | number;

/**
 * 
 * @export
 * @enum {string}
 */

export const UserStatusClearAtTimeType = {
    Day: 'day',
    Week: 'week'
} as const;

export type UserStatusClearAtTimeType = typeof UserStatusClearAtTimeType[keyof typeof UserStatusClearAtTimeType];


/**
 * 
 * @export
 * @interface UserStatusPredefined
 */
export interface UserStatusPredefined {
    /**
     * 
     * @type {string}
     * @memberof UserStatusPredefined
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPredefined
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPredefined
     */
    'message': string;
    /**
     * 
     * @type {UserStatusClearAt}
     * @memberof UserStatusPredefined
     */
    'clearAt': UserStatusClearAt;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusPredefined
     */
    'visible': boolean | null;
}
/**
 * 
 * @export
 * @interface UserStatusPredefinedStatusFindAll200Response
 */
export interface UserStatusPredefinedStatusFindAll200Response {
    /**
     * 
     * @type {UserStatusPredefinedStatusFindAll200ResponseOcs}
     * @memberof UserStatusPredefinedStatusFindAll200Response
     */
    'ocs': UserStatusPredefinedStatusFindAll200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusPredefinedStatusFindAll200ResponseOcs
 */
export interface UserStatusPredefinedStatusFindAll200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusPredefinedStatusFindAll200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<UserStatusPredefined>}
     * @memberof UserStatusPredefinedStatusFindAll200ResponseOcs
     */
    'data': Array<UserStatusPredefined>;
}
/**
 * 
 * @export
 * @interface UserStatusPrivate
 */
export interface UserStatusPrivate {
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'message': string | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'icon': string | null;
    /**
     * 
     * @type {number}
     * @memberof UserStatusPrivate
     */
    'clearAt': number | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivate
     */
    'messageId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusPrivate
     */
    'messageIsPredefined': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusPrivate
     */
    'statusIsUserDefined': boolean;
}
/**
 * 
 * @export
 * @interface UserStatusPrivateAllOf
 */
export interface UserStatusPrivateAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserStatusPrivateAllOf
     */
    'messageId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusPrivateAllOf
     */
    'messageIsPredefined': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserStatusPrivateAllOf
     */
    'statusIsUserDefined': boolean;
}
/**
 * 
 * @export
 * @interface UserStatusPublic
 */
export interface UserStatusPublic {
    /**
     * 
     * @type {string}
     * @memberof UserStatusPublic
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPublic
     */
    'message': string | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPublic
     */
    'icon': string | null;
    /**
     * 
     * @type {number}
     * @memberof UserStatusPublic
     */
    'clearAt': number | null;
    /**
     * 
     * @type {string}
     * @memberof UserStatusPublic
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface UserStatusStatusesFind200Response
 */
export interface UserStatusStatusesFind200Response {
    /**
     * 
     * @type {UserStatusStatusesFind200ResponseOcs}
     * @memberof UserStatusStatusesFind200Response
     */
    'ocs': UserStatusStatusesFind200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusStatusesFind200ResponseOcs
 */
export interface UserStatusStatusesFind200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusStatusesFind200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {UserStatusPublic}
     * @memberof UserStatusStatusesFind200ResponseOcs
     */
    'data': UserStatusPublic;
}
/**
 * 
 * @export
 * @interface UserStatusStatusesFindAll200Response
 */
export interface UserStatusStatusesFindAll200Response {
    /**
     * 
     * @type {UserStatusStatusesFindAll200ResponseOcs}
     * @memberof UserStatusStatusesFindAll200Response
     */
    'ocs': UserStatusStatusesFindAll200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusStatusesFindAll200ResponseOcs
 */
export interface UserStatusStatusesFindAll200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusStatusesFindAll200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<UserStatusPublic>}
     * @memberof UserStatusStatusesFindAll200ResponseOcs
     */
    'data': Array<UserStatusPublic>;
}
/**
 * 
 * @export
 * @interface UserStatusUserStatusGetStatus200Response
 */
export interface UserStatusUserStatusGetStatus200Response {
    /**
     * 
     * @type {UserStatusUserStatusGetStatus200ResponseOcs}
     * @memberof UserStatusUserStatusGetStatus200Response
     */
    'ocs': UserStatusUserStatusGetStatus200ResponseOcs;
}
/**
 * 
 * @export
 * @interface UserStatusUserStatusGetStatus200ResponseOcs
 */
export interface UserStatusUserStatusGetStatus200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof UserStatusUserStatusGetStatus200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {UserStatusPrivate}
     * @memberof UserStatusUserStatusGetStatus200ResponseOcs
     */
    'data': UserStatusPrivate;
}
/**
 * 
 * @export
 * @interface WeatherStatusCapabilities
 */
export interface WeatherStatusCapabilities {
    /**
     * 
     * @type {CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate}
     * @memberof WeatherStatusCapabilities
     */
    'weather_status': CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecast
 */
export interface WeatherStatusForecast {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusForecast
     */
    'time': string;
    /**
     * 
     * @type {WeatherStatusForecastData}
     * @memberof WeatherStatusForecast
     */
    'data': WeatherStatusForecastData;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastData
 */
export interface WeatherStatusForecastData {
    /**
     * 
     * @type {WeatherStatusForecastDataInstant}
     * @memberof WeatherStatusForecastData
     */
    'instant': WeatherStatusForecastDataInstant;
    /**
     * 
     * @type {WeatherStatusForecastDataNext12Hours}
     * @memberof WeatherStatusForecastData
     */
    'next_12_hours': WeatherStatusForecastDataNext12Hours;
    /**
     * 
     * @type {WeatherStatusForecastDataNext1Hours}
     * @memberof WeatherStatusForecastData
     */
    'next_1_hours': WeatherStatusForecastDataNext1Hours;
    /**
     * 
     * @type {WeatherStatusForecastDataNext6Hours}
     * @memberof WeatherStatusForecastData
     */
    'next_6_hours': WeatherStatusForecastDataNext6Hours;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataInstant
 */
export interface WeatherStatusForecastDataInstant {
    /**
     * 
     * @type {WeatherStatusForecastDataInstantDetails}
     * @memberof WeatherStatusForecastDataInstant
     */
    'details': WeatherStatusForecastDataInstantDetails;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataInstantDetails
 */
export interface WeatherStatusForecastDataInstantDetails {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'air_pressure_at_sea_level': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'air_temperature': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'cloud_area_fraction': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'cloud_area_fraction_high': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'cloud_area_fraction_low': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'cloud_area_fraction_medium': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'dew_point_temperature': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'fog_area_fraction': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'relative_humidity': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'ultraviolet_index_clear_sky': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'wind_from_direction': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'wind_speed': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataInstantDetails
     */
    'wind_speed_of_gust': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext12Hours
 */
export interface WeatherStatusForecastDataNext12Hours {
    /**
     * 
     * @type {WeatherStatusForecastDataNext12HoursSummary}
     * @memberof WeatherStatusForecastDataNext12Hours
     */
    'summary': WeatherStatusForecastDataNext12HoursSummary;
    /**
     * 
     * @type {WeatherStatusForecastDataNext12HoursDetails}
     * @memberof WeatherStatusForecastDataNext12Hours
     */
    'details': WeatherStatusForecastDataNext12HoursDetails;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext12HoursDetails
 */
export interface WeatherStatusForecastDataNext12HoursDetails {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext12HoursDetails
     */
    'probability_of_precipitation': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext12HoursSummary
 */
export interface WeatherStatusForecastDataNext12HoursSummary {
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusForecastDataNext12HoursSummary
     */
    'symbol_code': string;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext1Hours
 */
export interface WeatherStatusForecastDataNext1Hours {
    /**
     * 
     * @type {WeatherStatusForecastDataNext12HoursSummary}
     * @memberof WeatherStatusForecastDataNext1Hours
     */
    'summary': WeatherStatusForecastDataNext12HoursSummary;
    /**
     * 
     * @type {WeatherStatusForecastDataNext1HoursDetails}
     * @memberof WeatherStatusForecastDataNext1Hours
     */
    'details': WeatherStatusForecastDataNext1HoursDetails;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext1HoursDetails
 */
export interface WeatherStatusForecastDataNext1HoursDetails {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'precipitation_amount': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'precipitation_amount_max': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'precipitation_amount_min': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'probability_of_precipitation': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext1HoursDetails
     */
    'probability_of_thunder': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext6Hours
 */
export interface WeatherStatusForecastDataNext6Hours {
    /**
     * 
     * @type {WeatherStatusForecastDataNext12HoursSummary}
     * @memberof WeatherStatusForecastDataNext6Hours
     */
    'summary': WeatherStatusForecastDataNext12HoursSummary;
    /**
     * 
     * @type {WeatherStatusForecastDataNext6HoursDetails}
     * @memberof WeatherStatusForecastDataNext6Hours
     */
    'details': WeatherStatusForecastDataNext6HoursDetails;
}
/**
 * 
 * @export
 * @interface WeatherStatusForecastDataNext6HoursDetails
 */
export interface WeatherStatusForecastDataNext6HoursDetails {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'air_temperature_max': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'air_temperature_min': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'precipitation_amount': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'precipitation_amount_max': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'precipitation_amount_min': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusForecastDataNext6HoursDetails
     */
    'probability_of_precipitation': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetForecast200Response
 */
export interface WeatherStatusWeatherStatusGetForecast200Response {
    /**
     * 
     * @type {WeatherStatusWeatherStatusGetForecast200ResponseOcs}
     * @memberof WeatherStatusWeatherStatusGetForecast200Response
     */
    'ocs': WeatherStatusWeatherStatusGetForecast200ResponseOcs;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetForecast200ResponseOcs
 */
export interface WeatherStatusWeatherStatusGetForecast200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof WeatherStatusWeatherStatusGetForecast200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {Array<WeatherStatusForecast>}
     * @memberof WeatherStatusWeatherStatusGetForecast200ResponseOcs
     */
    'data': Array<WeatherStatusForecast>;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetLocation200Response
 */
export interface WeatherStatusWeatherStatusGetLocation200Response {
    /**
     * 
     * @type {WeatherStatusWeatherStatusGetLocation200ResponseOcs}
     * @memberof WeatherStatusWeatherStatusGetLocation200Response
     */
    'ocs': WeatherStatusWeatherStatusGetLocation200ResponseOcs;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetLocation200ResponseOcs
 */
export interface WeatherStatusWeatherStatusGetLocation200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {WeatherStatusWeatherStatusGetLocation200ResponseOcsData}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcs
     */
    'data': WeatherStatusWeatherStatusGetLocation200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusGetLocation200ResponseOcsData
 */
export interface WeatherStatusWeatherStatusGetLocation200ResponseOcsData {
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcsData
     */
    'lat': number;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcsData
     */
    'lon': number;
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcsData
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusGetLocation200ResponseOcsData
     */
    'mode': number;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusUsePersonalAddress200Response
 */
export interface WeatherStatusWeatherStatusUsePersonalAddress200Response {
    /**
     * 
     * @type {WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200Response
     */
    'ocs': WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs
 */
export interface WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs {
    /**
     * 
     * @type {OCSMeta}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs
     */
    'meta': OCSMeta;
    /**
     * 
     * @type {WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcs
     */
    'data': WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData;
}
/**
 * 
 * @export
 * @interface WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
 */
export interface WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData {
    /**
     * 
     * @type {boolean}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
     */
    'success': boolean;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
     */
    'lat': number | null;
    /**
     * 
     * @type {number}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
     */
    'lon': number | null;
    /**
     * 
     * @type {string}
     * @memberof WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
     */
    'address': string | null;
}

/**
 * CloudFederationApiRequestHandlerApi - axios parameter creator
 * @export
 */
export const CloudFederationApiRequestHandlerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add share
         * @param {string} shareWith The user who the share will be shared with
         * @param {string} name The resource name (e.g. document.odt)
         * @param {string} providerId Resource UID on the provider side
         * @param {string} owner Provider specific UID of the user who owns the resource
         * @param {string} protocol e,.g. [\&#39;name\&#39; &#x3D;&gt; \&#39;webdav\&#39;, \&#39;options\&#39; &#x3D;&gt; [\&#39;username\&#39; &#x3D;&gt; \&#39;john\&#39;, \&#39;permissions\&#39; &#x3D;&gt; 31]]
         * @param {string} shareType \&#39;group\&#39; or \&#39;user\&#39; share
         * @param {string} resourceType \&#39;file\&#39;, \&#39;calendar\&#39;,...
         * @param {string} [description] Share description
         * @param {string} [ownerDisplayName] Display name of the user who shared the item
         * @param {string} [sharedBy] Provider specific UID of the user who shared the resource
         * @param {string} [sharedByDisplayName] Display name of the user who shared the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudFederationApiRequestHandlerAddShare: async (shareWith: string, name: string, providerId: string, owner: string, protocol: string, shareType: string, resourceType: string, description?: string, ownerDisplayName?: string, sharedBy?: string, sharedByDisplayName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareWith' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerAddShare', 'shareWith', shareWith)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerAddShare', 'name', name)
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerAddShare', 'providerId', providerId)
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerAddShare', 'owner', owner)
            // verify required parameter 'protocol' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerAddShare', 'protocol', protocol)
            // verify required parameter 'shareType' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerAddShare', 'shareType', shareType)
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerAddShare', 'resourceType', resourceType)
            const localVarPath = `/index.php/ocm/shares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (shareWith !== undefined) {
                localVarQueryParameter['shareWith'] = shareWith;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (providerId !== undefined) {
                localVarQueryParameter['providerId'] = providerId;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (ownerDisplayName !== undefined) {
                localVarQueryParameter['ownerDisplayName'] = ownerDisplayName;
            }

            if (sharedBy !== undefined) {
                localVarQueryParameter['sharedBy'] = sharedBy;
            }

            if (sharedByDisplayName !== undefined) {
                localVarQueryParameter['sharedByDisplayName'] = sharedByDisplayName;
            }

            if (protocol !== undefined) {
                localVarQueryParameter['protocol'] = protocol;
            }

            if (shareType !== undefined) {
                localVarQueryParameter['shareType'] = shareType;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send a notification about an existing share
         * @param {string} notificationType Notification type, e.g. SHARE_ACCEPTED
         * @param {string} resourceType calendar, file, contact,...
         * @param {string} [providerId] ID of the share
         * @param {string} [notification] The actual payload of the notification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudFederationApiRequestHandlerReceiveNotification: async (notificationType: string, resourceType: string, providerId?: string, notification?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationType' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerReceiveNotification', 'notificationType', notificationType)
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('cloudFederationApiRequestHandlerReceiveNotification', 'resourceType', resourceType)
            const localVarPath = `/index.php/ocm/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (notificationType !== undefined) {
                localVarQueryParameter['notificationType'] = notificationType;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }

            if (providerId !== undefined) {
                localVarQueryParameter['providerId'] = providerId;
            }

            if (notification !== undefined) {
                localVarQueryParameter['notification'] = notification;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudFederationApiRequestHandlerApi - functional programming interface
 * @export
 */
export const CloudFederationApiRequestHandlerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudFederationApiRequestHandlerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add share
         * @param {string} shareWith The user who the share will be shared with
         * @param {string} name The resource name (e.g. document.odt)
         * @param {string} providerId Resource UID on the provider side
         * @param {string} owner Provider specific UID of the user who owns the resource
         * @param {string} protocol e,.g. [\&#39;name\&#39; &#x3D;&gt; \&#39;webdav\&#39;, \&#39;options\&#39; &#x3D;&gt; [\&#39;username\&#39; &#x3D;&gt; \&#39;john\&#39;, \&#39;permissions\&#39; &#x3D;&gt; 31]]
         * @param {string} shareType \&#39;group\&#39; or \&#39;user\&#39; share
         * @param {string} resourceType \&#39;file\&#39;, \&#39;calendar\&#39;,...
         * @param {string} [description] Share description
         * @param {string} [ownerDisplayName] Display name of the user who shared the item
         * @param {string} [sharedBy] Provider specific UID of the user who shared the resource
         * @param {string} [sharedByDisplayName] Display name of the user who shared the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudFederationApiRequestHandlerAddShare(shareWith: string, name: string, providerId: string, owner: string, protocol: string, shareType: string, resourceType: string, description?: string, ownerDisplayName?: string, sharedBy?: string, sharedByDisplayName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudFederationApiAddShare>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudFederationApiRequestHandlerAddShare(shareWith, name, providerId, owner, protocol, shareType, resourceType, description, ownerDisplayName, sharedBy, sharedByDisplayName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send a notification about an existing share
         * @param {string} notificationType Notification type, e.g. SHARE_ACCEPTED
         * @param {string} resourceType calendar, file, contact,...
         * @param {string} [providerId] ID of the share
         * @param {string} [notification] The actual payload of the notification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudFederationApiRequestHandlerReceiveNotification(notificationType: string, resourceType: string, providerId?: string, notification?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudFederationApiRequestHandlerReceiveNotification(notificationType, resourceType, providerId, notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CloudFederationApiRequestHandlerApi - factory interface
 * @export
 */
export const CloudFederationApiRequestHandlerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudFederationApiRequestHandlerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add share
         * @param {string} shareWith The user who the share will be shared with
         * @param {string} name The resource name (e.g. document.odt)
         * @param {string} providerId Resource UID on the provider side
         * @param {string} owner Provider specific UID of the user who owns the resource
         * @param {string} protocol e,.g. [\&#39;name\&#39; &#x3D;&gt; \&#39;webdav\&#39;, \&#39;options\&#39; &#x3D;&gt; [\&#39;username\&#39; &#x3D;&gt; \&#39;john\&#39;, \&#39;permissions\&#39; &#x3D;&gt; 31]]
         * @param {string} shareType \&#39;group\&#39; or \&#39;user\&#39; share
         * @param {string} resourceType \&#39;file\&#39;, \&#39;calendar\&#39;,...
         * @param {string} [description] Share description
         * @param {string} [ownerDisplayName] Display name of the user who shared the item
         * @param {string} [sharedBy] Provider specific UID of the user who shared the resource
         * @param {string} [sharedByDisplayName] Display name of the user who shared the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudFederationApiRequestHandlerAddShare(shareWith: string, name: string, providerId: string, owner: string, protocol: string, shareType: string, resourceType: string, description?: string, ownerDisplayName?: string, sharedBy?: string, sharedByDisplayName?: string, options?: any): AxiosPromise<CloudFederationApiAddShare> {
            return localVarFp.cloudFederationApiRequestHandlerAddShare(shareWith, name, providerId, owner, protocol, shareType, resourceType, description, ownerDisplayName, sharedBy, sharedByDisplayName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send a notification about an existing share
         * @param {string} notificationType Notification type, e.g. SHARE_ACCEPTED
         * @param {string} resourceType calendar, file, contact,...
         * @param {string} [providerId] ID of the share
         * @param {string} [notification] The actual payload of the notification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudFederationApiRequestHandlerReceiveNotification(notificationType: string, resourceType: string, providerId?: string, notification?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.cloudFederationApiRequestHandlerReceiveNotification(notificationType, resourceType, providerId, notification, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CloudFederationApiRequestHandlerApi - object-oriented interface
 * @export
 * @class CloudFederationApiRequestHandlerApi
 * @extends {BaseAPI}
 */
export class CloudFederationApiRequestHandlerApi extends BaseAPI {
    /**
     * 
     * @summary Add share
     * @param {string} shareWith The user who the share will be shared with
     * @param {string} name The resource name (e.g. document.odt)
     * @param {string} providerId Resource UID on the provider side
     * @param {string} owner Provider specific UID of the user who owns the resource
     * @param {string} protocol e,.g. [\&#39;name\&#39; &#x3D;&gt; \&#39;webdav\&#39;, \&#39;options\&#39; &#x3D;&gt; [\&#39;username\&#39; &#x3D;&gt; \&#39;john\&#39;, \&#39;permissions\&#39; &#x3D;&gt; 31]]
     * @param {string} shareType \&#39;group\&#39; or \&#39;user\&#39; share
     * @param {string} resourceType \&#39;file\&#39;, \&#39;calendar\&#39;,...
     * @param {string} [description] Share description
     * @param {string} [ownerDisplayName] Display name of the user who shared the item
     * @param {string} [sharedBy] Provider specific UID of the user who shared the resource
     * @param {string} [sharedByDisplayName] Display name of the user who shared the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudFederationApiRequestHandlerApi
     */
    public cloudFederationApiRequestHandlerAddShare(shareWith: string, name: string, providerId: string, owner: string, protocol: string, shareType: string, resourceType: string, description?: string, ownerDisplayName?: string, sharedBy?: string, sharedByDisplayName?: string, options?: AxiosRequestConfig) {
        return CloudFederationApiRequestHandlerApiFp(this.configuration).cloudFederationApiRequestHandlerAddShare(shareWith, name, providerId, owner, protocol, shareType, resourceType, description, ownerDisplayName, sharedBy, sharedByDisplayName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send a notification about an existing share
     * @param {string} notificationType Notification type, e.g. SHARE_ACCEPTED
     * @param {string} resourceType calendar, file, contact,...
     * @param {string} [providerId] ID of the share
     * @param {string} [notification] The actual payload of the notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudFederationApiRequestHandlerApi
     */
    public cloudFederationApiRequestHandlerReceiveNotification(notificationType: string, resourceType: string, providerId?: string, notification?: string, options?: AxiosRequestConfig) {
        return CloudFederationApiRequestHandlerApiFp(this.configuration).cloudFederationApiRequestHandlerReceiveNotification(notificationType, resourceType, providerId, notification, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreApi - axios parameter creator
 * @export
 */
export const CoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGetStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status.php`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreApi - functional programming interface
 * @export
 */
export const CoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreGetStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreGetStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreApi - factory interface
 * @export
 */
export const CoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGetStatus(options?: any): AxiosPromise<CoreStatus> {
            return localVarFp.coreGetStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
export class CoreApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    public coreGetStatus(options?: AxiosRequestConfig) {
        return CoreApiFp(this.configuration).coreGetStatus(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreAppPasswordApi - axios parameter creator
 * @export
 */
export const CoreAppPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordDeleteAppPassword: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreAppPasswordDeleteAppPassword', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/apppassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordGetAppPassword: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreAppPasswordGetAppPassword', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/getapppassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rotate app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordRotateAppPassword: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreAppPasswordRotateAppPassword', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/apppassword/rotate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreAppPasswordApi - functional programming interface
 * @export
 */
export const CoreAppPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreAppPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAppPasswordDeleteAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAppPasswordDeleteAppPassword(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAppPasswordGetAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreAppPasswordGetAppPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAppPasswordGetAppPassword(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rotate app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAppPasswordRotateAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreAppPasswordGetAppPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAppPasswordRotateAppPassword(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreAppPasswordApi - factory interface
 * @export
 */
export const CoreAppPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreAppPasswordApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordDeleteAppPassword(oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.coreAppPasswordDeleteAppPassword(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordGetAppPassword(oCSAPIRequest: string, options?: any): AxiosPromise<CoreAppPasswordGetAppPassword200Response> {
            return localVarFp.coreAppPasswordGetAppPassword(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rotate app password
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAppPasswordRotateAppPassword(oCSAPIRequest: string, options?: any): AxiosPromise<CoreAppPasswordGetAppPassword200Response> {
            return localVarFp.coreAppPasswordRotateAppPassword(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreAppPasswordApi - object-oriented interface
 * @export
 * @class CoreAppPasswordApi
 * @extends {BaseAPI}
 */
export class CoreAppPasswordApi extends BaseAPI {
    /**
     * 
     * @summary Delete app password
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAppPasswordApi
     */
    public coreAppPasswordDeleteAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreAppPasswordApiFp(this.configuration).coreAppPasswordDeleteAppPassword(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create app password
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAppPasswordApi
     */
    public coreAppPasswordGetAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreAppPasswordApiFp(this.configuration).coreAppPasswordGetAppPassword(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rotate app password
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAppPasswordApi
     */
    public coreAppPasswordRotateAppPassword(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreAppPasswordApiFp(this.configuration).coreAppPasswordRotateAppPassword(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreAutoCompleteApi - axios parameter creator
 * @export
 */
export const CoreAutoCompleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Autocomplete a query
         * @param {string} search Text to search for
         * @param {string} oCSAPIRequest 
         * @param {string} [itemType] Type of the items to search for
         * @param {string} [itemId] ID of the items to search for
         * @param {string} [sorter] can be piped, top prio first, e.g.: \&quot;commenters|share-recipients\&quot;
         * @param {string} [shareTypes] Types of shares to search for
         * @param {number} [limit] Maximum number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAutoCompleteGet: async (search: string, oCSAPIRequest: string, itemType?: string, itemId?: string, sorter?: string, shareTypes?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('coreAutoCompleteGet', 'search', search)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreAutoCompleteGet', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/autocomplete/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (sorter !== undefined) {
                localVarQueryParameter['sorter'] = sorter;
            }

            if (shareTypes !== undefined) {
                localVarQueryParameter['shareTypes'] = shareTypes;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreAutoCompleteApi - functional programming interface
 * @export
 */
export const CoreAutoCompleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreAutoCompleteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Autocomplete a query
         * @param {string} search Text to search for
         * @param {string} oCSAPIRequest 
         * @param {string} [itemType] Type of the items to search for
         * @param {string} [itemId] ID of the items to search for
         * @param {string} [sorter] can be piped, top prio first, e.g.: \&quot;commenters|share-recipients\&quot;
         * @param {string} [shareTypes] Types of shares to search for
         * @param {number} [limit] Maximum number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAutoCompleteGet(search: string, oCSAPIRequest: string, itemType?: string, itemId?: string, sorter?: string, shareTypes?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreAutoCompleteGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAutoCompleteGet(search, oCSAPIRequest, itemType, itemId, sorter, shareTypes, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreAutoCompleteApi - factory interface
 * @export
 */
export const CoreAutoCompleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreAutoCompleteApiFp(configuration)
    return {
        /**
         * 
         * @summary Autocomplete a query
         * @param {string} search Text to search for
         * @param {string} oCSAPIRequest 
         * @param {string} [itemType] Type of the items to search for
         * @param {string} [itemId] ID of the items to search for
         * @param {string} [sorter] can be piped, top prio first, e.g.: \&quot;commenters|share-recipients\&quot;
         * @param {string} [shareTypes] Types of shares to search for
         * @param {number} [limit] Maximum number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAutoCompleteGet(search: string, oCSAPIRequest: string, itemType?: string, itemId?: string, sorter?: string, shareTypes?: string, limit?: number, options?: any): AxiosPromise<CoreAutoCompleteGet200Response> {
            return localVarFp.coreAutoCompleteGet(search, oCSAPIRequest, itemType, itemId, sorter, shareTypes, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreAutoCompleteApi - object-oriented interface
 * @export
 * @class CoreAutoCompleteApi
 * @extends {BaseAPI}
 */
export class CoreAutoCompleteApi extends BaseAPI {
    /**
     * 
     * @summary Autocomplete a query
     * @param {string} search Text to search for
     * @param {string} oCSAPIRequest 
     * @param {string} [itemType] Type of the items to search for
     * @param {string} [itemId] ID of the items to search for
     * @param {string} [sorter] can be piped, top prio first, e.g.: \&quot;commenters|share-recipients\&quot;
     * @param {string} [shareTypes] Types of shares to search for
     * @param {number} [limit] Maximum number of results to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAutoCompleteApi
     */
    public coreAutoCompleteGet(search: string, oCSAPIRequest: string, itemType?: string, itemId?: string, sorter?: string, shareTypes?: string, limit?: number, options?: AxiosRequestConfig) {
        return CoreAutoCompleteApiFp(this.configuration).coreAutoCompleteGet(search, oCSAPIRequest, itemType, itemId, sorter, shareTypes, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreAvatarApi - axios parameter creator
 * @export
 */
export const CoreAvatarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAvatarGetAvatar: async (userId: string, size: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('coreAvatarGetAvatar', 'userId', userId)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('coreAvatarGetAvatar', 'size', size)
            const localVarPath = `/index.php/avatar/{userId}/{size}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the dark avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAvatarGetAvatarDark: async (userId: string, size: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('coreAvatarGetAvatarDark', 'userId', userId)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('coreAvatarGetAvatarDark', 'size', size)
            const localVarPath = `/index.php/avatar/{userId}/{size}/dark`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreAvatarApi - functional programming interface
 * @export
 */
export const CoreAvatarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreAvatarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAvatarGetAvatar(userId: string, size: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAvatarGetAvatar(userId, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the dark avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreAvatarGetAvatarDark(userId: string, size: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreAvatarGetAvatarDark(userId, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreAvatarApi - factory interface
 * @export
 */
export const CoreAvatarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreAvatarApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAvatarGetAvatar(userId: string, size: number, options?: any): AxiosPromise<File> {
            return localVarFp.coreAvatarGetAvatar(userId, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the dark avatar
         * @param {string} userId ID of the user
         * @param {number} size Size of the avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreAvatarGetAvatarDark(userId: string, size: number, options?: any): AxiosPromise<File> {
            return localVarFp.coreAvatarGetAvatarDark(userId, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreAvatarApi - object-oriented interface
 * @export
 * @class CoreAvatarApi
 * @extends {BaseAPI}
 */
export class CoreAvatarApi extends BaseAPI {
    /**
     * 
     * @summary Get the avatar
     * @param {string} userId ID of the user
     * @param {number} size Size of the avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAvatarApi
     */
    public coreAvatarGetAvatar(userId: string, size: number, options?: AxiosRequestConfig) {
        return CoreAvatarApiFp(this.configuration).coreAvatarGetAvatar(userId, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the dark avatar
     * @param {string} userId ID of the user
     * @param {number} size Size of the avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreAvatarApi
     */
    public coreAvatarGetAvatarDark(userId: string, size: number, options?: AxiosRequestConfig) {
        return CoreAvatarApiFp(this.configuration).coreAvatarGetAvatarDark(userId, size, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreClientFlowLoginV2Api - axios parameter creator
 * @export
 */
export const CoreClientFlowLoginV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Init a login flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreClientFlowLoginV2Init: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/login/v2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poll the login flow credentials
         * @param {string} token Token of the flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreClientFlowLoginV2Poll: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('coreClientFlowLoginV2Poll', 'token', token)
            const localVarPath = `/index.php/login/v2/poll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreClientFlowLoginV2Api - functional programming interface
 * @export
 */
export const CoreClientFlowLoginV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreClientFlowLoginV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Init a login flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreClientFlowLoginV2Init(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreLoginFlowV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreClientFlowLoginV2Init(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poll the login flow credentials
         * @param {string} token Token of the flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreClientFlowLoginV2Poll(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreLoginFlowV2Credentials>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreClientFlowLoginV2Poll(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreClientFlowLoginV2Api - factory interface
 * @export
 */
export const CoreClientFlowLoginV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreClientFlowLoginV2ApiFp(configuration)
    return {
        /**
         * 
         * @summary Init a login flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreClientFlowLoginV2Init(options?: any): AxiosPromise<CoreLoginFlowV2> {
            return localVarFp.coreClientFlowLoginV2Init(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poll the login flow credentials
         * @param {string} token Token of the flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreClientFlowLoginV2Poll(token: string, options?: any): AxiosPromise<CoreLoginFlowV2Credentials> {
            return localVarFp.coreClientFlowLoginV2Poll(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreClientFlowLoginV2Api - object-oriented interface
 * @export
 * @class CoreClientFlowLoginV2Api
 * @extends {BaseAPI}
 */
export class CoreClientFlowLoginV2Api extends BaseAPI {
    /**
     * 
     * @summary Init a login flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreClientFlowLoginV2Api
     */
    public coreClientFlowLoginV2Init(options?: AxiosRequestConfig) {
        return CoreClientFlowLoginV2ApiFp(this.configuration).coreClientFlowLoginV2Init(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poll the login flow credentials
     * @param {string} token Token of the flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreClientFlowLoginV2Api
     */
    public coreClientFlowLoginV2Poll(token: string, options?: AxiosRequestConfig) {
        return CoreClientFlowLoginV2ApiFp(this.configuration).coreClientFlowLoginV2Poll(token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreCollaborationResourcesApi - axios parameter creator
 * @export
 */
export const CoreCollaborationResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a resource to a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesAddResource: async (resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('coreCollaborationResourcesAddResource', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('coreCollaborationResourcesAddResource', 'resourceId', resourceId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('coreCollaborationResourcesAddResource', 'collectionId', collectionId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesAddResource', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a collection for a resource
         * @param {string} name Name of the collection
         * @param {string} baseResourceType Type of the base resource
         * @param {string} baseResourceId ID of the base resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesCreateCollectionOnResource: async (name: string, baseResourceType: string, baseResourceId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('coreCollaborationResourcesCreateCollectionOnResource', 'name', name)
            // verify required parameter 'baseResourceType' is not null or undefined
            assertParamExists('coreCollaborationResourcesCreateCollectionOnResource', 'baseResourceType', baseResourceType)
            // verify required parameter 'baseResourceId' is not null or undefined
            assertParamExists('coreCollaborationResourcesCreateCollectionOnResource', 'baseResourceId', baseResourceId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesCreateCollectionOnResource', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId}`
                .replace(`{${"baseResourceType"}}`, encodeURIComponent(String(baseResourceType)))
                .replace(`{${"baseResourceId"}}`, encodeURIComponent(String(baseResourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get collections by resource
         * @param {string} resourceType Type of the resource
         * @param {string} resourceId ID of the resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesGetCollectionsByResource: async (resourceType: string, resourceId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('coreCollaborationResourcesGetCollectionsByResource', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('coreCollaborationResourcesGetCollectionsByResource', 'resourceId', resourceId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesGetCollectionsByResource', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/{resourceType}/{resourceId}`
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a collection
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesListCollection: async (collectionId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('coreCollaborationResourcesListCollection', 'collectionId', collectionId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesListCollection', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a resource from a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesRemoveResource: async (resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('coreCollaborationResourcesRemoveResource', 'resourceType', resourceType)
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('coreCollaborationResourcesRemoveResource', 'resourceId', resourceId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('coreCollaborationResourcesRemoveResource', 'collectionId', collectionId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesRemoveResource', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rename a collection
         * @param {string} collectionName New name
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesRenameCollection: async (collectionName: string, collectionId: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('coreCollaborationResourcesRenameCollection', 'collectionName', collectionName)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('coreCollaborationResourcesRenameCollection', 'collectionId', collectionId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesRenameCollection', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (collectionName !== undefined) {
                localVarQueryParameter['collectionName'] = collectionName;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search for collections
         * @param {string} filter Filter collections
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesSearchCollections: async (filter: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('coreCollaborationResourcesSearchCollections', 'filter', filter)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreCollaborationResourcesSearchCollections', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/collaboration/resources/collections/search/{filter}`
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreCollaborationResourcesApi - functional programming interface
 * @export
 */
export const CoreCollaborationResourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreCollaborationResourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a resource to a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesAddResource(resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesAddResource(resourceType, resourceId, collectionId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a collection for a resource
         * @param {string} name Name of the collection
         * @param {string} baseResourceType Type of the base resource
         * @param {string} baseResourceId ID of the base resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesCreateCollectionOnResource(name: string, baseResourceType: string, baseResourceId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesCreateCollectionOnResource(name, baseResourceType, baseResourceId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get collections by resource
         * @param {string} resourceType Type of the resource
         * @param {string} resourceId ID of the resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesGetCollectionsByResource(resourceType: string, resourceId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesSearchCollections200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesGetCollectionsByResource(resourceType, resourceId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a collection
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesListCollection(collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesListCollection(collectionId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a resource from a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesRemoveResource(resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesRemoveResource(resourceType, resourceId, collectionId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rename a collection
         * @param {string} collectionName New name
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesRenameCollection(collectionName: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesListCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesRenameCollection(collectionName, collectionId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search for collections
         * @param {string} filter Filter collections
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreCollaborationResourcesSearchCollections(filter: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreCollaborationResourcesSearchCollections200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreCollaborationResourcesSearchCollections(filter, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreCollaborationResourcesApi - factory interface
 * @export
 */
export const CoreCollaborationResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreCollaborationResourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a resource to a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesAddResource(resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options?: any): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesAddResource(resourceType, resourceId, collectionId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a collection for a resource
         * @param {string} name Name of the collection
         * @param {string} baseResourceType Type of the base resource
         * @param {string} baseResourceId ID of the base resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesCreateCollectionOnResource(name: string, baseResourceType: string, baseResourceId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesCreateCollectionOnResource(name, baseResourceType, baseResourceId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get collections by resource
         * @param {string} resourceType Type of the resource
         * @param {string} resourceId ID of the resource
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesGetCollectionsByResource(resourceType: string, resourceId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreCollaborationResourcesSearchCollections200Response> {
            return localVarFp.coreCollaborationResourcesGetCollectionsByResource(resourceType, resourceId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a collection
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesListCollection(collectionId: number, oCSAPIRequest: string, options?: any): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesListCollection(collectionId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a resource from a collection
         * @param {string} resourceType Name of the resource
         * @param {string} resourceId ID of the resource
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesRemoveResource(resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options?: any): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesRemoveResource(resourceType, resourceId, collectionId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rename a collection
         * @param {string} collectionName New name
         * @param {number} collectionId ID of the collection
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesRenameCollection(collectionName: string, collectionId: number, oCSAPIRequest: string, options?: any): AxiosPromise<CoreCollaborationResourcesListCollection200Response> {
            return localVarFp.coreCollaborationResourcesRenameCollection(collectionName, collectionId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search for collections
         * @param {string} filter Filter collections
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreCollaborationResourcesSearchCollections(filter: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreCollaborationResourcesSearchCollections200Response> {
            return localVarFp.coreCollaborationResourcesSearchCollections(filter, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreCollaborationResourcesApi - object-oriented interface
 * @export
 * @class CoreCollaborationResourcesApi
 * @extends {BaseAPI}
 */
export class CoreCollaborationResourcesApi extends BaseAPI {
    /**
     * 
     * @summary Add a resource to a collection
     * @param {string} resourceType Name of the resource
     * @param {string} resourceId ID of the resource
     * @param {number} collectionId ID of the collection
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesAddResource(resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesAddResource(resourceType, resourceId, collectionId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a collection for a resource
     * @param {string} name Name of the collection
     * @param {string} baseResourceType Type of the base resource
     * @param {string} baseResourceId ID of the base resource
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesCreateCollectionOnResource(name: string, baseResourceType: string, baseResourceId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesCreateCollectionOnResource(name, baseResourceType, baseResourceId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get collections by resource
     * @param {string} resourceType Type of the resource
     * @param {string} resourceId ID of the resource
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesGetCollectionsByResource(resourceType: string, resourceId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesGetCollectionsByResource(resourceType, resourceId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a collection
     * @param {number} collectionId ID of the collection
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesListCollection(collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesListCollection(collectionId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a resource from a collection
     * @param {string} resourceType Name of the resource
     * @param {string} resourceId ID of the resource
     * @param {number} collectionId ID of the collection
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesRemoveResource(resourceType: string, resourceId: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesRemoveResource(resourceType, resourceId, collectionId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rename a collection
     * @param {string} collectionName New name
     * @param {number} collectionId ID of the collection
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesRenameCollection(collectionName: string, collectionId: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesRenameCollection(collectionName, collectionId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search for collections
     * @param {string} filter Filter collections
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreCollaborationResourcesApi
     */
    public coreCollaborationResourcesSearchCollections(filter: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreCollaborationResourcesApiFp(this.configuration).coreCollaborationResourcesSearchCollections(filter, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreGuestAvatarApi - axios parameter creator
 * @export
 */
export const CoreGuestAvatarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {number} [darkTheme] Return dark avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGuestAvatarGetAvatar: async (guestName: string, size: string, darkTheme?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestName' is not null or undefined
            assertParamExists('coreGuestAvatarGetAvatar', 'guestName', guestName)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('coreGuestAvatarGetAvatar', 'size', size)
            const localVarPath = `/index.php/avatar/guest/{guestName}/{size}`
                .replace(`{${"guestName"}}`, encodeURIComponent(String(guestName)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (darkTheme !== undefined) {
                localVarQueryParameter['darkTheme'] = darkTheme;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a dark guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGuestAvatarGetAvatarDark: async (guestName: string, size: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestName' is not null or undefined
            assertParamExists('coreGuestAvatarGetAvatarDark', 'guestName', guestName)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('coreGuestAvatarGetAvatarDark', 'size', size)
            const localVarPath = `/index.php/avatar/guest/{guestName}/{size}/dark`
                .replace(`{${"guestName"}}`, encodeURIComponent(String(guestName)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreGuestAvatarApi - functional programming interface
 * @export
 */
export const CoreGuestAvatarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreGuestAvatarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {number} [darkTheme] Return dark avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreGuestAvatarGetAvatar(guestName: string, size: string, darkTheme?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreGuestAvatarGetAvatar(guestName, size, darkTheme, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a dark guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreGuestAvatarGetAvatarDark(guestName: string, size: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreGuestAvatarGetAvatarDark(guestName, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreGuestAvatarApi - factory interface
 * @export
 */
export const CoreGuestAvatarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreGuestAvatarApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {number} [darkTheme] Return dark avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGuestAvatarGetAvatar(guestName: string, size: string, darkTheme?: number, options?: any): AxiosPromise<File> {
            return localVarFp.coreGuestAvatarGetAvatar(guestName, size, darkTheme, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a dark guest avatar image response
         * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
         * @param {string} size The desired avatar size, e.g. 64 for 64x64px
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreGuestAvatarGetAvatarDark(guestName: string, size: string, options?: any): AxiosPromise<File> {
            return localVarFp.coreGuestAvatarGetAvatarDark(guestName, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreGuestAvatarApi - object-oriented interface
 * @export
 * @class CoreGuestAvatarApi
 * @extends {BaseAPI}
 */
export class CoreGuestAvatarApi extends BaseAPI {
    /**
     * 
     * @summary Returns a guest avatar image response
     * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
     * @param {string} size The desired avatar size, e.g. 64 for 64x64px
     * @param {number} [darkTheme] Return dark avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreGuestAvatarApi
     */
    public coreGuestAvatarGetAvatar(guestName: string, size: string, darkTheme?: number, options?: AxiosRequestConfig) {
        return CoreGuestAvatarApiFp(this.configuration).coreGuestAvatarGetAvatar(guestName, size, darkTheme, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a dark guest avatar image response
     * @param {string} guestName The guest name, e.g. \&quot;Albert\&quot;
     * @param {string} size The desired avatar size, e.g. 64 for 64x64px
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreGuestAvatarApi
     */
    public coreGuestAvatarGetAvatarDark(guestName: string, size: string, options?: AxiosRequestConfig) {
        return CoreGuestAvatarApiFp(this.configuration).coreGuestAvatarGetAvatarDark(guestName, size, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreHoverCardApi - axios parameter creator
 * @export
 */
export const CoreHoverCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the user details for a hovercard
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreHoverCardGetUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('coreHoverCardGetUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreHoverCardGetUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/hovercard/v1/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreHoverCardApi - functional programming interface
 * @export
 */
export const CoreHoverCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreHoverCardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the user details for a hovercard
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreHoverCardGetUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreHoverCardGetUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreHoverCardGetUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreHoverCardApi - factory interface
 * @export
 */
export const CoreHoverCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreHoverCardApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the user details for a hovercard
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreHoverCardGetUser(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreHoverCardGetUser200Response> {
            return localVarFp.coreHoverCardGetUser(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreHoverCardApi - object-oriented interface
 * @export
 * @class CoreHoverCardApi
 * @extends {BaseAPI}
 */
export class CoreHoverCardApi extends BaseAPI {
    /**
     * 
     * @summary Get the user details for a hovercard
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreHoverCardApi
     */
    public coreHoverCardGetUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreHoverCardApiFp(this.configuration).coreHoverCardGetUser(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreNavigationApi - axios parameter creator
 * @export
 */
export const CoreNavigationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the apps navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreNavigationGetAppsNavigation: async (oCSAPIRequest: string, absolute?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreNavigationGetAppsNavigation', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/navigation/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (absolute !== undefined) {
                localVarQueryParameter['absolute'] = absolute;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the settings navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreNavigationGetSettingsNavigation: async (oCSAPIRequest: string, absolute?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreNavigationGetSettingsNavigation', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/navigation/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (absolute !== undefined) {
                localVarQueryParameter['absolute'] = absolute;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreNavigationApi - functional programming interface
 * @export
 */
export const CoreNavigationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreNavigationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the apps navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreNavigationGetAppsNavigation(oCSAPIRequest: string, absolute?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreNavigationGetAppsNavigation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreNavigationGetAppsNavigation(oCSAPIRequest, absolute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the settings navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreNavigationGetSettingsNavigation(oCSAPIRequest: string, absolute?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreNavigationGetAppsNavigation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreNavigationGetSettingsNavigation(oCSAPIRequest, absolute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreNavigationApi - factory interface
 * @export
 */
export const CoreNavigationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreNavigationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the apps navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreNavigationGetAppsNavigation(oCSAPIRequest: string, absolute?: number, options?: any): AxiosPromise<CoreNavigationGetAppsNavigation200Response> {
            return localVarFp.coreNavigationGetAppsNavigation(oCSAPIRequest, absolute, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the settings navigation
         * @param {string} oCSAPIRequest 
         * @param {number} [absolute] Rewrite URLs to absolute ones
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreNavigationGetSettingsNavigation(oCSAPIRequest: string, absolute?: number, options?: any): AxiosPromise<CoreNavigationGetAppsNavigation200Response> {
            return localVarFp.coreNavigationGetSettingsNavigation(oCSAPIRequest, absolute, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreNavigationApi - object-oriented interface
 * @export
 * @class CoreNavigationApi
 * @extends {BaseAPI}
 */
export class CoreNavigationApi extends BaseAPI {
    /**
     * 
     * @summary Get the apps navigation
     * @param {string} oCSAPIRequest 
     * @param {number} [absolute] Rewrite URLs to absolute ones
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreNavigationApi
     */
    public coreNavigationGetAppsNavigation(oCSAPIRequest: string, absolute?: number, options?: AxiosRequestConfig) {
        return CoreNavigationApiFp(this.configuration).coreNavigationGetAppsNavigation(oCSAPIRequest, absolute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the settings navigation
     * @param {string} oCSAPIRequest 
     * @param {number} [absolute] Rewrite URLs to absolute ones
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreNavigationApi
     */
    public coreNavigationGetSettingsNavigation(oCSAPIRequest: string, absolute?: number, options?: AxiosRequestConfig) {
        return CoreNavigationApiFp(this.configuration).coreNavigationGetSettingsNavigation(oCSAPIRequest, absolute, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreOcsApi - axios parameter creator
 * @export
 */
export const CoreOcsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the capabilities
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreOcsGetCapabilities: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreOcsGetCapabilities', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/capabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreOcsApi - functional programming interface
 * @export
 */
export const CoreOcsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreOcsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the capabilities
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreOcsGetCapabilities(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreOcsGetCapabilities200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreOcsGetCapabilities(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreOcsApi - factory interface
 * @export
 */
export const CoreOcsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreOcsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the capabilities
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreOcsGetCapabilities(oCSAPIRequest: string, options?: any): AxiosPromise<CoreOcsGetCapabilities200Response> {
            return localVarFp.coreOcsGetCapabilities(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreOcsApi - object-oriented interface
 * @export
 * @class CoreOcsApi
 * @extends {BaseAPI}
 */
export class CoreOcsApi extends BaseAPI {
    /**
     * 
     * @summary Get the capabilities
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreOcsApi
     */
    public coreOcsGetCapabilities(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreOcsApiFp(this.configuration).coreOcsGetCapabilities(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CorePreviewApi - axios parameter creator
 * @export
 */
export const CorePreviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a preview by file ID
         * @param {string} [file] Path of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corePreviewGetPreview: async (file?: string, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/core/preview.png`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (a !== undefined) {
                localVarQueryParameter['a'] = a;
            }

            if (forceIcon !== undefined) {
                localVarQueryParameter['forceIcon'] = forceIcon;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a preview by file ID
         * @param {number} [fileId] ID of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corePreviewGetPreviewByFileId: async (fileId?: number, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/core/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (a !== undefined) {
                localVarQueryParameter['a'] = a;
            }

            if (forceIcon !== undefined) {
                localVarQueryParameter['forceIcon'] = forceIcon;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CorePreviewApi - functional programming interface
 * @export
 */
export const CorePreviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CorePreviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a preview by file ID
         * @param {string} [file] Path of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async corePreviewGetPreview(file?: string, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.corePreviewGetPreview(file, x, y, a, forceIcon, mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a preview by file ID
         * @param {number} [fileId] ID of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async corePreviewGetPreviewByFileId(fileId?: number, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.corePreviewGetPreviewByFileId(fileId, x, y, a, forceIcon, mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CorePreviewApi - factory interface
 * @export
 */
export const CorePreviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CorePreviewApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a preview by file ID
         * @param {string} [file] Path of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corePreviewGetPreview(file?: string, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, options?: any): AxiosPromise<File> {
            return localVarFp.corePreviewGetPreview(file, x, y, a, forceIcon, mode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a preview by file ID
         * @param {number} [fileId] ID of the file
         * @param {number} [x] Width of the preview
         * @param {number} [y] Height of the preview
         * @param {number} [a] Not crop the preview
         * @param {number} [forceIcon] Force returning an icon
         * @param {string} [mode] How to crop the image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        corePreviewGetPreviewByFileId(fileId?: number, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, options?: any): AxiosPromise<File> {
            return localVarFp.corePreviewGetPreviewByFileId(fileId, x, y, a, forceIcon, mode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CorePreviewApi - object-oriented interface
 * @export
 * @class CorePreviewApi
 * @extends {BaseAPI}
 */
export class CorePreviewApi extends BaseAPI {
    /**
     * 
     * @summary Get a preview by file ID
     * @param {string} [file] Path of the file
     * @param {number} [x] Width of the preview
     * @param {number} [y] Height of the preview
     * @param {number} [a] Not crop the preview
     * @param {number} [forceIcon] Force returning an icon
     * @param {string} [mode] How to crop the image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorePreviewApi
     */
    public corePreviewGetPreview(file?: string, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, options?: AxiosRequestConfig) {
        return CorePreviewApiFp(this.configuration).corePreviewGetPreview(file, x, y, a, forceIcon, mode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a preview by file ID
     * @param {number} [fileId] ID of the file
     * @param {number} [x] Width of the preview
     * @param {number} [y] Height of the preview
     * @param {number} [a] Not crop the preview
     * @param {number} [forceIcon] Force returning an icon
     * @param {string} [mode] How to crop the image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CorePreviewApi
     */
    public corePreviewGetPreviewByFileId(fileId?: number, x?: number, y?: number, a?: number, forceIcon?: number, mode?: string, options?: AxiosRequestConfig) {
        return CorePreviewApiFp(this.configuration).corePreviewGetPreviewByFileId(fileId, x, y, a, forceIcon, mode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreProfileApiApi - axios parameter creator
 * @export
 */
export const CoreProfileApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update the visiblity of a parameter
         * @param {string} paramId ID of the parameter
         * @param {string} visibility New visibility
         * @param {string} targetUserId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreProfileApiSetVisibility: async (paramId: string, visibility: string, targetUserId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paramId' is not null or undefined
            assertParamExists('coreProfileApiSetVisibility', 'paramId', paramId)
            // verify required parameter 'visibility' is not null or undefined
            assertParamExists('coreProfileApiSetVisibility', 'visibility', visibility)
            // verify required parameter 'targetUserId' is not null or undefined
            assertParamExists('coreProfileApiSetVisibility', 'targetUserId', targetUserId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreProfileApiSetVisibility', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/profile/{targetUserId}`
                .replace(`{${"targetUserId"}}`, encodeURIComponent(String(targetUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (paramId !== undefined) {
                localVarQueryParameter['paramId'] = paramId;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['visibility'] = visibility;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreProfileApiApi - functional programming interface
 * @export
 */
export const CoreProfileApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreProfileApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update the visiblity of a parameter
         * @param {string} paramId ID of the parameter
         * @param {string} visibility New visibility
         * @param {string} targetUserId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreProfileApiSetVisibility(paramId: string, visibility: string, targetUserId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreProfileApiSetVisibility(paramId, visibility, targetUserId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreProfileApiApi - factory interface
 * @export
 */
export const CoreProfileApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreProfileApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Update the visiblity of a parameter
         * @param {string} paramId ID of the parameter
         * @param {string} visibility New visibility
         * @param {string} targetUserId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreProfileApiSetVisibility(paramId: string, visibility: string, targetUserId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.coreProfileApiSetVisibility(paramId, visibility, targetUserId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreProfileApiApi - object-oriented interface
 * @export
 * @class CoreProfileApiApi
 * @extends {BaseAPI}
 */
export class CoreProfileApiApi extends BaseAPI {
    /**
     * 
     * @summary Update the visiblity of a parameter
     * @param {string} paramId ID of the parameter
     * @param {string} visibility New visibility
     * @param {string} targetUserId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreProfileApiApi
     */
    public coreProfileApiSetVisibility(paramId: string, visibility: string, targetUserId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreProfileApiApiFp(this.configuration).coreProfileApiSetVisibility(paramId, visibility, targetUserId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreReferenceApi - axios parameter creator
 * @export
 */
export const CoreReferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a preview for a reference
         * @param {string} referenceId the reference cache key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferencePreview: async (referenceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceId' is not null or undefined
            assertParamExists('coreReferencePreview', 'referenceId', referenceId)
            const localVarPath = `/index.php/core/references/preview/{referenceId}`
                .replace(`{${"referenceId"}}`, encodeURIComponent(String(referenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreReferenceApi - functional programming interface
 * @export
 */
export const CoreReferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreReferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a preview for a reference
         * @param {string} referenceId the reference cache key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferencePreview(referenceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferencePreview(referenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreReferenceApi - factory interface
 * @export
 */
export const CoreReferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreReferenceApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a preview for a reference
         * @param {string} referenceId the reference cache key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferencePreview(referenceId: string, options?: any): AxiosPromise<File> {
            return localVarFp.coreReferencePreview(referenceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreReferenceApi - object-oriented interface
 * @export
 * @class CoreReferenceApi
 * @extends {BaseAPI}
 */
export class CoreReferenceApi extends BaseAPI {
    /**
     * 
     * @summary Get a preview for a reference
     * @param {string} referenceId the reference cache key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApi
     */
    public coreReferencePreview(referenceId: string, options?: AxiosRequestConfig) {
        return CoreReferenceApiFp(this.configuration).coreReferencePreview(referenceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreReferenceApiApi - axios parameter creator
 * @export
 */
export const CoreReferenceApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Extract references from a text
         * @param {string} text Text to extract from
         * @param {string} oCSAPIRequest 
         * @param {number} [resolve] Resolve the references
         * @param {number} [limit] Maximum amount of references to extract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiExtract: async (text: string, oCSAPIRequest: string, resolve?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('coreReferenceApiExtract', 'text', text)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiExtract', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/extract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (resolve !== undefined) {
                localVarQueryParameter['resolve'] = resolve;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the providers
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiGetProvidersInfo: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiGetProvidersInfo', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resolve multiple references
         * @param {string} references References to resolve
         * @param {string} oCSAPIRequest 
         * @param {number} [limit] Maximum amount of references to resolve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiResolve: async (references: string, oCSAPIRequest: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'references' is not null or undefined
            assertParamExists('coreReferenceApiResolve', 'references', references)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiResolve', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/resolve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (references !== undefined) {
                localVarQueryParameter['references'] = references;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resolve a reference
         * @param {string} reference Reference to resolve
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiResolveOne: async (reference: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reference' is not null or undefined
            assertParamExists('coreReferenceApiResolveOne', 'reference', reference)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiResolveOne', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/resolve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reference !== undefined) {
                localVarQueryParameter['reference'] = reference;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Touch a provider
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {number} [timestamp] Timestamp of the last usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiTouchProvider: async (providerId: string, oCSAPIRequest: string, timestamp?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('coreReferenceApiTouchProvider', 'providerId', providerId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreReferenceApiTouchProvider', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/references/provider/{providerId}`
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreReferenceApiApi - functional programming interface
 * @export
 */
export const CoreReferenceApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreReferenceApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Extract references from a text
         * @param {string} text Text to extract from
         * @param {string} oCSAPIRequest 
         * @param {number} [resolve] Resolve the references
         * @param {number} [limit] Maximum amount of references to extract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiExtract(text: string, oCSAPIRequest: string, resolve?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiResolveOne200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiExtract(text, oCSAPIRequest, resolve, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the providers
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiGetProvidersInfo(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiGetProvidersInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiGetProvidersInfo(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resolve multiple references
         * @param {string} references References to resolve
         * @param {string} oCSAPIRequest 
         * @param {number} [limit] Maximum amount of references to resolve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiResolve(references: string, oCSAPIRequest: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiResolveOne200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiResolve(references, oCSAPIRequest, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resolve a reference
         * @param {string} reference Reference to resolve
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiResolveOne(reference: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiResolveOne200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiResolveOne(reference, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Touch a provider
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {number} [timestamp] Timestamp of the last usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreReferenceApiTouchProvider(providerId: string, oCSAPIRequest: string, timestamp?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiTouchProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreReferenceApiTouchProvider(providerId, oCSAPIRequest, timestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreReferenceApiApi - factory interface
 * @export
 */
export const CoreReferenceApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreReferenceApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Extract references from a text
         * @param {string} text Text to extract from
         * @param {string} oCSAPIRequest 
         * @param {number} [resolve] Resolve the references
         * @param {number} [limit] Maximum amount of references to extract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiExtract(text: string, oCSAPIRequest: string, resolve?: number, limit?: number, options?: any): AxiosPromise<CoreReferenceApiResolveOne200Response> {
            return localVarFp.coreReferenceApiExtract(text, oCSAPIRequest, resolve, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the providers
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiGetProvidersInfo(oCSAPIRequest: string, options?: any): AxiosPromise<CoreReferenceApiGetProvidersInfo200Response> {
            return localVarFp.coreReferenceApiGetProvidersInfo(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resolve multiple references
         * @param {string} references References to resolve
         * @param {string} oCSAPIRequest 
         * @param {number} [limit] Maximum amount of references to resolve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiResolve(references: string, oCSAPIRequest: string, limit?: number, options?: any): AxiosPromise<CoreReferenceApiResolveOne200Response> {
            return localVarFp.coreReferenceApiResolve(references, oCSAPIRequest, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resolve a reference
         * @param {string} reference Reference to resolve
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiResolveOne(reference: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreReferenceApiResolveOne200Response> {
            return localVarFp.coreReferenceApiResolveOne(reference, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Touch a provider
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {number} [timestamp] Timestamp of the last usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreReferenceApiTouchProvider(providerId: string, oCSAPIRequest: string, timestamp?: number, options?: any): AxiosPromise<CoreReferenceApiTouchProvider200Response> {
            return localVarFp.coreReferenceApiTouchProvider(providerId, oCSAPIRequest, timestamp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreReferenceApiApi - object-oriented interface
 * @export
 * @class CoreReferenceApiApi
 * @extends {BaseAPI}
 */
export class CoreReferenceApiApi extends BaseAPI {
    /**
     * 
     * @summary Extract references from a text
     * @param {string} text Text to extract from
     * @param {string} oCSAPIRequest 
     * @param {number} [resolve] Resolve the references
     * @param {number} [limit] Maximum amount of references to extract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiExtract(text: string, oCSAPIRequest: string, resolve?: number, limit?: number, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiExtract(text, oCSAPIRequest, resolve, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the providers
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiGetProvidersInfo(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiGetProvidersInfo(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resolve multiple references
     * @param {string} references References to resolve
     * @param {string} oCSAPIRequest 
     * @param {number} [limit] Maximum amount of references to resolve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiResolve(references: string, oCSAPIRequest: string, limit?: number, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiResolve(references, oCSAPIRequest, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resolve a reference
     * @param {string} reference Reference to resolve
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiResolveOne(reference: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiResolveOne(reference, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Touch a provider
     * @param {string} providerId ID of the provider
     * @param {string} oCSAPIRequest 
     * @param {number} [timestamp] Timestamp of the last usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreReferenceApiApi
     */
    public coreReferenceApiTouchProvider(providerId: string, oCSAPIRequest: string, timestamp?: number, options?: AxiosRequestConfig) {
        return CoreReferenceApiApiFp(this.configuration).coreReferenceApiTouchProvider(providerId, oCSAPIRequest, timestamp, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreTranslationApiApi - axios parameter creator
 * @export
 */
export const CoreTranslationApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the list of supported languages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTranslationApiLanguages: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTranslationApiLanguages', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/translation/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Translate a text
         * @param {string} text Text to be translated
         * @param {string} toLanguage Language to translate to
         * @param {string} oCSAPIRequest 
         * @param {string} [fromLanguage] Language to translate from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTranslationApiTranslate: async (text: string, toLanguage: string, oCSAPIRequest: string, fromLanguage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('coreTranslationApiTranslate', 'text', text)
            // verify required parameter 'toLanguage' is not null or undefined
            assertParamExists('coreTranslationApiTranslate', 'toLanguage', toLanguage)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreTranslationApiTranslate', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/translation/translate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (fromLanguage !== undefined) {
                localVarQueryParameter['fromLanguage'] = fromLanguage;
            }

            if (toLanguage !== undefined) {
                localVarQueryParameter['toLanguage'] = toLanguage;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreTranslationApiApi - functional programming interface
 * @export
 */
export const CoreTranslationApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreTranslationApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the list of supported languages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTranslationApiLanguages(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTranslationApiLanguages200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTranslationApiLanguages(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Translate a text
         * @param {string} text Text to be translated
         * @param {string} toLanguage Language to translate to
         * @param {string} oCSAPIRequest 
         * @param {string} [fromLanguage] Language to translate from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreTranslationApiTranslate(text: string, toLanguage: string, oCSAPIRequest: string, fromLanguage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreTranslationApiTranslate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreTranslationApiTranslate(text, toLanguage, oCSAPIRequest, fromLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreTranslationApiApi - factory interface
 * @export
 */
export const CoreTranslationApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreTranslationApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the list of supported languages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTranslationApiLanguages(oCSAPIRequest: string, options?: any): AxiosPromise<CoreTranslationApiLanguages200Response> {
            return localVarFp.coreTranslationApiLanguages(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Translate a text
         * @param {string} text Text to be translated
         * @param {string} toLanguage Language to translate to
         * @param {string} oCSAPIRequest 
         * @param {string} [fromLanguage] Language to translate from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreTranslationApiTranslate(text: string, toLanguage: string, oCSAPIRequest: string, fromLanguage?: string, options?: any): AxiosPromise<CoreTranslationApiTranslate200Response> {
            return localVarFp.coreTranslationApiTranslate(text, toLanguage, oCSAPIRequest, fromLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreTranslationApiApi - object-oriented interface
 * @export
 * @class CoreTranslationApiApi
 * @extends {BaseAPI}
 */
export class CoreTranslationApiApi extends BaseAPI {
    /**
     * 
     * @summary Get the list of supported languages
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTranslationApiApi
     */
    public coreTranslationApiLanguages(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreTranslationApiApiFp(this.configuration).coreTranslationApiLanguages(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Translate a text
     * @param {string} text Text to be translated
     * @param {string} toLanguage Language to translate to
     * @param {string} oCSAPIRequest 
     * @param {string} [fromLanguage] Language to translate from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreTranslationApiApi
     */
    public coreTranslationApiTranslate(text: string, toLanguage: string, oCSAPIRequest: string, fromLanguage?: string, options?: AxiosRequestConfig) {
        return CoreTranslationApiApiFp(this.configuration).coreTranslationApiTranslate(text, toLanguage, oCSAPIRequest, fromLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreUnifiedSearchApi - axios parameter creator
 * @export
 */
export const CoreUnifiedSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the providers for unified search
         * @param {string} oCSAPIRequest 
         * @param {string} [from] the url the user is currently at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreUnifiedSearchGetProviders: async (oCSAPIRequest: string, from?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreUnifiedSearchGetProviders', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/search/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {string} [term] Term to search
         * @param {number} [sortOrder] Order of entries
         * @param {number} [limit] Maximum amount of entries
         * @param {string} [cursor] Offset for searching
         * @param {string} [from] The current user URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreUnifiedSearchSearch: async (providerId: string, oCSAPIRequest: string, term?: string, sortOrder?: number, limit?: number, cursor?: string, from?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('coreUnifiedSearchSearch', 'providerId', providerId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreUnifiedSearchSearch', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/search/providers/{providerId}/search`
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreUnifiedSearchApi - functional programming interface
 * @export
 */
export const CoreUnifiedSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreUnifiedSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the providers for unified search
         * @param {string} oCSAPIRequest 
         * @param {string} [from] the url the user is currently at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreUnifiedSearchGetProviders(oCSAPIRequest: string, from?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreUnifiedSearchGetProviders200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreUnifiedSearchGetProviders(oCSAPIRequest, from, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {string} [term] Term to search
         * @param {number} [sortOrder] Order of entries
         * @param {number} [limit] Maximum amount of entries
         * @param {string} [cursor] Offset for searching
         * @param {string} [from] The current user URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreUnifiedSearchSearch(providerId: string, oCSAPIRequest: string, term?: string, sortOrder?: number, limit?: number, cursor?: string, from?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreUnifiedSearchSearch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreUnifiedSearchSearch(providerId, oCSAPIRequest, term, sortOrder, limit, cursor, from, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreUnifiedSearchApi - factory interface
 * @export
 */
export const CoreUnifiedSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreUnifiedSearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the providers for unified search
         * @param {string} oCSAPIRequest 
         * @param {string} [from] the url the user is currently at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreUnifiedSearchGetProviders(oCSAPIRequest: string, from?: string, options?: any): AxiosPromise<CoreUnifiedSearchGetProviders200Response> {
            return localVarFp.coreUnifiedSearchGetProviders(oCSAPIRequest, from, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {string} providerId ID of the provider
         * @param {string} oCSAPIRequest 
         * @param {string} [term] Term to search
         * @param {number} [sortOrder] Order of entries
         * @param {number} [limit] Maximum amount of entries
         * @param {string} [cursor] Offset for searching
         * @param {string} [from] The current user URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreUnifiedSearchSearch(providerId: string, oCSAPIRequest: string, term?: string, sortOrder?: number, limit?: number, cursor?: string, from?: string, options?: any): AxiosPromise<CoreUnifiedSearchSearch200Response> {
            return localVarFp.coreUnifiedSearchSearch(providerId, oCSAPIRequest, term, sortOrder, limit, cursor, from, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreUnifiedSearchApi - object-oriented interface
 * @export
 * @class CoreUnifiedSearchApi
 * @extends {BaseAPI}
 */
export class CoreUnifiedSearchApi extends BaseAPI {
    /**
     * 
     * @summary Get the providers for unified search
     * @param {string} oCSAPIRequest 
     * @param {string} [from] the url the user is currently at
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreUnifiedSearchApi
     */
    public coreUnifiedSearchGetProviders(oCSAPIRequest: string, from?: string, options?: AxiosRequestConfig) {
        return CoreUnifiedSearchApiFp(this.configuration).coreUnifiedSearchGetProviders(oCSAPIRequest, from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {string} providerId ID of the provider
     * @param {string} oCSAPIRequest 
     * @param {string} [term] Term to search
     * @param {number} [sortOrder] Order of entries
     * @param {number} [limit] Maximum amount of entries
     * @param {string} [cursor] Offset for searching
     * @param {string} [from] The current user URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreUnifiedSearchApi
     */
    public coreUnifiedSearchSearch(providerId: string, oCSAPIRequest: string, term?: string, sortOrder?: number, limit?: number, cursor?: string, from?: string, options?: AxiosRequestConfig) {
        return CoreUnifiedSearchApiFp(this.configuration).coreUnifiedSearchSearch(providerId, oCSAPIRequest, term, sortOrder, limit, cursor, from, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreWhatsNewApi - axios parameter creator
 * @export
 */
export const CoreWhatsNewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Dismiss the changes
         * @param {string} version Version to dismiss the changes for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWhatsNewDismiss: async (version: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('coreWhatsNewDismiss', 'version', version)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreWhatsNewDismiss', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/whatsnew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the changes
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWhatsNewGet: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('coreWhatsNewGet', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/core/whatsnew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreWhatsNewApi - functional programming interface
 * @export
 */
export const CoreWhatsNewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreWhatsNewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Dismiss the changes
         * @param {string} version Version to dismiss the changes for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreWhatsNewDismiss(version: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreWhatsNewDismiss(version, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the changes
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreWhatsNewGet(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreWhatsNewGet(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreWhatsNewApi - factory interface
 * @export
 */
export const CoreWhatsNewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreWhatsNewApiFp(configuration)
    return {
        /**
         * 
         * @summary Dismiss the changes
         * @param {string} version Version to dismiss the changes for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWhatsNewDismiss(version: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.coreWhatsNewDismiss(version, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the changes
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWhatsNewGet(oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewGet200Response> {
            return localVarFp.coreWhatsNewGet(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreWhatsNewApi - object-oriented interface
 * @export
 * @class CoreWhatsNewApi
 * @extends {BaseAPI}
 */
export class CoreWhatsNewApi extends BaseAPI {
    /**
     * 
     * @summary Dismiss the changes
     * @param {string} version Version to dismiss the changes for
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreWhatsNewApi
     */
    public coreWhatsNewDismiss(version: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreWhatsNewApiFp(this.configuration).coreWhatsNewDismiss(version, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the changes
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreWhatsNewApi
     */
    public coreWhatsNewGet(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return CoreWhatsNewApiFp(this.configuration).coreWhatsNewGet(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CoreWipeApi - axios parameter creator
 * @export
 */
export const CoreWipeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if the device should be wiped
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWipeCheckWipe: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('coreWipeCheckWipe', 'token', token)
            const localVarPath = `/index.php/core/wipe/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finish the wipe
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWipeWipeDone: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('coreWipeWipeDone', 'token', token)
            const localVarPath = `/index.php/core/wipe/success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreWipeApi - functional programming interface
 * @export
 */
export const CoreWipeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoreWipeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check if the device should be wiped
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreWipeCheckWipe(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWipeCheckWipe200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreWipeCheckWipe(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finish the wipe
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coreWipeWipeDone(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coreWipeWipeDone(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoreWipeApi - factory interface
 * @export
 */
export const CoreWipeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoreWipeApiFp(configuration)
    return {
        /**
         * 
         * @summary Check if the device should be wiped
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWipeCheckWipe(token: string, options?: any): AxiosPromise<CoreWipeCheckWipe200Response> {
            return localVarFp.coreWipeCheckWipe(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finish the wipe
         * @param {string} token App password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coreWipeWipeDone(token: string, options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.coreWipeWipeDone(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoreWipeApi - object-oriented interface
 * @export
 * @class CoreWipeApi
 * @extends {BaseAPI}
 */
export class CoreWipeApi extends BaseAPI {
    /**
     * 
     * @summary Check if the device should be wiped
     * @param {string} token App password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreWipeApi
     */
    public coreWipeCheckWipe(token: string, options?: AxiosRequestConfig) {
        return CoreWipeApiFp(this.configuration).coreWipeCheckWipe(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finish the wipe
     * @param {string} token App password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreWipeApi
     */
    public coreWipeWipeDone(token: string, options?: AxiosRequestConfig) {
        return CoreWipeApiFp(this.configuration).coreWipeWipeDone(token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DashboardDashboardApiApi - axios parameter creator
 * @export
 */
export const DashboardDashboardApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the items for the widgets
         * @param {string} oCSAPIRequest 
         * @param {string} [sinceIds] Array indexed by widget Ids, contains date/id from which we want the new items
         * @param {number} [limit] Limit number of result items per widget
         * @param {string} [widgets] Limit results to specific widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgetItems: async (oCSAPIRequest: string, sinceIds?: string, limit?: number, widgets?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('dashboardDashboardApiGetWidgetItems', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/dashboard/api/v1/widget-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sinceIds !== undefined) {
                localVarQueryParameter['sinceIds'] = sinceIds;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (widgets !== undefined) {
                localVarQueryParameter['widgets'] = widgets;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the widgets
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgets: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('dashboardDashboardApiGetWidgets', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/dashboard/api/v1/widgets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardDashboardApiApi - functional programming interface
 * @export
 */
export const DashboardDashboardApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardDashboardApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the items for the widgets
         * @param {string} oCSAPIRequest 
         * @param {string} [sinceIds] Array indexed by widget Ids, contains date/id from which we want the new items
         * @param {number} [limit] Limit number of result items per widget
         * @param {string} [widgets] Limit results to specific widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardDashboardApiGetWidgetItems(oCSAPIRequest: string, sinceIds?: string, limit?: number, widgets?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardDashboardApiGetWidgetItems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardDashboardApiGetWidgetItems(oCSAPIRequest, sinceIds, limit, widgets, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the widgets
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dashboardDashboardApiGetWidgets(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardDashboardApiGetWidgets200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dashboardDashboardApiGetWidgets(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardDashboardApiApi - factory interface
 * @export
 */
export const DashboardDashboardApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardDashboardApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the items for the widgets
         * @param {string} oCSAPIRequest 
         * @param {string} [sinceIds] Array indexed by widget Ids, contains date/id from which we want the new items
         * @param {number} [limit] Limit number of result items per widget
         * @param {string} [widgets] Limit results to specific widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgetItems(oCSAPIRequest: string, sinceIds?: string, limit?: number, widgets?: string, options?: any): AxiosPromise<DashboardDashboardApiGetWidgetItems200Response> {
            return localVarFp.dashboardDashboardApiGetWidgetItems(oCSAPIRequest, sinceIds, limit, widgets, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the widgets
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardDashboardApiGetWidgets(oCSAPIRequest: string, options?: any): AxiosPromise<DashboardDashboardApiGetWidgets200Response> {
            return localVarFp.dashboardDashboardApiGetWidgets(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardDashboardApiApi - object-oriented interface
 * @export
 * @class DashboardDashboardApiApi
 * @extends {BaseAPI}
 */
export class DashboardDashboardApiApi extends BaseAPI {
    /**
     * 
     * @summary Get the items for the widgets
     * @param {string} oCSAPIRequest 
     * @param {string} [sinceIds] Array indexed by widget Ids, contains date/id from which we want the new items
     * @param {number} [limit] Limit number of result items per widget
     * @param {string} [widgets] Limit results to specific widgets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDashboardApiApi
     */
    public dashboardDashboardApiGetWidgetItems(oCSAPIRequest: string, sinceIds?: string, limit?: number, widgets?: string, options?: AxiosRequestConfig) {
        return DashboardDashboardApiApiFp(this.configuration).dashboardDashboardApiGetWidgetItems(oCSAPIRequest, sinceIds, limit, widgets, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the widgets
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardDashboardApiApi
     */
    public dashboardDashboardApiGetWidgets(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return DashboardDashboardApiApiFp(this.configuration).dashboardDashboardApiGetWidgets(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DavDirectApi - axios parameter creator
 * @export
 */
export const DavDirectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a direct link to a file
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {number} [expirationTime] Duration until the link expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        davDirectGetUrl: async (fileId: number, oCSAPIRequest: string, expirationTime?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('davDirectGetUrl', 'fileId', fileId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('davDirectGetUrl', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/dav/api/v1/direct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (expirationTime !== undefined) {
                localVarQueryParameter['expirationTime'] = expirationTime;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DavDirectApi - functional programming interface
 * @export
 */
export const DavDirectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DavDirectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a direct link to a file
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {number} [expirationTime] Duration until the link expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async davDirectGetUrl(fileId: number, oCSAPIRequest: string, expirationTime?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DavDirectGetUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.davDirectGetUrl(fileId, oCSAPIRequest, expirationTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DavDirectApi - factory interface
 * @export
 */
export const DavDirectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DavDirectApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a direct link to a file
         * @param {number} fileId ID of the file
         * @param {string} oCSAPIRequest 
         * @param {number} [expirationTime] Duration until the link expires
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        davDirectGetUrl(fileId: number, oCSAPIRequest: string, expirationTime?: number, options?: any): AxiosPromise<DavDirectGetUrl200Response> {
            return localVarFp.davDirectGetUrl(fileId, oCSAPIRequest, expirationTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DavDirectApi - object-oriented interface
 * @export
 * @class DavDirectApi
 * @extends {BaseAPI}
 */
export class DavDirectApi extends BaseAPI {
    /**
     * 
     * @summary Get a direct link to a file
     * @param {number} fileId ID of the file
     * @param {string} oCSAPIRequest 
     * @param {number} [expirationTime] Duration until the link expires
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DavDirectApi
     */
    public davDirectGetUrl(fileId: number, oCSAPIRequest: string, expirationTime?: number, options?: AxiosRequestConfig) {
        return DavDirectApiFp(this.configuration).davDirectGetUrl(fileId, oCSAPIRequest, expirationTime, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesSharingDeletedShareapiApi - axios parameter creator
 * @export
 */
export const FilesSharingDeletedShareapiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of all deleted shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingDeletedShareapiList: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingDeletedShareapiList', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/deletedshares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Undelete a deleted share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingDeletedShareapiUndelete: async (id: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingDeletedShareapiUndelete', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingDeletedShareapiUndelete', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/deletedshares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingDeletedShareapiApi - functional programming interface
 * @export
 */
export const FilesSharingDeletedShareapiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingDeletedShareapiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of all deleted shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingDeletedShareapiList(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingDeletedShareapiList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingDeletedShareapiList(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Undelete a deleted share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingDeletedShareapiUndelete(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingDeletedShareapiUndelete(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingDeletedShareapiApi - factory interface
 * @export
 */
export const FilesSharingDeletedShareapiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingDeletedShareapiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of all deleted shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingDeletedShareapiList(oCSAPIRequest: string, options?: any): AxiosPromise<FilesSharingDeletedShareapiList200Response> {
            return localVarFp.filesSharingDeletedShareapiList(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Undelete a deleted share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingDeletedShareapiUndelete(id: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingDeletedShareapiUndelete(id, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesSharingDeletedShareapiApi - object-oriented interface
 * @export
 * @class FilesSharingDeletedShareapiApi
 * @extends {BaseAPI}
 */
export class FilesSharingDeletedShareapiApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of all deleted shares
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingDeletedShareapiApi
     */
    public filesSharingDeletedShareapiList(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingDeletedShareapiApiFp(this.configuration).filesSharingDeletedShareapiList(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Undelete a deleted share
     * @param {string} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingDeletedShareapiApi
     */
    public filesSharingDeletedShareapiUndelete(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingDeletedShareapiApiFp(this.configuration).filesSharingDeletedShareapiUndelete(id, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesSharingRemoteApi - axios parameter creator
 * @export
 */
export const FilesSharingRemoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteAcceptShare: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingRemoteAcceptShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteAcceptShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/pending/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decline a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteDeclineShare: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingRemoteDeclineShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteDeclineShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/pending/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of pending remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetOpenShares: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteGetOpenShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get info of a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetShare: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingRemoteGetShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteGetShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of accepted remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetShares: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteGetShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unshare a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteUnshare: async (id: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingRemoteUnshare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingRemoteUnshare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/remote_shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingRemoteApi - functional programming interface
 * @export
 */
export const FilesSharingRemoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingRemoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteAcceptShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteAcceptShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Decline a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteDeclineShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteDeclineShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of pending remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteGetOpenShares(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingRemoteGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteGetOpenShares(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get info of a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteGetShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingRemoteGetShare200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteGetShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of accepted remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteGetShares(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingRemoteGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteGetShares(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unshare a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingRemoteUnshare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingRemoteUnshare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingRemoteApi - factory interface
 * @export
 */
export const FilesSharingRemoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingRemoteApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteAcceptShare(id: number, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingRemoteAcceptShare(id, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decline a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteDeclineShare(id: number, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingRemoteDeclineShare(id, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of pending remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetOpenShares(oCSAPIRequest: string, options?: any): AxiosPromise<FilesSharingRemoteGetShares200Response> {
            return localVarFp.filesSharingRemoteGetOpenShares(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get info of a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetShare(id: number, oCSAPIRequest: string, options?: any): AxiosPromise<FilesSharingRemoteGetShare200Response> {
            return localVarFp.filesSharingRemoteGetShare(id, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of accepted remote shares
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteGetShares(oCSAPIRequest: string, options?: any): AxiosPromise<FilesSharingRemoteGetShares200Response> {
            return localVarFp.filesSharingRemoteGetShares(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unshare a remote share
         * @param {number} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingRemoteUnshare(id: number, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingRemoteUnshare(id, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesSharingRemoteApi - object-oriented interface
 * @export
 * @class FilesSharingRemoteApi
 * @extends {BaseAPI}
 */
export class FilesSharingRemoteApi extends BaseAPI {
    /**
     * 
     * @summary Accept a remote share
     * @param {number} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteAcceptShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteAcceptShare(id, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decline a remote share
     * @param {number} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteDeclineShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteDeclineShare(id, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of pending remote shares
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteGetOpenShares(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteGetOpenShares(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get info of a remote share
     * @param {number} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteGetShare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteGetShare(id, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of accepted remote shares
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteGetShares(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteGetShares(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unshare a remote share
     * @param {number} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingRemoteApi
     */
    public filesSharingRemoteUnshare(id: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingRemoteApiFp(this.configuration).filesSharingRemoteUnshare(id, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesSharingShareInfoApi - axios parameter creator
 * @export
 */
export const FilesSharingShareInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the info about a share
         * @param {string} t Token of the share
         * @param {string} [password] Password of the share
         * @param {string} [dir] Subdirectory to get info about
         * @param {number} [depth] Maximum depth to get info about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareInfoInfo: async (t: string, password?: string, dir?: string, depth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 't' is not null or undefined
            assertParamExists('filesSharingShareInfoInfo', 't', t)
            const localVarPath = `/index.php/apps/files_sharing/shareinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (dir !== undefined) {
                localVarQueryParameter['dir'] = dir;
            }

            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingShareInfoApi - functional programming interface
 * @export
 */
export const FilesSharingShareInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingShareInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the info about a share
         * @param {string} t Token of the share
         * @param {string} [password] Password of the share
         * @param {string} [dir] Subdirectory to get info about
         * @param {number} [depth] Maximum depth to get info about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareInfoInfo(t: string, password?: string, dir?: string, depth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareInfoInfo(t, password, dir, depth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingShareInfoApi - factory interface
 * @export
 */
export const FilesSharingShareInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingShareInfoApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the info about a share
         * @param {string} t Token of the share
         * @param {string} [password] Password of the share
         * @param {string} [dir] Subdirectory to get info about
         * @param {number} [depth] Maximum depth to get info about
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareInfoInfo(t: string, password?: string, dir?: string, depth?: number, options?: any): AxiosPromise<FilesSharingShareInfo> {
            return localVarFp.filesSharingShareInfoInfo(t, password, dir, depth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesSharingShareInfoApi - object-oriented interface
 * @export
 * @class FilesSharingShareInfoApi
 * @extends {BaseAPI}
 */
export class FilesSharingShareInfoApi extends BaseAPI {
    /**
     * 
     * @summary Get the info about a share
     * @param {string} t Token of the share
     * @param {string} [password] Password of the share
     * @param {string} [dir] Subdirectory to get info about
     * @param {number} [depth] Maximum depth to get info about
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareInfoApi
     */
    public filesSharingShareInfoInfo(t: string, password?: string, dir?: string, depth?: number, options?: AxiosRequestConfig) {
        return FilesSharingShareInfoApiFp(this.configuration).filesSharingShareInfoInfo(t, password, dir, depth, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesSharingShareapiApi - axios parameter creator
 * @export
 */
export const FilesSharingShareapiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiAcceptShare: async (id: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingShareapiAcceptShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiAcceptShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/pending/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a share
         * @param {string} oCSAPIRequest 
         * @param {string} [path] Path of the share
         * @param {number} [permissions] Permissions for the share
         * @param {number} [shareType] Type of the share
         * @param {string} [shareWith] The entity this should be shared with
         * @param {string} [publicUpload] If public uploading is allowed
         * @param {string} [password] Password for the share
         * @param {string} [sendPasswordByTalk] Send the password for the share over Talk
         * @param {string} [expireDate] Expiry date of the share
         * @param {string} [note] Note for the share
         * @param {string} [label] Label for the share (only used in link and email)
         * @param {string} [attributes] Additional attributes for the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiCreateShare: async (oCSAPIRequest: string, path?: string, permissions?: number, shareType?: number, shareWith?: string, publicUpload?: string, password?: string, sendPasswordByTalk?: string, expireDate?: string, note?: string, label?: string, attributes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiCreateShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (permissions !== undefined) {
                localVarQueryParameter['permissions'] = permissions;
            }

            if (shareType !== undefined) {
                localVarQueryParameter['shareType'] = shareType;
            }

            if (shareWith !== undefined) {
                localVarQueryParameter['shareWith'] = shareWith;
            }

            if (publicUpload !== undefined) {
                localVarQueryParameter['publicUpload'] = publicUpload;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (sendPasswordByTalk !== undefined) {
                localVarQueryParameter['sendPasswordByTalk'] = sendPasswordByTalk;
            }

            if (expireDate !== undefined) {
                localVarQueryParameter['expireDate'] = expireDate;
            }

            if (note !== undefined) {
                localVarQueryParameter['note'] = note;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiDeleteShare: async (id: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingShareapiDeleteShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiDeleteShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all shares relative to a file, including parent folders shares rights
         * @param {string} path Path all shares will be relative to
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetInheritedShares: async (path: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('filesSharingShareapiGetInheritedShares', 'path', path)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiGetInheritedShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/inherited`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific share by id
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetShare: async (id: string, oCSAPIRequest: string, includeTags?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingShareapiGetShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiGetShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeTags !== undefined) {
                localVarQueryParameter['include_tags'] = includeTags;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get shares of the current user
         * @param {string} oCSAPIRequest 
         * @param {string} [sharedWithMe] Only get shares with the current user
         * @param {string} [reshares] Only get shares by the current user and reshares
         * @param {string} [subfiles] Only get all shares in a folder
         * @param {string} [path] Get shares for a specific path
         * @param {string} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetShares: async (oCSAPIRequest: string, sharedWithMe?: string, reshares?: string, subfiles?: string, path?: string, includeTags?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiGetShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sharedWithMe !== undefined) {
                localVarQueryParameter['shared_with_me'] = sharedWithMe;
            }

            if (reshares !== undefined) {
                localVarQueryParameter['reshares'] = reshares;
            }

            if (subfiles !== undefined) {
                localVarQueryParameter['subfiles'] = subfiles;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (includeTags !== undefined) {
                localVarQueryParameter['include_tags'] = includeTags;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all shares that are still pending
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiPendingShares: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiPendingShares', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number} [permissions] New permissions
         * @param {string} [password] New password
         * @param {string} [sendPasswordByTalk] New condition if the password should be send over Talk
         * @param {string} [publicUpload] New condition if public uploading is allowed
         * @param {string} [expireDate] New expiry date
         * @param {string} [note] New note
         * @param {string} [label] New label
         * @param {string} [hideDownload] New condition if the download should be hidden
         * @param {string} [attributes] New additional attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiUpdateShare: async (id: string, oCSAPIRequest: string, permissions?: number, password?: string, sendPasswordByTalk?: string, publicUpload?: string, expireDate?: string, note?: string, label?: string, hideDownload?: string, attributes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesSharingShareapiUpdateShare', 'id', id)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareapiUpdateShare', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (permissions !== undefined) {
                localVarQueryParameter['permissions'] = permissions;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (sendPasswordByTalk !== undefined) {
                localVarQueryParameter['sendPasswordByTalk'] = sendPasswordByTalk;
            }

            if (publicUpload !== undefined) {
                localVarQueryParameter['publicUpload'] = publicUpload;
            }

            if (expireDate !== undefined) {
                localVarQueryParameter['expireDate'] = expireDate;
            }

            if (note !== undefined) {
                localVarQueryParameter['note'] = note;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }

            if (hideDownload !== undefined) {
                localVarQueryParameter['hideDownload'] = hideDownload;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingShareapiApi - functional programming interface
 * @export
 */
export const FilesSharingShareapiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingShareapiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiAcceptShare(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiAcceptShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a share
         * @param {string} oCSAPIRequest 
         * @param {string} [path] Path of the share
         * @param {number} [permissions] Permissions for the share
         * @param {number} [shareType] Type of the share
         * @param {string} [shareWith] The entity this should be shared with
         * @param {string} [publicUpload] If public uploading is allowed
         * @param {string} [password] Password for the share
         * @param {string} [sendPasswordByTalk] Send the password for the share over Talk
         * @param {string} [expireDate] Expiry date of the share
         * @param {string} [note] Note for the share
         * @param {string} [label] Label for the share (only used in link and email)
         * @param {string} [attributes] Additional attributes for the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiCreateShare(oCSAPIRequest: string, path?: string, permissions?: number, shareType?: number, shareWith?: string, publicUpload?: string, password?: string, sendPasswordByTalk?: string, expireDate?: string, note?: string, label?: string, attributes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiCreateShare200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiCreateShare(oCSAPIRequest, path, permissions, shareType, shareWith, publicUpload, password, sendPasswordByTalk, expireDate, note, label, attributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiDeleteShare(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiDeleteShare(id, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all shares relative to a file, including parent folders shares rights
         * @param {string} path Path all shares will be relative to
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiGetInheritedShares(path: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiGetInheritedShares(path, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a specific share by id
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiGetShare(id: string, oCSAPIRequest: string, includeTags?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiCreateShare200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiGetShare(id, oCSAPIRequest, includeTags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get shares of the current user
         * @param {string} oCSAPIRequest 
         * @param {string} [sharedWithMe] Only get shares with the current user
         * @param {string} [reshares] Only get shares by the current user and reshares
         * @param {string} [subfiles] Only get all shares in a folder
         * @param {string} [path] Get shares for a specific path
         * @param {string} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiGetShares(oCSAPIRequest: string, sharedWithMe?: string, reshares?: string, subfiles?: string, path?: string, includeTags?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiGetShares(oCSAPIRequest, sharedWithMe, reshares, subfiles, path, includeTags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all shares that are still pending
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiPendingShares(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiGetShares200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiPendingShares(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number} [permissions] New permissions
         * @param {string} [password] New password
         * @param {string} [sendPasswordByTalk] New condition if the password should be send over Talk
         * @param {string} [publicUpload] New condition if public uploading is allowed
         * @param {string} [expireDate] New expiry date
         * @param {string} [note] New note
         * @param {string} [label] New label
         * @param {string} [hideDownload] New condition if the download should be hidden
         * @param {string} [attributes] New additional attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareapiUpdateShare(id: string, oCSAPIRequest: string, permissions?: number, password?: string, sendPasswordByTalk?: string, publicUpload?: string, expireDate?: string, note?: string, label?: string, hideDownload?: string, attributes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareapiCreateShare200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareapiUpdateShare(id, oCSAPIRequest, permissions, password, sendPasswordByTalk, publicUpload, expireDate, note, label, hideDownload, attributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingShareapiApi - factory interface
 * @export
 */
export const FilesSharingShareapiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingShareapiApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiAcceptShare(id: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingShareapiAcceptShare(id, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a share
         * @param {string} oCSAPIRequest 
         * @param {string} [path] Path of the share
         * @param {number} [permissions] Permissions for the share
         * @param {number} [shareType] Type of the share
         * @param {string} [shareWith] The entity this should be shared with
         * @param {string} [publicUpload] If public uploading is allowed
         * @param {string} [password] Password for the share
         * @param {string} [sendPasswordByTalk] Send the password for the share over Talk
         * @param {string} [expireDate] Expiry date of the share
         * @param {string} [note] Note for the share
         * @param {string} [label] Label for the share (only used in link and email)
         * @param {string} [attributes] Additional attributes for the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiCreateShare(oCSAPIRequest: string, path?: string, permissions?: number, shareType?: number, shareWith?: string, publicUpload?: string, password?: string, sendPasswordByTalk?: string, expireDate?: string, note?: string, label?: string, attributes?: string, options?: any): AxiosPromise<FilesSharingShareapiCreateShare200Response> {
            return localVarFp.filesSharingShareapiCreateShare(oCSAPIRequest, path, permissions, shareType, shareWith, publicUpload, password, sendPasswordByTalk, expireDate, note, label, attributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiDeleteShare(id: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.filesSharingShareapiDeleteShare(id, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all shares relative to a file, including parent folders shares rights
         * @param {string} path Path all shares will be relative to
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetInheritedShares(path: string, oCSAPIRequest: string, options?: any): AxiosPromise<FilesSharingShareapiGetShares200Response> {
            return localVarFp.filesSharingShareapiGetInheritedShares(path, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific share by id
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetShare(id: string, oCSAPIRequest: string, includeTags?: number, options?: any): AxiosPromise<FilesSharingShareapiCreateShare200Response> {
            return localVarFp.filesSharingShareapiGetShare(id, oCSAPIRequest, includeTags, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get shares of the current user
         * @param {string} oCSAPIRequest 
         * @param {string} [sharedWithMe] Only get shares with the current user
         * @param {string} [reshares] Only get shares by the current user and reshares
         * @param {string} [subfiles] Only get all shares in a folder
         * @param {string} [path] Get shares for a specific path
         * @param {string} [includeTags] Include tags in the share
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiGetShares(oCSAPIRequest: string, sharedWithMe?: string, reshares?: string, subfiles?: string, path?: string, includeTags?: string, options?: any): AxiosPromise<FilesSharingShareapiGetShares200Response> {
            return localVarFp.filesSharingShareapiGetShares(oCSAPIRequest, sharedWithMe, reshares, subfiles, path, includeTags, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all shares that are still pending
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiPendingShares(oCSAPIRequest: string, options?: any): AxiosPromise<FilesSharingShareapiGetShares200Response> {
            return localVarFp.filesSharingShareapiPendingShares(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a share
         * @param {string} id ID of the share
         * @param {string} oCSAPIRequest 
         * @param {number} [permissions] New permissions
         * @param {string} [password] New password
         * @param {string} [sendPasswordByTalk] New condition if the password should be send over Talk
         * @param {string} [publicUpload] New condition if public uploading is allowed
         * @param {string} [expireDate] New expiry date
         * @param {string} [note] New note
         * @param {string} [label] New label
         * @param {string} [hideDownload] New condition if the download should be hidden
         * @param {string} [attributes] New additional attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareapiUpdateShare(id: string, oCSAPIRequest: string, permissions?: number, password?: string, sendPasswordByTalk?: string, publicUpload?: string, expireDate?: string, note?: string, label?: string, hideDownload?: string, attributes?: string, options?: any): AxiosPromise<FilesSharingShareapiCreateShare200Response> {
            return localVarFp.filesSharingShareapiUpdateShare(id, oCSAPIRequest, permissions, password, sendPasswordByTalk, publicUpload, expireDate, note, label, hideDownload, attributes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesSharingShareapiApi - object-oriented interface
 * @export
 * @class FilesSharingShareapiApi
 * @extends {BaseAPI}
 */
export class FilesSharingShareapiApi extends BaseAPI {
    /**
     * 
     * @summary Accept a share
     * @param {string} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiAcceptShare(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiAcceptShare(id, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a share
     * @param {string} oCSAPIRequest 
     * @param {string} [path] Path of the share
     * @param {number} [permissions] Permissions for the share
     * @param {number} [shareType] Type of the share
     * @param {string} [shareWith] The entity this should be shared with
     * @param {string} [publicUpload] If public uploading is allowed
     * @param {string} [password] Password for the share
     * @param {string} [sendPasswordByTalk] Send the password for the share over Talk
     * @param {string} [expireDate] Expiry date of the share
     * @param {string} [note] Note for the share
     * @param {string} [label] Label for the share (only used in link and email)
     * @param {string} [attributes] Additional attributes for the share
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiCreateShare(oCSAPIRequest: string, path?: string, permissions?: number, shareType?: number, shareWith?: string, publicUpload?: string, password?: string, sendPasswordByTalk?: string, expireDate?: string, note?: string, label?: string, attributes?: string, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiCreateShare(oCSAPIRequest, path, permissions, shareType, shareWith, publicUpload, password, sendPasswordByTalk, expireDate, note, label, attributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a share
     * @param {string} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiDeleteShare(id: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiDeleteShare(id, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all shares relative to a file, including parent folders shares rights
     * @param {string} path Path all shares will be relative to
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiGetInheritedShares(path: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiGetInheritedShares(path, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific share by id
     * @param {string} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {number} [includeTags] Include tags in the share
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiGetShare(id: string, oCSAPIRequest: string, includeTags?: number, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiGetShare(id, oCSAPIRequest, includeTags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get shares of the current user
     * @param {string} oCSAPIRequest 
     * @param {string} [sharedWithMe] Only get shares with the current user
     * @param {string} [reshares] Only get shares by the current user and reshares
     * @param {string} [subfiles] Only get all shares in a folder
     * @param {string} [path] Get shares for a specific path
     * @param {string} [includeTags] Include tags in the share
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiGetShares(oCSAPIRequest: string, sharedWithMe?: string, reshares?: string, subfiles?: string, path?: string, includeTags?: string, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiGetShares(oCSAPIRequest, sharedWithMe, reshares, subfiles, path, includeTags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all shares that are still pending
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiPendingShares(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiPendingShares(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a share
     * @param {string} id ID of the share
     * @param {string} oCSAPIRequest 
     * @param {number} [permissions] New permissions
     * @param {string} [password] New password
     * @param {string} [sendPasswordByTalk] New condition if the password should be send over Talk
     * @param {string} [publicUpload] New condition if public uploading is allowed
     * @param {string} [expireDate] New expiry date
     * @param {string} [note] New note
     * @param {string} [label] New label
     * @param {string} [hideDownload] New condition if the download should be hidden
     * @param {string} [attributes] New additional attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareapiApi
     */
    public filesSharingShareapiUpdateShare(id: string, oCSAPIRequest: string, permissions?: number, password?: string, sendPasswordByTalk?: string, publicUpload?: string, expireDate?: string, note?: string, label?: string, hideDownload?: string, attributes?: string, options?: AxiosRequestConfig) {
        return FilesSharingShareapiApiFp(this.configuration).filesSharingShareapiUpdateShare(id, oCSAPIRequest, permissions, password, sendPasswordByTalk, publicUpload, expireDate, note, label, hideDownload, attributes, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesSharingShareesapiApi - axios parameter creator
 * @export
 */
export const FilesSharingShareesapiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find recommended sharees
         * @param {string} itemType Limit to specific item types
         * @param {string} oCSAPIRequest 
         * @param {string} [shareType] Limit to specific share types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareesapiFindRecommended: async (itemType: string, oCSAPIRequest: string, shareType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('filesSharingShareesapiFindRecommended', 'itemType', itemType)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareesapiFindRecommended', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/sharees_recommended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (shareType !== undefined) {
                localVarQueryParameter['shareType'] = shareType;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search for sharees
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {string} [itemType] Limit to specific item types
         * @param {number} [page] Page offset for searching
         * @param {number} [perPage] Limit amount of search results per page
         * @param {string} [shareType] Limit to specific share types
         * @param {number} [lookup] If a global lookup should be performed too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareesapiSearch: async (oCSAPIRequest: string, search?: string, itemType?: string, page?: number, perPage?: number, shareType?: string, lookup?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('filesSharingShareesapiSearch', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/files_sharing/api/v1/sharees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (shareType !== undefined) {
                localVarQueryParameter['shareType'] = shareType;
            }

            if (lookup !== undefined) {
                localVarQueryParameter['lookup'] = lookup;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesSharingShareesapiApi - functional programming interface
 * @export
 */
export const FilesSharingShareesapiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesSharingShareesapiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find recommended sharees
         * @param {string} itemType Limit to specific item types
         * @param {string} oCSAPIRequest 
         * @param {string} [shareType] Limit to specific share types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareesapiFindRecommended(itemType: string, oCSAPIRequest: string, shareType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareesapiFindRecommended200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareesapiFindRecommended(itemType, oCSAPIRequest, shareType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search for sharees
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {string} [itemType] Limit to specific item types
         * @param {number} [page] Page offset for searching
         * @param {number} [perPage] Limit amount of search results per page
         * @param {string} [shareType] Limit to specific share types
         * @param {number} [lookup] If a global lookup should be performed too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesSharingShareesapiSearch(oCSAPIRequest: string, search?: string, itemType?: string, page?: number, perPage?: number, shareType?: string, lookup?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilesSharingShareesapiSearch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesSharingShareesapiSearch(oCSAPIRequest, search, itemType, page, perPage, shareType, lookup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesSharingShareesapiApi - factory interface
 * @export
 */
export const FilesSharingShareesapiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesSharingShareesapiApiFp(configuration)
    return {
        /**
         * 
         * @summary Find recommended sharees
         * @param {string} itemType Limit to specific item types
         * @param {string} oCSAPIRequest 
         * @param {string} [shareType] Limit to specific share types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareesapiFindRecommended(itemType: string, oCSAPIRequest: string, shareType?: string, options?: any): AxiosPromise<FilesSharingShareesapiFindRecommended200Response> {
            return localVarFp.filesSharingShareesapiFindRecommended(itemType, oCSAPIRequest, shareType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search for sharees
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {string} [itemType] Limit to specific item types
         * @param {number} [page] Page offset for searching
         * @param {number} [perPage] Limit amount of search results per page
         * @param {string} [shareType] Limit to specific share types
         * @param {number} [lookup] If a global lookup should be performed too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesSharingShareesapiSearch(oCSAPIRequest: string, search?: string, itemType?: string, page?: number, perPage?: number, shareType?: string, lookup?: number, options?: any): AxiosPromise<FilesSharingShareesapiSearch200Response> {
            return localVarFp.filesSharingShareesapiSearch(oCSAPIRequest, search, itemType, page, perPage, shareType, lookup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesSharingShareesapiApi - object-oriented interface
 * @export
 * @class FilesSharingShareesapiApi
 * @extends {BaseAPI}
 */
export class FilesSharingShareesapiApi extends BaseAPI {
    /**
     * 
     * @summary Find recommended sharees
     * @param {string} itemType Limit to specific item types
     * @param {string} oCSAPIRequest 
     * @param {string} [shareType] Limit to specific share types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareesapiApi
     */
    public filesSharingShareesapiFindRecommended(itemType: string, oCSAPIRequest: string, shareType?: string, options?: AxiosRequestConfig) {
        return FilesSharingShareesapiApiFp(this.configuration).filesSharingShareesapiFindRecommended(itemType, oCSAPIRequest, shareType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search for sharees
     * @param {string} oCSAPIRequest 
     * @param {string} [search] Text to search for
     * @param {string} [itemType] Limit to specific item types
     * @param {number} [page] Page offset for searching
     * @param {number} [perPage] Limit amount of search results per page
     * @param {string} [shareType] Limit to specific share types
     * @param {number} [lookup] If a global lookup should be performed too
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesSharingShareesapiApi
     */
    public filesSharingShareesapiSearch(oCSAPIRequest: string, search?: string, itemType?: string, page?: number, perPage?: number, shareType?: string, lookup?: number, options?: AxiosRequestConfig) {
        return FilesSharingShareesapiApiFp(this.configuration).filesSharingShareesapiSearch(oCSAPIRequest, search, itemType, page, perPage, shareType, lookup, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * Oauth2LoginRedirectorApi - axios parameter creator
 * @export
 */
export const Oauth2LoginRedirectorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authorize the user
         * @param {string} clientId Client ID
         * @param {string} state State of the flow
         * @param {string} responseType Response type for the flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2LoginRedirectorAuthorize: async (clientId: string, state: string, responseType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('oauth2LoginRedirectorAuthorize', 'clientId', clientId)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('oauth2LoginRedirectorAuthorize', 'state', state)
            // verify required parameter 'responseType' is not null or undefined
            assertParamExists('oauth2LoginRedirectorAuthorize', 'responseType', responseType)
            const localVarPath = `/index.php/apps/oauth2/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Oauth2LoginRedirectorApi - functional programming interface
 * @export
 */
export const Oauth2LoginRedirectorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Oauth2LoginRedirectorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authorize the user
         * @param {string} clientId Client ID
         * @param {string} state State of the flow
         * @param {string} responseType Response type for the flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauth2LoginRedirectorAuthorize(clientId: string, state: string, responseType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauth2LoginRedirectorAuthorize(clientId, state, responseType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Oauth2LoginRedirectorApi - factory interface
 * @export
 */
export const Oauth2LoginRedirectorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Oauth2LoginRedirectorApiFp(configuration)
    return {
        /**
         * 
         * @summary Authorize the user
         * @param {string} clientId Client ID
         * @param {string} state State of the flow
         * @param {string} responseType Response type for the flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2LoginRedirectorAuthorize(clientId: string, state: string, responseType: string, options?: any): AxiosPromise<string> {
            return localVarFp.oauth2LoginRedirectorAuthorize(clientId, state, responseType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Oauth2LoginRedirectorApi - object-oriented interface
 * @export
 * @class Oauth2LoginRedirectorApi
 * @extends {BaseAPI}
 */
export class Oauth2LoginRedirectorApi extends BaseAPI {
    /**
     * 
     * @summary Authorize the user
     * @param {string} clientId Client ID
     * @param {string} state State of the flow
     * @param {string} responseType Response type for the flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2LoginRedirectorApi
     */
    public oauth2LoginRedirectorAuthorize(clientId: string, state: string, responseType: string, options?: AxiosRequestConfig) {
        return Oauth2LoginRedirectorApiFp(this.configuration).oauth2LoginRedirectorAuthorize(clientId, state, responseType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * Oauth2OauthApiApi - axios parameter creator
 * @export
 */
export const Oauth2OauthApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a token
         * @param {string} grantType Token type that should be granted
         * @param {string} code Code of the flow
         * @param {string} refreshToken Refresh token
         * @param {string} clientId Client ID
         * @param {string} clientSecret Client secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2OauthApiGetToken: async (grantType: string, code: string, refreshToken: string, clientId: string, clientSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('oauth2OauthApiGetToken', 'grantType', grantType)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('oauth2OauthApiGetToken', 'code', code)
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('oauth2OauthApiGetToken', 'refreshToken', refreshToken)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('oauth2OauthApiGetToken', 'clientId', clientId)
            // verify required parameter 'clientSecret' is not null or undefined
            assertParamExists('oauth2OauthApiGetToken', 'clientSecret', clientSecret)
            const localVarPath = `/index.php/apps/oauth2/api/v1/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (grantType !== undefined) {
                localVarQueryParameter['grant_type'] = grantType;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (refreshToken !== undefined) {
                localVarQueryParameter['refresh_token'] = refreshToken;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (clientSecret !== undefined) {
                localVarQueryParameter['client_secret'] = clientSecret;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Oauth2OauthApiApi - functional programming interface
 * @export
 */
export const Oauth2OauthApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Oauth2OauthApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a token
         * @param {string} grantType Token type that should be granted
         * @param {string} code Code of the flow
         * @param {string} refreshToken Refresh token
         * @param {string} clientId Client ID
         * @param {string} clientSecret Client secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauth2OauthApiGetToken(grantType: string, code: string, refreshToken: string, clientId: string, clientSecret: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Oauth2OauthApiGetToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauth2OauthApiGetToken(grantType, code, refreshToken, clientId, clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Oauth2OauthApiApi - factory interface
 * @export
 */
export const Oauth2OauthApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Oauth2OauthApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a token
         * @param {string} grantType Token type that should be granted
         * @param {string} code Code of the flow
         * @param {string} refreshToken Refresh token
         * @param {string} clientId Client ID
         * @param {string} clientSecret Client secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2OauthApiGetToken(grantType: string, code: string, refreshToken: string, clientId: string, clientSecret: string, options?: any): AxiosPromise<Oauth2OauthApiGetToken200Response> {
            return localVarFp.oauth2OauthApiGetToken(grantType, code, refreshToken, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Oauth2OauthApiApi - object-oriented interface
 * @export
 * @class Oauth2OauthApiApi
 * @extends {BaseAPI}
 */
export class Oauth2OauthApiApi extends BaseAPI {
    /**
     * 
     * @summary Get a token
     * @param {string} grantType Token type that should be granted
     * @param {string} code Code of the flow
     * @param {string} refreshToken Refresh token
     * @param {string} clientId Client ID
     * @param {string} clientSecret Client secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2OauthApiApi
     */
    public oauth2OauthApiGetToken(grantType: string, code: string, refreshToken: string, clientId: string, clientSecret: string, options?: AxiosRequestConfig) {
        return Oauth2OauthApiApiFp(this.configuration).oauth2OauthApiGetToken(grantType, code, refreshToken, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProvisioningApiAppConfigApi - axios parameter creator
 * @export
 */
export const ProvisioningApiAppConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary Delete a config key of an app
         * @param {string} app ID of the app
         * @param {string} key Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigDeleteKey: async (app: string, key: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppConfigDeleteKey', 'app', app)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiAppConfigDeleteKey', 'key', key)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigDeleteKey', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of apps
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetApps: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetApps', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get the config keys of an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetKeys: async (app: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetKeys', 'app', app)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetKeys', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get a the config value of an app
         * @param {string} app ID if the app
         * @param {string} key Key
         * @param {string} oCSAPIRequest 
         * @param {string} [defaultValue] Default returned value if the value is empty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetValue: async (app: string, key: string, oCSAPIRequest: string, defaultValue?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetValue', 'app', app)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetValue', 'key', key)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigGetValue', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (defaultValue !== undefined) {
                localVarQueryParameter['defaultValue'] = defaultValue;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the config value of an app
         * @param {string} value New value for the key
         * @param {string} app ID of the app
         * @param {string} key Key to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigSetValue: async (value: string, app: string, key: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'value' is not null or undefined
            assertParamExists('provisioningApiAppConfigSetValue', 'value', value)
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppConfigSetValue', 'app', app)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiAppConfigSetValue', 'key', key)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppConfigSetValue', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiAppConfigApi - functional programming interface
 * @export
 */
export const ProvisioningApiAppConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiAppConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Delete a config key of an app
         * @param {string} app ID of the app
         * @param {string} key Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigDeleteKey(app: string, key: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigDeleteKey(app, key, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of apps
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigGetApps(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppConfigGetApps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigGetApps(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get the config keys of an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigGetKeys(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppConfigGetApps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigGetKeys(app, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get a the config value of an app
         * @param {string} app ID if the app
         * @param {string} key Key
         * @param {string} oCSAPIRequest 
         * @param {string} [defaultValue] Default returned value if the value is empty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigGetValue(app: string, key: string, oCSAPIRequest: string, defaultValue?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppConfigGetValue200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigGetValue(app, key, oCSAPIRequest, defaultValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the config value of an app
         * @param {string} value New value for the key
         * @param {string} app ID of the app
         * @param {string} key Key to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppConfigSetValue(value: string, app: string, key: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppConfigSetValue(value, app, key, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiAppConfigApi - factory interface
 * @export
 */
export const ProvisioningApiAppConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiAppConfigApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Delete a config key of an app
         * @param {string} app ID of the app
         * @param {string} key Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigDeleteKey(app: string, key: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiAppConfigDeleteKey(app, key, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of apps
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetApps(oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiAppConfigGetApps200Response> {
            return localVarFp.provisioningApiAppConfigGetApps(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get the config keys of an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetKeys(app: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiAppConfigGetApps200Response> {
            return localVarFp.provisioningApiAppConfigGetKeys(app, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get a the config value of an app
         * @param {string} app ID if the app
         * @param {string} key Key
         * @param {string} oCSAPIRequest 
         * @param {string} [defaultValue] Default returned value if the value is empty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigGetValue(app: string, key: string, oCSAPIRequest: string, defaultValue?: string, options?: any): AxiosPromise<ProvisioningApiAppConfigGetValue200Response> {
            return localVarFp.provisioningApiAppConfigGetValue(app, key, oCSAPIRequest, defaultValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the config value of an app
         * @param {string} value New value for the key
         * @param {string} app ID of the app
         * @param {string} key Key to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppConfigSetValue(value: string, app: string, key: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiAppConfigSetValue(value, app, key, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvisioningApiAppConfigApi - object-oriented interface
 * @export
 * @class ProvisioningApiAppConfigApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiAppConfigApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary Delete a config key of an app
     * @param {string} app ID of the app
     * @param {string} key Key to delete
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigDeleteKey(app: string, key: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigDeleteKey(app, key, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get a list of apps
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigGetApps(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigGetApps(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get the config keys of an app
     * @param {string} app ID of the app
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigGetKeys(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigGetKeys(app, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get a the config value of an app
     * @param {string} app ID if the app
     * @param {string} key Key
     * @param {string} oCSAPIRequest 
     * @param {string} [defaultValue] Default returned value if the value is empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigGetValue(app: string, key: string, oCSAPIRequest: string, defaultValue?: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigGetValue(app, key, oCSAPIRequest, defaultValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the config value of an app
     * @param {string} value New value for the key
     * @param {string} app ID of the app
     * @param {string} key Key to update
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppConfigApi
     */
    public provisioningApiAppConfigSetValue(value: string, app: string, key: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppConfigApiFp(this.configuration).provisioningApiAppConfigSetValue(value, app, key, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProvisioningApiAppsApi - axios parameter creator
 * @export
 */
export const ProvisioningApiAppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary Disable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsDisable: async (app: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppsDisable', 'app', app)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppsDisable', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/apps/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Enable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsEnable: async (app: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppsEnable', 'app', app)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppsEnable', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/apps/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get the app info for an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsGetAppInfo: async (app: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('provisioningApiAppsGetAppInfo', 'app', app)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppsGetAppInfo', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/apps/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of installed apps
         * @param {string} oCSAPIRequest 
         * @param {string} [filter] Filter for enabled or disabled apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsGetApps: async (oCSAPIRequest: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiAppsGetApps', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiAppsApi - functional programming interface
 * @export
 */
export const ProvisioningApiAppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiAppsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Disable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppsDisable(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppsDisable(app, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Enable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppsEnable(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppsEnable(app, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get the app info for an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppsGetAppInfo(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppsGetAppInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppsGetAppInfo(app, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of installed apps
         * @param {string} oCSAPIRequest 
         * @param {string} [filter] Filter for enabled or disabled apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiAppsGetApps(oCSAPIRequest: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiAppsGetApps200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiAppsGetApps(oCSAPIRequest, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiAppsApi - factory interface
 * @export
 */
export const ProvisioningApiAppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiAppsApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Disable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsDisable(app: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiAppsDisable(app, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Enable an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsEnable(app: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiAppsEnable(app, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get the app info for an app
         * @param {string} app ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsGetAppInfo(app: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiAppsGetAppInfo200Response> {
            return localVarFp.provisioningApiAppsGetAppInfo(app, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get a list of installed apps
         * @param {string} oCSAPIRequest 
         * @param {string} [filter] Filter for enabled or disabled apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiAppsGetApps(oCSAPIRequest: string, filter?: string, options?: any): AxiosPromise<ProvisioningApiAppsGetApps200Response> {
            return localVarFp.provisioningApiAppsGetApps(oCSAPIRequest, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvisioningApiAppsApi - object-oriented interface
 * @export
 * @class ProvisioningApiAppsApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiAppsApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary Disable an app
     * @param {string} app ID of the app
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppsApi
     */
    public provisioningApiAppsDisable(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppsApiFp(this.configuration).provisioningApiAppsDisable(app, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Enable an app
     * @param {string} app ID of the app
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppsApi
     */
    public provisioningApiAppsEnable(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppsApiFp(this.configuration).provisioningApiAppsEnable(app, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get the app info for an app
     * @param {string} app ID of the app
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppsApi
     */
    public provisioningApiAppsGetAppInfo(app: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppsApiFp(this.configuration).provisioningApiAppsGetAppInfo(app, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get a list of installed apps
     * @param {string} oCSAPIRequest 
     * @param {string} [filter] Filter for enabled or disabled apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiAppsApi
     */
    public provisioningApiAppsGetApps(oCSAPIRequest: string, filter?: string, options?: AxiosRequestConfig) {
        return ProvisioningApiAppsApiFp(this.configuration).provisioningApiAppsGetApps(oCSAPIRequest, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProvisioningApiGroupsApi - axios parameter creator
 * @export
 */
export const ProvisioningApiGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary Create a new group
         * @param {string} groupid ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [displayname] Display name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsAddGroup: async (groupid: string, oCSAPIRequest: string, displayname?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('provisioningApiGroupsAddGroup', 'groupid', groupid)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsAddGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (displayname !== undefined) {
                localVarQueryParameter['displayname'] = displayname;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Delete a group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsDeleteGroup: async (groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsDeleteGroup', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsDeleteGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroup: async (groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroup', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupUsers: async (groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupUsers', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupUsers', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}/users`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users details in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupUsersDetails: async (groupId: string, oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupUsersDetails', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupUsersDetails', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}/users/details`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of groups
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroups: async (oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroups', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of groups details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupsDetails: async (oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetGroupsDetails', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get the list of user IDs that are a subadmin of the group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetSubAdminsOfGroup: async (groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsGetSubAdminsOfGroup', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsGetSubAdminsOfGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}/subadmins`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Update a group
         * @param {string} key Key to update, only \&#39;displayname\&#39;
         * @param {string} value New value for the key
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsUpdateGroup: async (key: string, value: string, groupId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiGroupsUpdateGroup', 'key', key)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('provisioningApiGroupsUpdateGroup', 'value', value)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('provisioningApiGroupsUpdateGroup', 'groupId', groupId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiGroupsUpdateGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiGroupsApi - functional programming interface
 * @export
 */
export const ProvisioningApiGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Create a new group
         * @param {string} groupid ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [displayname] Display name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsAddGroup(groupid: string, oCSAPIRequest: string, displayname?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsAddGroup(groupid, oCSAPIRequest, displayname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Delete a group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsDeleteGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsDeleteGroup(groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroup(groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroupUsers(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroupUsers(groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users details in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroupUsersDetails(groupId: string, oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsersDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroupUsersDetails(groupId, oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of groups
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroups(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroups200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroups(oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of groups details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetGroupsDetails(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupsDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetGroupsDetails(oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get the list of user IDs that are a subadmin of the group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsGetSubAdminsOfGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsGetSubAdminsOfGroup(groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Update a group
         * @param {string} key Key to update, only \&#39;displayname\&#39;
         * @param {string} value New value for the key
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiGroupsUpdateGroup(key: string, value: string, groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiGroupsUpdateGroup(key, value, groupId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiGroupsApi - factory interface
 * @export
 */
export const ProvisioningApiGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiGroupsApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Create a new group
         * @param {string} groupid ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [displayname] Display name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsAddGroup(groupid: string, oCSAPIRequest: string, displayname?: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiGroupsAddGroup(groupid, oCSAPIRequest, displayname, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Delete a group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsDeleteGroup(groupId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiGroupsDeleteGroup(groupId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroup(groupId: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response> {
            return localVarFp.provisioningApiGroupsGetGroup(groupId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupUsers(groupId: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response> {
            return localVarFp.provisioningApiGroupsGetGroupUsers(groupId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users details in the specified group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupUsersDetails(groupId: string, oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProvisioningApiGroupsGetGroupUsersDetails200Response> {
            return localVarFp.provisioningApiGroupsGetGroupUsersDetails(groupId, oCSAPIRequest, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of groups
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroups(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProvisioningApiGroupsGetGroups200Response> {
            return localVarFp.provisioningApiGroupsGetGroups(oCSAPIRequest, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of groups details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetGroupsDetails(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProvisioningApiGroupsGetGroupsDetails200Response> {
            return localVarFp.provisioningApiGroupsGetGroupsDetails(oCSAPIRequest, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get the list of user IDs that are a subadmin of the group
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsGetSubAdminsOfGroup(groupId: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.provisioningApiGroupsGetSubAdminsOfGroup(groupId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Update a group
         * @param {string} key Key to update, only \&#39;displayname\&#39;
         * @param {string} value New value for the key
         * @param {string} groupId ID of the group
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiGroupsUpdateGroup(key: string, value: string, groupId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiGroupsUpdateGroup(key, value, groupId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvisioningApiGroupsApi - object-oriented interface
 * @export
 * @class ProvisioningApiGroupsApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiGroupsApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary Create a new group
     * @param {string} groupid ID of the group
     * @param {string} oCSAPIRequest 
     * @param {string} [displayname] Display name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsAddGroup(groupid: string, oCSAPIRequest: string, displayname?: string, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsAddGroup(groupid, oCSAPIRequest, displayname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Delete a group
     * @param {string} groupId ID of the group
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsDeleteGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsDeleteGroup(groupId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users in the specified group
     * @param {string} groupId ID of the group
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroup(groupId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users in the specified group
     * @param {string} groupId ID of the group
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroupUsers(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroupUsers(groupId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users details in the specified group
     * @param {string} groupId ID of the group
     * @param {string} oCSAPIRequest 
     * @param {string} [search] Text to search for
     * @param {number} [limit] Limit the amount of groups returned
     * @param {number} [offset] Offset for searching for groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroupUsersDetails(groupId: string, oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroupUsersDetails(groupId, oCSAPIRequest, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of groups
     * @param {string} oCSAPIRequest 
     * @param {string} [search] Text to search for
     * @param {number} [limit] Limit the amount of groups returned
     * @param {number} [offset] Offset for searching for groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroups(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroups(oCSAPIRequest, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of groups details
     * @param {string} oCSAPIRequest 
     * @param {string} [search] Text to search for
     * @param {number} [limit] Limit the amount of groups returned
     * @param {number} [offset] Offset for searching for groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetGroupsDetails(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetGroupsDetails(oCSAPIRequest, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get the list of user IDs that are a subadmin of the group
     * @param {string} groupId ID of the group
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsGetSubAdminsOfGroup(groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsGetSubAdminsOfGroup(groupId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Update a group
     * @param {string} key Key to update, only \&#39;displayname\&#39;
     * @param {string} value New value for the key
     * @param {string} groupId ID of the group
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiGroupsApi
     */
    public provisioningApiGroupsUpdateGroup(key: string, value: string, groupId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiGroupsApiFp(this.configuration).provisioningApiGroupsUpdateGroup(key, value, groupId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProvisioningApiPreferencesApi - axios parameter creator
 * @export
 */
export const ProvisioningApiPreferencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete multiple preferences for an app
         * @param {string} configKeys Keys to delete
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesDeleteMultiplePreference: async (configKeys: string, appId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configKeys' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeleteMultiplePreference', 'configKeys', configKeys)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeleteMultiplePreference', 'appId', appId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeleteMultiplePreference', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (configKeys !== undefined) {
                localVarQueryParameter['configKeys'] = configKeys;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a preference for an app
         * @param {string} appId ID of the app
         * @param {string} configKey Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesDeletePreference: async (appId: string, configKey: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeletePreference', 'appId', appId)
            // verify required parameter 'configKey' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeletePreference', 'configKey', configKey)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiPreferencesDeletePreference', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"configKey"}}`, encodeURIComponent(String(configKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple preference values of an app
         * @param {string} configs Key-value pairs of the preferences
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesSetMultiplePreferences: async (configs: string, appId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configs' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetMultiplePreferences', 'configs', configs)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetMultiplePreferences', 'appId', appId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetMultiplePreferences', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (configs !== undefined) {
                localVarQueryParameter['configs'] = configs;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a preference value of an app
         * @param {string} configValue New value
         * @param {string} appId ID of the app
         * @param {string} configKey Key of the preference
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesSetPreference: async (configValue: string, appId: string, configKey: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configValue' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetPreference', 'configValue', configValue)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetPreference', 'appId', appId)
            // verify required parameter 'configKey' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetPreference', 'configKey', configKey)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiPreferencesSetPreference', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"configKey"}}`, encodeURIComponent(String(configKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (configValue !== undefined) {
                localVarQueryParameter['configValue'] = configValue;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiPreferencesApi - functional programming interface
 * @export
 */
export const ProvisioningApiPreferencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiPreferencesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete multiple preferences for an app
         * @param {string} configKeys Keys to delete
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiPreferencesDeleteMultiplePreference(configKeys: string, appId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiPreferencesDeleteMultiplePreference(configKeys, appId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a preference for an app
         * @param {string} appId ID of the app
         * @param {string} configKey Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiPreferencesDeletePreference(appId: string, configKey: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiPreferencesDeletePreference(appId, configKey, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update multiple preference values of an app
         * @param {string} configs Key-value pairs of the preferences
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiPreferencesSetMultiplePreferences(configs: string, appId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiPreferencesSetMultiplePreferences(configs, appId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a preference value of an app
         * @param {string} configValue New value
         * @param {string} appId ID of the app
         * @param {string} configKey Key of the preference
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiPreferencesSetPreference(configValue: string, appId: string, configKey: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiPreferencesSetPreference(configValue, appId, configKey, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiPreferencesApi - factory interface
 * @export
 */
export const ProvisioningApiPreferencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiPreferencesApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete multiple preferences for an app
         * @param {string} configKeys Keys to delete
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesDeleteMultiplePreference(configKeys: string, appId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiPreferencesDeleteMultiplePreference(configKeys, appId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a preference for an app
         * @param {string} appId ID of the app
         * @param {string} configKey Key to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesDeletePreference(appId: string, configKey: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiPreferencesDeletePreference(appId, configKey, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple preference values of an app
         * @param {string} configs Key-value pairs of the preferences
         * @param {string} appId ID of the app
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesSetMultiplePreferences(configs: string, appId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiPreferencesSetMultiplePreferences(configs, appId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a preference value of an app
         * @param {string} configValue New value
         * @param {string} appId ID of the app
         * @param {string} configKey Key of the preference
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiPreferencesSetPreference(configValue: string, appId: string, configKey: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiPreferencesSetPreference(configValue, appId, configKey, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvisioningApiPreferencesApi - object-oriented interface
 * @export
 * @class ProvisioningApiPreferencesApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiPreferencesApi extends BaseAPI {
    /**
     * 
     * @summary Delete multiple preferences for an app
     * @param {string} configKeys Keys to delete
     * @param {string} appId ID of the app
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiPreferencesApi
     */
    public provisioningApiPreferencesDeleteMultiplePreference(configKeys: string, appId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiPreferencesApiFp(this.configuration).provisioningApiPreferencesDeleteMultiplePreference(configKeys, appId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a preference for an app
     * @param {string} appId ID of the app
     * @param {string} configKey Key to delete
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiPreferencesApi
     */
    public provisioningApiPreferencesDeletePreference(appId: string, configKey: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiPreferencesApiFp(this.configuration).provisioningApiPreferencesDeletePreference(appId, configKey, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple preference values of an app
     * @param {string} configs Key-value pairs of the preferences
     * @param {string} appId ID of the app
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiPreferencesApi
     */
    public provisioningApiPreferencesSetMultiplePreferences(configs: string, appId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiPreferencesApiFp(this.configuration).provisioningApiPreferencesSetMultiplePreferences(configs, appId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a preference value of an app
     * @param {string} configValue New value
     * @param {string} appId ID of the app
     * @param {string} configKey Key of the preference
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiPreferencesApi
     */
    public provisioningApiPreferencesSetPreference(configValue: string, appId: string, configKey: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiPreferencesApiFp(this.configuration).provisioningApiPreferencesSetPreference(configValue, appId, configKey, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProvisioningApiUsersApi - axios parameter creator
 * @export
 */
export const ProvisioningApiUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary Make a user a subadmin of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddSubAdmin: async (groupid: string, userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('provisioningApiUsersAddSubAdmin', 'groupid', groupid)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersAddSubAdmin', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersAddSubAdmin', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/subadmins`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a user to a group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [groupid] ID of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddToGroup: async (userId: string, oCSAPIRequest: string, groupid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersAddToGroup', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersAddToGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/groups`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new user
         * @param {string} userid ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [password] Password of the user
         * @param {string} [displayName] Display name of the user
         * @param {string} [email] Email of the user
         * @param {string} [groups] Groups of the user
         * @param {string} [subadmin] Groups where the user is subadmin
         * @param {string} [quota] Quota of the user
         * @param {string} [language] Language of the user
         * @param {string} [manager] Manager of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddUser: async (userid: string, oCSAPIRequest: string, password?: string, displayName?: string, email?: string, groups?: string, subadmin?: string, quota?: string, language?: string, manager?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('provisioningApiUsersAddUser', 'userid', userid)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersAddUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userid !== undefined) {
                localVarQueryParameter['userid'] = userid;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (groups !== undefined) {
                localVarQueryParameter['groups'] = groups;
            }

            if (subadmin !== undefined) {
                localVarQueryParameter['subadmin'] = subadmin;
            }

            if (quota !== undefined) {
                localVarQueryParameter['quota'] = quota;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (manager !== undefined) {
                localVarQueryParameter['manager'] = manager;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersDeleteUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersDeleteUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersDeleteUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersDisableUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersDisableUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersDisableUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/disable`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a value of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEditUser: async (key: string, value: string, userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiUsersEditUser', 'key', key)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('provisioningApiUsersEditUser', 'value', value)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersEditUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersEditUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update multiple values of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} collectionName Collection to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEditUserMultiValue: async (key: string, value: string, userId: string, collectionName: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'key', key)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'value', value)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'userId', userId)
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'collectionName', collectionName)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersEditUserMultiValue', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/{collectionName}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"collectionName"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEnableUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersEnableUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersEnableUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/enable`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetCurrentUser: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetCurrentUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of fields that are editable for the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetEditableFields: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetEditableFields', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/user/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of fields that are editable for a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetEditableFieldsForUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersGetEditableFieldsForUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetEditableFieldsForUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/user/fields/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the details of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUser: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersGetUser', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUser', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Get the groups a user is a subadmin of
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUserSubAdminGroups: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersGetUserSubAdminGroups', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUserSubAdminGroups', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/subadmins`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsers: async (oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUsers', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users and their details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsersDetails: async (oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUsersDetails', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of groups the user belongs to
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsersGroups: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersGetUsersGroups', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersGetUsersGroups', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/groups`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a user from a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersRemoveFromGroup: async (groupid: string, userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveFromGroup', 'groupid', groupid)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveFromGroup', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveFromGroup', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/groups`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires admin access
         * @summary Remove a user from the subadmins of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersRemoveSubAdmin: async (groupid: string, userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupid' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveSubAdmin', 'groupid', groupid)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveSubAdmin', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersRemoveSubAdmin', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/subadmins`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (groupid !== undefined) {
                localVarQueryParameter['groupid'] = groupid;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resend the welcome message
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersResendWelcomeMessage: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersResendWelcomeMessage', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersResendWelcomeMessage', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/welcome`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search users by their phone numbers
         * @param {string} location Location of the phone number (for country code)
         * @param {string} search Phone numbers to search for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersSearchByPhoneNumbers: async (location: string, search: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'location' is not null or undefined
            assertParamExists('provisioningApiUsersSearchByPhoneNumbers', 'location', location)
            // verify required parameter 'search' is not null or undefined
            assertParamExists('provisioningApiUsersSearchByPhoneNumbers', 'search', search)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersSearchByPhoneNumbers', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/search/by-phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Wipe all devices of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersWipeUserDevices: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('provisioningApiUsersWipeUserDevices', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('provisioningApiUsersWipeUserDevices', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/cloud/users/{userId}/wipe`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisioningApiUsersApi - functional programming interface
 * @export
 */
export const ProvisioningApiUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisioningApiUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Make a user a subadmin of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersAddSubAdmin(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersAddSubAdmin(groupid, userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a user to a group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [groupid] ID of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersAddToGroup(userId: string, oCSAPIRequest: string, groupid?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersAddToGroup(userId, oCSAPIRequest, groupid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new user
         * @param {string} userid ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [password] Password of the user
         * @param {string} [displayName] Display name of the user
         * @param {string} [email] Email of the user
         * @param {string} [groups] Groups of the user
         * @param {string} [subadmin] Groups where the user is subadmin
         * @param {string} [quota] Quota of the user
         * @param {string} [language] Language of the user
         * @param {string} [manager] Manager of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersAddUser(userid: string, oCSAPIRequest: string, password?: string, displayName?: string, email?: string, groups?: string, subadmin?: string, quota?: string, language?: string, manager?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiUsersAddUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersAddUser(userid, oCSAPIRequest, password, displayName, email, groups, subadmin, quota, language, manager, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersDeleteUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersDeleteUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Disable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersDisableUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersDisableUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a value of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersEditUser(key: string, value: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersEditUser(key, value, userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update multiple values of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} collectionName Collection to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersEditUserMultiValue(key: string, value: string, userId: string, collectionName: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersEditUserMultiValue(key, value, userId, collectionName, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Enable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersEnableUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersEnableUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the details of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetCurrentUser(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiUsersGetUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetCurrentUser(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of fields that are editable for the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetEditableFields(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetEditableFields(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of fields that are editable for a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetEditableFieldsForUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetEditableFieldsForUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the details of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiUsersGetUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUser(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Get the groups a user is a subadmin of
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUserSubAdminGroups(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUserSubAdminGroups(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUsers(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUsers(oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users and their details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUsersDetails(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroupUsersDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUsersDetails(oCSAPIRequest, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of groups the user belongs to
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersGetUsersGroups(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetGroups200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersGetUsersGroups(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a user from a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersRemoveFromGroup(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersRemoveFromGroup(groupid, userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires admin access
         * @summary Remove a user from the subadmins of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersRemoveSubAdmin(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersRemoveSubAdmin(groupid, userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resend the welcome message
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersResendWelcomeMessage(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersResendWelcomeMessage(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search users by their phone numbers
         * @param {string} location Location of the phone number (for country code)
         * @param {string} search Phone numbers to search for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersSearchByPhoneNumbers(location: string, search: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiUsersSearchByPhoneNumbers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersSearchByPhoneNumbers(location, search, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Wipe all devices of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provisioningApiUsersWipeUserDevices(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provisioningApiUsersWipeUserDevices(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisioningApiUsersApi - factory interface
 * @export
 */
export const ProvisioningApiUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisioningApiUsersApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary Make a user a subadmin of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddSubAdmin(groupid: string, userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersAddSubAdmin(groupid, userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a user to a group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [groupid] ID of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddToGroup(userId: string, oCSAPIRequest: string, groupid?: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersAddToGroup(userId, oCSAPIRequest, groupid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new user
         * @param {string} userid ID of the user
         * @param {string} oCSAPIRequest 
         * @param {string} [password] Password of the user
         * @param {string} [displayName] Display name of the user
         * @param {string} [email] Email of the user
         * @param {string} [groups] Groups of the user
         * @param {string} [subadmin] Groups where the user is subadmin
         * @param {string} [quota] Quota of the user
         * @param {string} [language] Language of the user
         * @param {string} [manager] Manager of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersAddUser(userid: string, oCSAPIRequest: string, password?: string, displayName?: string, email?: string, groups?: string, subadmin?: string, quota?: string, language?: string, manager?: string, options?: any): AxiosPromise<ProvisioningApiUsersAddUser200Response> {
            return localVarFp.provisioningApiUsersAddUser(userid, oCSAPIRequest, password, displayName, email, groups, subadmin, quota, language, manager, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersDeleteUser(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersDeleteUser(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersDisableUser(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersDisableUser(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a value of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEditUser(key: string, value: string, userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersEditUser(key, value, userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update multiple values of the user\'s details
         * @param {string} key Key that will be updated
         * @param {string} value New value for the key
         * @param {string} userId ID of the user
         * @param {string} collectionName Collection to update
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEditUserMultiValue(key: string, value: string, userId: string, collectionName: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersEditUserMultiValue(key, value, userId, collectionName, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersEnableUser(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersEnableUser(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetCurrentUser(oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiUsersGetUser200Response> {
            return localVarFp.provisioningApiUsersGetCurrentUser(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of fields that are editable for the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetEditableFields(oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.provisioningApiUsersGetEditableFields(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of fields that are editable for a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetEditableFieldsForUser(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.provisioningApiUsersGetEditableFieldsForUser(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the details of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUser(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiUsersGetUser200Response> {
            return localVarFp.provisioningApiUsersGetUser(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Get the groups a user is a subadmin of
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUserSubAdminGroups(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.provisioningApiUsersGetUserSubAdminGroups(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsers(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProvisioningApiGroupsGetGroupUsers200Response> {
            return localVarFp.provisioningApiUsersGetUsers(oCSAPIRequest, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users and their details
         * @param {string} oCSAPIRequest 
         * @param {string} [search] Text to search for
         * @param {number} [limit] Limit the amount of groups returned
         * @param {number} [offset] Offset for searching for groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsersDetails(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProvisioningApiGroupsGetGroupUsersDetails200Response> {
            return localVarFp.provisioningApiUsersGetUsersDetails(oCSAPIRequest, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of groups the user belongs to
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersGetUsersGroups(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiGroupsGetGroups200Response> {
            return localVarFp.provisioningApiUsersGetUsersGroups(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a user from a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersRemoveFromGroup(groupid: string, userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersRemoveFromGroup(groupid, userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires admin access
         * @summary Remove a user from the subadmins of a group
         * @param {string} groupid ID of the group
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersRemoveSubAdmin(groupid: string, userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersRemoveSubAdmin(groupid, userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resend the welcome message
         * @param {string} userId ID if the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersResendWelcomeMessage(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersResendWelcomeMessage(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search users by their phone numbers
         * @param {string} location Location of the phone number (for country code)
         * @param {string} search Phone numbers to search for
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersSearchByPhoneNumbers(location: string, search: string, oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiUsersSearchByPhoneNumbers200Response> {
            return localVarFp.provisioningApiUsersSearchByPhoneNumbers(location, search, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Wipe all devices of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisioningApiUsersWipeUserDevices(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.provisioningApiUsersWipeUserDevices(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvisioningApiUsersApi - object-oriented interface
 * @export
 * @class ProvisioningApiUsersApi
 * @extends {BaseAPI}
 */
export class ProvisioningApiUsersApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary Make a user a subadmin of a group
     * @param {string} groupid ID of the group
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersAddSubAdmin(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersAddSubAdmin(groupid, userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a user to a group
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {string} [groupid] ID of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersAddToGroup(userId: string, oCSAPIRequest: string, groupid?: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersAddToGroup(userId, oCSAPIRequest, groupid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new user
     * @param {string} userid ID of the user
     * @param {string} oCSAPIRequest 
     * @param {string} [password] Password of the user
     * @param {string} [displayName] Display name of the user
     * @param {string} [email] Email of the user
     * @param {string} [groups] Groups of the user
     * @param {string} [subadmin] Groups where the user is subadmin
     * @param {string} [quota] Quota of the user
     * @param {string} [language] Language of the user
     * @param {string} [manager] Manager of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersAddUser(userid: string, oCSAPIRequest: string, password?: string, displayName?: string, email?: string, groups?: string, subadmin?: string, quota?: string, language?: string, manager?: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersAddUser(userid, oCSAPIRequest, password, displayName, email, groups, subadmin, quota, language, manager, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersDeleteUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersDeleteUser(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable a user
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersDisableUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersDisableUser(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a value of the user\'s details
     * @param {string} key Key that will be updated
     * @param {string} value New value for the key
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersEditUser(key: string, value: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersEditUser(key, value, userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update multiple values of the user\'s details
     * @param {string} key Key that will be updated
     * @param {string} value New value for the key
     * @param {string} userId ID of the user
     * @param {string} collectionName Collection to update
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersEditUserMultiValue(key: string, value: string, userId: string, collectionName: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersEditUserMultiValue(key, value, userId, collectionName, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable a user
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersEnableUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersEnableUser(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details of the current user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetCurrentUser(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetCurrentUser(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of fields that are editable for the current user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetEditableFields(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetEditableFields(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of fields that are editable for a user
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetEditableFieldsForUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetEditableFieldsForUser(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the details of a user
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUser(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUser(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Get the groups a user is a subadmin of
     * @param {string} userId ID if the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUserSubAdminGroups(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUserSubAdminGroups(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users
     * @param {string} oCSAPIRequest 
     * @param {string} [search] Text to search for
     * @param {number} [limit] Limit the amount of groups returned
     * @param {number} [offset] Offset for searching for groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUsers(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUsers(oCSAPIRequest, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users and their details
     * @param {string} oCSAPIRequest 
     * @param {string} [search] Text to search for
     * @param {number} [limit] Limit the amount of groups returned
     * @param {number} [offset] Offset for searching for groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUsersDetails(oCSAPIRequest: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUsersDetails(oCSAPIRequest, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of groups the user belongs to
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersGetUsersGroups(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersGetUsersGroups(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a user from a group
     * @param {string} groupid ID of the group
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersRemoveFromGroup(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersRemoveFromGroup(groupid, userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires admin access
     * @summary Remove a user from the subadmins of a group
     * @param {string} groupid ID of the group
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersRemoveSubAdmin(groupid: string, userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersRemoveSubAdmin(groupid, userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resend the welcome message
     * @param {string} userId ID if the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersResendWelcomeMessage(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersResendWelcomeMessage(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search users by their phone numbers
     * @param {string} location Location of the phone number (for country code)
     * @param {string} search Phone numbers to search for
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersSearchByPhoneNumbers(location: string, search: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersSearchByPhoneNumbers(location, search, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Wipe all devices of a user
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisioningApiUsersApi
     */
    public provisioningApiUsersWipeUserDevices(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ProvisioningApiUsersApiFp(this.configuration).provisioningApiUsersWipeUserDevices(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SettingsLogSettingsApi - axios parameter creator
 * @export
 */
export const SettingsLogSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint requires admin access
         * @summary download logfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLogSettingsDownload: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index.php/settings/admin/log/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsLogSettingsApi - functional programming interface
 * @export
 */
export const SettingsLogSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsLogSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary download logfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsLogSettingsDownload(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsLogSettingsDownload(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsLogSettingsApi - factory interface
 * @export
 */
export const SettingsLogSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsLogSettingsApiFp(configuration)
    return {
        /**
         * This endpoint requires admin access
         * @summary download logfile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLogSettingsDownload(options?: any): AxiosPromise<File> {
            return localVarFp.settingsLogSettingsDownload(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsLogSettingsApi - object-oriented interface
 * @export
 * @class SettingsLogSettingsApi
 * @extends {BaseAPI}
 */
export class SettingsLogSettingsApi extends BaseAPI {
    /**
     * This endpoint requires admin access
     * @summary download logfile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsLogSettingsApi
     */
    public settingsLogSettingsDownload(options?: AxiosRequestConfig) {
        return SettingsLogSettingsApiFp(this.configuration).settingsLogSettingsDownload(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ThemingIconApi - axios parameter creator
 * @export
 */
export const ThemingIconApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return a 32x32 favicon as png
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetFavicon: async (app: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('themingIconGetFavicon', 'app', app)
            const localVarPath = `/index.php/apps/theming/favicon/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a themed icon
         * @param {string} app ID of the app
         * @param {string} image image file name (svg required)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetThemedIcon: async (app: string, image: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('themingIconGetThemedIcon', 'app', app)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('themingIconGetThemedIcon', 'image', image)
            const localVarPath = `/index.php/apps/theming/img/{app}/{image}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)))
                .replace(`{${"image"}}`, encodeURIComponent(String(image)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return a 512x512 icon for touch devices
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetTouchIcon: async (app: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('themingIconGetTouchIcon', 'app', app)
            const localVarPath = `/index.php/apps/theming/icon/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThemingIconApi - functional programming interface
 * @export
 */
export const ThemingIconApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThemingIconApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return a 32x32 favicon as png
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingIconGetFavicon(app: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingIconGetFavicon(app, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a themed icon
         * @param {string} app ID of the app
         * @param {string} image image file name (svg required)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingIconGetThemedIcon(app: string, image: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingIconGetThemedIcon(app, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return a 512x512 icon for touch devices
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingIconGetTouchIcon(app: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingIconGetTouchIcon(app, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThemingIconApi - factory interface
 * @export
 */
export const ThemingIconApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThemingIconApiFp(configuration)
    return {
        /**
         * 
         * @summary Return a 32x32 favicon as png
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetFavicon(app: string, options?: any): AxiosPromise<File> {
            return localVarFp.themingIconGetFavicon(app, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a themed icon
         * @param {string} app ID of the app
         * @param {string} image image file name (svg required)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetThemedIcon(app: string, image: string, options?: any): AxiosPromise<File> {
            return localVarFp.themingIconGetThemedIcon(app, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return a 512x512 icon for touch devices
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingIconGetTouchIcon(app: string, options?: any): AxiosPromise<File> {
            return localVarFp.themingIconGetTouchIcon(app, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThemingIconApi - object-oriented interface
 * @export
 * @class ThemingIconApi
 * @extends {BaseAPI}
 */
export class ThemingIconApi extends BaseAPI {
    /**
     * 
     * @summary Return a 32x32 favicon as png
     * @param {string} app ID of the app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingIconApi
     */
    public themingIconGetFavicon(app: string, options?: AxiosRequestConfig) {
        return ThemingIconApiFp(this.configuration).themingIconGetFavicon(app, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a themed icon
     * @param {string} app ID of the app
     * @param {string} image image file name (svg required)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingIconApi
     */
    public themingIconGetThemedIcon(app: string, image: string, options?: AxiosRequestConfig) {
        return ThemingIconApiFp(this.configuration).themingIconGetThemedIcon(app, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return a 512x512 icon for touch devices
     * @param {string} app ID of the app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingIconApi
     */
    public themingIconGetTouchIcon(app: string, options?: AxiosRequestConfig) {
        return ThemingIconApiFp(this.configuration).themingIconGetTouchIcon(app, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ThemingThemingApi - axios parameter creator
 * @export
 */
export const ThemingThemingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an image
         * @param {string} key Key of the image
         * @param {number} [useSvg] Return image as SVG
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetImage: async (key: string, useSvg?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('themingThemingGetImage', 'key', key)
            const localVarPath = `/index.php/apps/theming/image/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (useSvg !== undefined) {
                localVarQueryParameter['useSvg'] = useSvg;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the manifest for an app
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetManifest: async (app: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('themingThemingGetManifest', 'app', app)
            const localVarPath = `/index.php/apps/theming/manifest/{app}`
                .replace(`{${"app"}}`, encodeURIComponent(String(app)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the CSS stylesheet for a theme
         * @param {string} themeId ID of the theme
         * @param {number} [plain] Let the browser decide the CSS priority
         * @param {number} [withCustomCss] Include custom CSS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetThemeStylesheet: async (themeId: string, plain?: number, withCustomCss?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'themeId' is not null or undefined
            assertParamExists('themingThemingGetThemeStylesheet', 'themeId', themeId)
            const localVarPath = `/index.php/apps/theming/theme/{themeId}.css`
                .replace(`{${"themeId"}}`, encodeURIComponent(String(themeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (plain !== undefined) {
                localVarQueryParameter['plain'] = plain;
            }

            if (withCustomCss !== undefined) {
                localVarQueryParameter['withCustomCss'] = withCustomCss;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThemingThemingApi - functional programming interface
 * @export
 */
export const ThemingThemingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThemingThemingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get an image
         * @param {string} key Key of the image
         * @param {number} [useSvg] Return image as SVG
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingThemingGetImage(key: string, useSvg?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingThemingGetImage(key, useSvg, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the manifest for an app
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingThemingGetManifest(app: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThemingThemingGetManifest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingThemingGetManifest(app, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the CSS stylesheet for a theme
         * @param {string} themeId ID of the theme
         * @param {number} [plain] Let the browser decide the CSS priority
         * @param {number} [withCustomCss] Include custom CSS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingThemingGetThemeStylesheet(themeId: string, plain?: number, withCustomCss?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingThemingGetThemeStylesheet(themeId, plain, withCustomCss, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThemingThemingApi - factory interface
 * @export
 */
export const ThemingThemingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThemingThemingApiFp(configuration)
    return {
        /**
         * 
         * @summary Get an image
         * @param {string} key Key of the image
         * @param {number} [useSvg] Return image as SVG
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetImage(key: string, useSvg?: number, options?: any): AxiosPromise<File> {
            return localVarFp.themingThemingGetImage(key, useSvg, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the manifest for an app
         * @param {string} app ID of the app
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetManifest(app: string, options?: any): AxiosPromise<ThemingThemingGetManifest200Response> {
            return localVarFp.themingThemingGetManifest(app, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the CSS stylesheet for a theme
         * @param {string} themeId ID of the theme
         * @param {number} [plain] Let the browser decide the CSS priority
         * @param {number} [withCustomCss] Include custom CSS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingThemingGetThemeStylesheet(themeId: string, plain?: number, withCustomCss?: number, options?: any): AxiosPromise<File> {
            return localVarFp.themingThemingGetThemeStylesheet(themeId, plain, withCustomCss, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThemingThemingApi - object-oriented interface
 * @export
 * @class ThemingThemingApi
 * @extends {BaseAPI}
 */
export class ThemingThemingApi extends BaseAPI {
    /**
     * 
     * @summary Get an image
     * @param {string} key Key of the image
     * @param {number} [useSvg] Return image as SVG
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingThemingApi
     */
    public themingThemingGetImage(key: string, useSvg?: number, options?: AxiosRequestConfig) {
        return ThemingThemingApiFp(this.configuration).themingThemingGetImage(key, useSvg, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the manifest for an app
     * @param {string} app ID of the app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingThemingApi
     */
    public themingThemingGetManifest(app: string, options?: AxiosRequestConfig) {
        return ThemingThemingApiFp(this.configuration).themingThemingGetManifest(app, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the CSS stylesheet for a theme
     * @param {string} themeId ID of the theme
     * @param {number} [plain] Let the browser decide the CSS priority
     * @param {number} [withCustomCss] Include custom CSS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingThemingApi
     */
    public themingThemingGetThemeStylesheet(themeId: string, plain?: number, withCustomCss?: number, options?: AxiosRequestConfig) {
        return ThemingThemingApiFp(this.configuration).themingThemingGetThemeStylesheet(themeId, plain, withCustomCss, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ThemingUserThemeApi - axios parameter creator
 * @export
 */
export const ThemingUserThemeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the background
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeDeleteBackground: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeDeleteBackground', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/index.php/apps/theming/background/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeDisableTheme: async (themeId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'themeId' is not null or undefined
            assertParamExists('themingUserThemeDisableTheme', 'themeId', themeId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeDisableTheme', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/theming/api/v1/theme/{themeId}`
                .replace(`{${"themeId"}}`, encodeURIComponent(String(themeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeEnableTheme: async (themeId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'themeId' is not null or undefined
            assertParamExists('themingUserThemeEnableTheme', 'themeId', themeId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeEnableTheme', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/theming/api/v1/theme/{themeId}/enable`
                .replace(`{${"themeId"}}`, encodeURIComponent(String(themeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the background image
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeGetBackground: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeGetBackground', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/index.php/apps/theming/background`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the background
         * @param {string} type Type of background
         * @param {string} oCSAPIRequest 
         * @param {string} [value] Path of the background image
         * @param {string} [color] Color for the background
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeSetBackground: async (type: string, oCSAPIRequest: string, value?: string, color?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('themingUserThemeSetBackground', 'type', type)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('themingUserThemeSetBackground', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/index.php/apps/theming/background/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThemingUserThemeApi - functional programming interface
 * @export
 */
export const ThemingUserThemeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThemingUserThemeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete the background
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeDeleteBackground(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThemingBackground>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeDeleteBackground(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Disable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeDisableTheme(themeId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeDisableTheme(themeId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Enable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeEnableTheme(themeId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeEnableTheme(themeId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the background image
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeGetBackground(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeGetBackground(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set the background
         * @param {string} type Type of background
         * @param {string} oCSAPIRequest 
         * @param {string} [value] Path of the background image
         * @param {string} [color] Color for the background
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async themingUserThemeSetBackground(type: string, oCSAPIRequest: string, value?: string, color?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThemingBackground>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.themingUserThemeSetBackground(type, oCSAPIRequest, value, color, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThemingUserThemeApi - factory interface
 * @export
 */
export const ThemingUserThemeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThemingUserThemeApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete the background
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeDeleteBackground(oCSAPIRequest: string, options?: any): AxiosPromise<ThemingBackground> {
            return localVarFp.themingUserThemeDeleteBackground(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeDisableTheme(themeId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.themingUserThemeDisableTheme(themeId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable theme
         * @param {string} themeId the theme ID
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeEnableTheme(themeId: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.themingUserThemeEnableTheme(themeId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the background image
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeGetBackground(oCSAPIRequest: string, options?: any): AxiosPromise<File> {
            return localVarFp.themingUserThemeGetBackground(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the background
         * @param {string} type Type of background
         * @param {string} oCSAPIRequest 
         * @param {string} [value] Path of the background image
         * @param {string} [color] Color for the background
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        themingUserThemeSetBackground(type: string, oCSAPIRequest: string, value?: string, color?: string, options?: any): AxiosPromise<ThemingBackground> {
            return localVarFp.themingUserThemeSetBackground(type, oCSAPIRequest, value, color, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThemingUserThemeApi - object-oriented interface
 * @export
 * @class ThemingUserThemeApi
 * @extends {BaseAPI}
 */
export class ThemingUserThemeApi extends BaseAPI {
    /**
     * 
     * @summary Delete the background
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeDeleteBackground(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeDeleteBackground(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable theme
     * @param {string} themeId the theme ID
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeDisableTheme(themeId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeDisableTheme(themeId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable theme
     * @param {string} themeId the theme ID
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeEnableTheme(themeId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeEnableTheme(themeId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the background image
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeGetBackground(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeGetBackground(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set the background
     * @param {string} type Type of background
     * @param {string} oCSAPIRequest 
     * @param {string} [value] Path of the background image
     * @param {string} [color] Color for the background
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThemingUserThemeApi
     */
    public themingUserThemeSetBackground(type: string, oCSAPIRequest: string, value?: string, color?: string, options?: AxiosRequestConfig) {
        return ThemingUserThemeApiFp(this.configuration).themingUserThemeSetBackground(type, oCSAPIRequest, value, color, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserStatusHeartbeatApi - axios parameter creator
 * @export
 */
export const UserStatusHeartbeatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Keep the current status alive
         * @param {string} status Only online, away
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusHeartbeatHeartbeat: async (status: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('userStatusHeartbeatHeartbeat', 'status', status)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusHeartbeatHeartbeat', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/heartbeat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusHeartbeatApi - functional programming interface
 * @export
 */
export const UserStatusHeartbeatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusHeartbeatApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Keep the current status alive
         * @param {string} status Only online, away
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusHeartbeatHeartbeat(status: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusHeartbeatHeartbeat(status, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStatusHeartbeatApi - factory interface
 * @export
 */
export const UserStatusHeartbeatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusHeartbeatApiFp(configuration)
    return {
        /**
         * 
         * @summary Keep the current status alive
         * @param {string} status Only online, away
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusHeartbeatHeartbeat(status: string, oCSAPIRequest: string, options?: any): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusHeartbeatHeartbeat(status, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserStatusHeartbeatApi - object-oriented interface
 * @export
 * @class UserStatusHeartbeatApi
 * @extends {BaseAPI}
 */
export class UserStatusHeartbeatApi extends BaseAPI {
    /**
     * 
     * @summary Keep the current status alive
     * @param {string} status Only online, away
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusHeartbeatApi
     */
    public userStatusHeartbeatHeartbeat(status: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return UserStatusHeartbeatApiFp(this.configuration).userStatusHeartbeatHeartbeat(status, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserStatusPredefinedStatusApi - axios parameter creator
 * @export
 */
export const UserStatusPredefinedStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all predefined messages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusPredefinedStatusFindAll: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusPredefinedStatusFindAll', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/predefined_statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusPredefinedStatusApi - functional programming interface
 * @export
 */
export const UserStatusPredefinedStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusPredefinedStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all predefined messages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusPredefinedStatusFindAll(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusPredefinedStatusFindAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusPredefinedStatusFindAll(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStatusPredefinedStatusApi - factory interface
 * @export
 */
export const UserStatusPredefinedStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusPredefinedStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all predefined messages
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusPredefinedStatusFindAll(oCSAPIRequest: string, options?: any): AxiosPromise<UserStatusPredefinedStatusFindAll200Response> {
            return localVarFp.userStatusPredefinedStatusFindAll(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserStatusPredefinedStatusApi - object-oriented interface
 * @export
 * @class UserStatusPredefinedStatusApi
 * @extends {BaseAPI}
 */
export class UserStatusPredefinedStatusApi extends BaseAPI {
    /**
     * 
     * @summary Get all predefined messages
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusPredefinedStatusApi
     */
    public userStatusPredefinedStatusFindAll(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return UserStatusPredefinedStatusApiFp(this.configuration).userStatusPredefinedStatusFindAll(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserStatusStatusesApi - axios parameter creator
 * @export
 */
export const UserStatusStatusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find the status of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusStatusesFind: async (userId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userStatusStatusesFind', 'userId', userId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusStatusesFind', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/statuses/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find statuses of users
         * @param {string} oCSAPIRequest 
         * @param {number} [limit] Maximum number of statuses to find
         * @param {number} [offset] Offset for finding statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusStatusesFindAll: async (oCSAPIRequest: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusStatusesFindAll', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusStatusesApi - functional programming interface
 * @export
 */
export const UserStatusStatusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusStatusesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find the status of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusStatusesFind(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusStatusesFind200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusStatusesFind(userId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find statuses of users
         * @param {string} oCSAPIRequest 
         * @param {number} [limit] Maximum number of statuses to find
         * @param {number} [offset] Offset for finding statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusStatusesFindAll(oCSAPIRequest: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusStatusesFindAll200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusStatusesFindAll(oCSAPIRequest, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStatusStatusesApi - factory interface
 * @export
 */
export const UserStatusStatusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusStatusesApiFp(configuration)
    return {
        /**
         * 
         * @summary Find the status of a user
         * @param {string} userId ID of the user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusStatusesFind(userId: string, oCSAPIRequest: string, options?: any): AxiosPromise<UserStatusStatusesFind200Response> {
            return localVarFp.userStatusStatusesFind(userId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find statuses of users
         * @param {string} oCSAPIRequest 
         * @param {number} [limit] Maximum number of statuses to find
         * @param {number} [offset] Offset for finding statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusStatusesFindAll(oCSAPIRequest: string, limit?: number, offset?: number, options?: any): AxiosPromise<UserStatusStatusesFindAll200Response> {
            return localVarFp.userStatusStatusesFindAll(oCSAPIRequest, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserStatusStatusesApi - object-oriented interface
 * @export
 * @class UserStatusStatusesApi
 * @extends {BaseAPI}
 */
export class UserStatusStatusesApi extends BaseAPI {
    /**
     * 
     * @summary Find the status of a user
     * @param {string} userId ID of the user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusStatusesApi
     */
    public userStatusStatusesFind(userId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return UserStatusStatusesApiFp(this.configuration).userStatusStatusesFind(userId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find statuses of users
     * @param {string} oCSAPIRequest 
     * @param {number} [limit] Maximum number of statuses to find
     * @param {number} [offset] Offset for finding statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusStatusesApi
     */
    public userStatusStatusesFindAll(oCSAPIRequest: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return UserStatusStatusesApiFp(this.configuration).userStatusStatusesFindAll(oCSAPIRequest, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserStatusUserStatusApi - axios parameter creator
 * @export
 */
export const UserStatusUserStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clear the message of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusClearMessage: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusClearMessage', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the status of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusGetStatus: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusGetStatus', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revert the status to the previous status
         * @param {string} messageId ID of the message to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusRevertStatus: async (messageId: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('userStatusUserStatusRevertStatus', 'messageId', messageId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusRevertStatus', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/revert/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the message to a custom message for the current user
         * @param {string} oCSAPIRequest 
         * @param {string} [statusIcon] Icon of the status
         * @param {string} [message] Message of the status
         * @param {number} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetCustomMessage: async (oCSAPIRequest: string, statusIcon?: string, message?: string, clearAt?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusSetCustomMessage', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/message/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statusIcon !== undefined) {
                localVarQueryParameter['statusIcon'] = statusIcon;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (clearAt !== undefined) {
                localVarQueryParameter['clearAt'] = clearAt;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the message to a predefined message for the current user
         * @param {string} messageId ID of the predefined message
         * @param {string} oCSAPIRequest 
         * @param {number} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetPredefinedMessage: async (messageId: string, oCSAPIRequest: string, clearAt?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('userStatusUserStatusSetPredefinedMessage', 'messageId', messageId)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusSetPredefinedMessage', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/message/predefined`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (messageId !== undefined) {
                localVarQueryParameter['messageId'] = messageId;
            }

            if (clearAt !== undefined) {
                localVarQueryParameter['clearAt'] = clearAt;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the status type of the current user
         * @param {string} statusType The new status type
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetStatus: async (statusType: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statusType' is not null or undefined
            assertParamExists('userStatusUserStatusSetStatus', 'statusType', statusType)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('userStatusUserStatusSetStatus', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/user_status/api/v1/user_status/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (statusType !== undefined) {
                localVarQueryParameter['statusType'] = statusType;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStatusUserStatusApi - functional programming interface
 * @export
 */
export const UserStatusUserStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStatusUserStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Clear the message of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusClearMessage(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreWhatsNewDismiss200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusClearMessage(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the status of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusGetStatus(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusGetStatus(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revert the status to the previous status
         * @param {string} messageId ID of the message to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusRevertStatus(messageId: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusRevertStatus(messageId, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set the message to a custom message for the current user
         * @param {string} oCSAPIRequest 
         * @param {string} [statusIcon] Icon of the status
         * @param {string} [message] Message of the status
         * @param {number} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusSetCustomMessage(oCSAPIRequest: string, statusIcon?: string, message?: string, clearAt?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusSetCustomMessage(oCSAPIRequest, statusIcon, message, clearAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set the message to a predefined message for the current user
         * @param {string} messageId ID of the predefined message
         * @param {string} oCSAPIRequest 
         * @param {number} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusSetPredefinedMessage(messageId: string, oCSAPIRequest: string, clearAt?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusSetPredefinedMessage(messageId, oCSAPIRequest, clearAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the status type of the current user
         * @param {string} statusType The new status type
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStatusUserStatusSetStatus(statusType: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatusUserStatusGetStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStatusUserStatusSetStatus(statusType, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStatusUserStatusApi - factory interface
 * @export
 */
export const UserStatusUserStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStatusUserStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Clear the message of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusClearMessage(oCSAPIRequest: string, options?: any): AxiosPromise<CoreWhatsNewDismiss200Response> {
            return localVarFp.userStatusUserStatusClearMessage(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the status of the current user
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusGetStatus(oCSAPIRequest: string, options?: any): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusGetStatus(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revert the status to the previous status
         * @param {string} messageId ID of the message to delete
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusRevertStatus(messageId: string, oCSAPIRequest: string, options?: any): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusRevertStatus(messageId, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the message to a custom message for the current user
         * @param {string} oCSAPIRequest 
         * @param {string} [statusIcon] Icon of the status
         * @param {string} [message] Message of the status
         * @param {number} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetCustomMessage(oCSAPIRequest: string, statusIcon?: string, message?: string, clearAt?: number, options?: any): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusSetCustomMessage(oCSAPIRequest, statusIcon, message, clearAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the message to a predefined message for the current user
         * @param {string} messageId ID of the predefined message
         * @param {string} oCSAPIRequest 
         * @param {number} [clearAt] When the message should be cleared
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetPredefinedMessage(messageId: string, oCSAPIRequest: string, clearAt?: number, options?: any): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusSetPredefinedMessage(messageId, oCSAPIRequest, clearAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the status type of the current user
         * @param {string} statusType The new status type
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStatusUserStatusSetStatus(statusType: string, oCSAPIRequest: string, options?: any): AxiosPromise<UserStatusUserStatusGetStatus200Response> {
            return localVarFp.userStatusUserStatusSetStatus(statusType, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserStatusUserStatusApi - object-oriented interface
 * @export
 * @class UserStatusUserStatusApi
 * @extends {BaseAPI}
 */
export class UserStatusUserStatusApi extends BaseAPI {
    /**
     * 
     * @summary Clear the message of the current user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusClearMessage(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusClearMessage(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the status of the current user
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusGetStatus(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusGetStatus(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revert the status to the previous status
     * @param {string} messageId ID of the message to delete
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusRevertStatus(messageId: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusRevertStatus(messageId, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set the message to a custom message for the current user
     * @param {string} oCSAPIRequest 
     * @param {string} [statusIcon] Icon of the status
     * @param {string} [message] Message of the status
     * @param {number} [clearAt] When the message should be cleared
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusSetCustomMessage(oCSAPIRequest: string, statusIcon?: string, message?: string, clearAt?: number, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusSetCustomMessage(oCSAPIRequest, statusIcon, message, clearAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set the message to a predefined message for the current user
     * @param {string} messageId ID of the predefined message
     * @param {string} oCSAPIRequest 
     * @param {number} [clearAt] When the message should be cleared
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusSetPredefinedMessage(messageId: string, oCSAPIRequest: string, clearAt?: number, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusSetPredefinedMessage(messageId, oCSAPIRequest, clearAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the status type of the current user
     * @param {string} statusType The new status type
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStatusUserStatusApi
     */
    public userStatusUserStatusSetStatus(statusType: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return UserStatusUserStatusApiFp(this.configuration).userStatusUserStatusSetStatus(statusType, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WeatherStatusWeatherStatusApi - axios parameter creator
 * @export
 */
export const WeatherStatusWeatherStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get favorites list
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetFavorites: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusGetFavorites', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get forecast for current location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetForecast: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusGetForecast', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/forecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get stored user location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetLocation: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusGetLocation', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set favorites list
         * @param {string} favorites Favorite addresses
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetFavorites: async (favorites: string, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'favorites' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetFavorites', 'favorites', favorites)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetFavorites', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (favorites !== undefined) {
                localVarQueryParameter['favorites'] = favorites;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding
         * @param {string} oCSAPIRequest 
         * @param {string} [address] Any approximative or exact address
         * @param {number} [lat] Latitude in decimal degree format
         * @param {number} [lon] Longitude in decimal degree format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetLocation: async (oCSAPIRequest: string, address?: string, lat?: number, lon?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetLocation', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address
         * @param {number} mode New mode
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetMode: async (mode: number, oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mode' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetMode', 'mode', mode)
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusSetMode', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/mode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Try to use the address set in user personal settings as weather location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusUsePersonalAddress: async (oCSAPIRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oCSAPIRequest' is not null or undefined
            assertParamExists('weatherStatusWeatherStatusUsePersonalAddress', 'oCSAPIRequest', oCSAPIRequest)
            const localVarPath = `/ocs/v2.php/apps/weather_status/api/v1/use-personal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic_auth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oCSAPIRequest != null) {
                localVarHeaderParameter['OCS-APIRequest'] = String(oCSAPIRequest);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherStatusWeatherStatusApi - functional programming interface
 * @export
 */
export const WeatherStatusWeatherStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeatherStatusWeatherStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get favorites list
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusGetFavorites(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusGetFavorites(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get forecast for current location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusGetForecast(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherStatusWeatherStatusGetForecast200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusGetForecast(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get stored user location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusGetLocation(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherStatusWeatherStatusGetLocation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusGetLocation(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set favorites list
         * @param {string} favorites Favorite addresses
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusSetFavorites(favorites: string, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiTouchProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusSetFavorites(favorites, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding
         * @param {string} oCSAPIRequest 
         * @param {string} [address] Any approximative or exact address
         * @param {number} [lat] Latitude in decimal degree format
         * @param {number} [lon] Longitude in decimal degree format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusSetLocation(oCSAPIRequest: string, address?: string, lat?: number, lon?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherStatusWeatherStatusUsePersonalAddress200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusSetLocation(oCSAPIRequest, address, lat, lon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address
         * @param {number} mode New mode
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusSetMode(mode: number, oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoreReferenceApiTouchProvider200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusSetMode(mode, oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Try to use the address set in user personal settings as weather location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherStatusWeatherStatusUsePersonalAddress(oCSAPIRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeatherStatusWeatherStatusUsePersonalAddress200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weatherStatusWeatherStatusUsePersonalAddress(oCSAPIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WeatherStatusWeatherStatusApi - factory interface
 * @export
 */
export const WeatherStatusWeatherStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeatherStatusWeatherStatusApiFp(configuration)
    return {
        /**
         * 
         * @summary Get favorites list
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetFavorites(oCSAPIRequest: string, options?: any): AxiosPromise<ProvisioningApiGroupsGetSubAdminsOfGroup200Response> {
            return localVarFp.weatherStatusWeatherStatusGetFavorites(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get forecast for current location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetForecast(oCSAPIRequest: string, options?: any): AxiosPromise<WeatherStatusWeatherStatusGetForecast200Response> {
            return localVarFp.weatherStatusWeatherStatusGetForecast(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get stored user location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusGetLocation(oCSAPIRequest: string, options?: any): AxiosPromise<WeatherStatusWeatherStatusGetLocation200Response> {
            return localVarFp.weatherStatusWeatherStatusGetLocation(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set favorites list
         * @param {string} favorites Favorite addresses
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetFavorites(favorites: string, oCSAPIRequest: string, options?: any): AxiosPromise<CoreReferenceApiTouchProvider200Response> {
            return localVarFp.weatherStatusWeatherStatusSetFavorites(favorites, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding
         * @param {string} oCSAPIRequest 
         * @param {string} [address] Any approximative or exact address
         * @param {number} [lat] Latitude in decimal degree format
         * @param {number} [lon] Longitude in decimal degree format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetLocation(oCSAPIRequest: string, address?: string, lat?: number, lon?: number, options?: any): AxiosPromise<WeatherStatusWeatherStatusUsePersonalAddress200Response> {
            return localVarFp.weatherStatusWeatherStatusSetLocation(oCSAPIRequest, address, lat, lon, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address
         * @param {number} mode New mode
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusSetMode(mode: number, oCSAPIRequest: string, options?: any): AxiosPromise<CoreReferenceApiTouchProvider200Response> {
            return localVarFp.weatherStatusWeatherStatusSetMode(mode, oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Try to use the address set in user personal settings as weather location
         * @param {string} oCSAPIRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherStatusWeatherStatusUsePersonalAddress(oCSAPIRequest: string, options?: any): AxiosPromise<WeatherStatusWeatherStatusUsePersonalAddress200Response> {
            return localVarFp.weatherStatusWeatherStatusUsePersonalAddress(oCSAPIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherStatusWeatherStatusApi - object-oriented interface
 * @export
 * @class WeatherStatusWeatherStatusApi
 * @extends {BaseAPI}
 */
export class WeatherStatusWeatherStatusApi extends BaseAPI {
    /**
     * 
     * @summary Get favorites list
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusGetFavorites(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusGetFavorites(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get forecast for current location
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusGetForecast(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusGetForecast(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get stored user location
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusGetLocation(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusGetLocation(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set favorites list
     * @param {string} favorites Favorite addresses
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusSetFavorites(favorites: string, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusSetFavorites(favorites, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set address and resolve it to get coordinates or directly set coordinates and get address with reverse geocoding
     * @param {string} oCSAPIRequest 
     * @param {string} [address] Any approximative or exact address
     * @param {number} [lat] Latitude in decimal degree format
     * @param {number} [lon] Longitude in decimal degree format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusSetLocation(oCSAPIRequest: string, address?: string, lat?: number, lon?: number, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusSetLocation(oCSAPIRequest, address, lat, lon, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change the weather status mode. There are currently 2 modes: - ask the browser - use the user defined address
     * @param {number} mode New mode
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusSetMode(mode: number, oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusSetMode(mode, oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Try to use the address set in user personal settings as weather location
     * @param {string} oCSAPIRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherStatusWeatherStatusApi
     */
    public weatherStatusWeatherStatusUsePersonalAddress(oCSAPIRequest: string, options?: AxiosRequestConfig) {
        return WeatherStatusWeatherStatusApiFp(this.configuration).weatherStatusWeatherStatusUsePersonalAddress(oCSAPIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


