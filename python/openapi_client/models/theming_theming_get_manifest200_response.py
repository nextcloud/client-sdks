# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.theming_theming_get_manifest200_response_icons_inner import ThemingThemingGetManifest200ResponseIconsInner

class ThemingThemingGetManifest200Response(BaseModel):
    """
    ThemingThemingGetManifest200Response
    """
    name: StrictStr = Field(...)
    short_name: StrictStr = Field(...)
    start_url: StrictStr = Field(...)
    theme_color: StrictStr = Field(...)
    background_color: StrictStr = Field(...)
    description: StrictStr = Field(...)
    icons: conlist(ThemingThemingGetManifest200ResponseIconsInner) = Field(...)
    display: StrictStr = Field(...)
    __properties = ["name", "short_name", "start_url", "theme_color", "background_color", "description", "icons", "display"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ThemingThemingGetManifest200Response:
        """Create an instance of ThemingThemingGetManifest200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in icons (list)
        _items = []
        if self.icons:
            for _item in self.icons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['icons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ThemingThemingGetManifest200Response:
        """Create an instance of ThemingThemingGetManifest200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ThemingThemingGetManifest200Response.parse_obj(obj)

        _obj = ThemingThemingGetManifest200Response.parse_obj({
            "name": obj.get("name"),
            "short_name": obj.get("short_name"),
            "start_url": obj.get("start_url"),
            "theme_color": obj.get("theme_color"),
            "background_color": obj.get("background_color"),
            "description": obj.get("description"),
            "icons": [ThemingThemingGetManifest200ResponseIconsInner.from_dict(_item) for _item in obj.get("icons")] if obj.get("icons") is not None else None,
            "display": obj.get("display")
        })
        return _obj

