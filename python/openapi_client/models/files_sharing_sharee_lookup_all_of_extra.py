# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.files_sharing_lookup import FilesSharingLookup

class FilesSharingShareeLookupAllOfExtra(BaseModel):
    """
    FilesSharingShareeLookupAllOfExtra
    """
    federation_id: StrictStr = Field(..., alias="federationId")
    name: FilesSharingLookup = Field(...)
    email: FilesSharingLookup = Field(...)
    address: FilesSharingLookup = Field(...)
    website: FilesSharingLookup = Field(...)
    twitter: FilesSharingLookup = Field(...)
    phone: FilesSharingLookup = Field(...)
    twitter_signature: FilesSharingLookup = Field(...)
    website_signature: FilesSharingLookup = Field(...)
    userid: FilesSharingLookup = Field(...)
    __properties = ["federationId", "name", "email", "address", "website", "twitter", "phone", "twitter_signature", "website_signature", "userid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesSharingShareeLookupAllOfExtra:
        """Create an instance of FilesSharingShareeLookupAllOfExtra from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of website
        if self.website:
            _dict['website'] = self.website.to_dict()
        # override the default output from pydantic by calling `to_dict()` of twitter
        if self.twitter:
            _dict['twitter'] = self.twitter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone
        if self.phone:
            _dict['phone'] = self.phone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of twitter_signature
        if self.twitter_signature:
            _dict['twitter_signature'] = self.twitter_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of website_signature
        if self.website_signature:
            _dict['website_signature'] = self.website_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of userid
        if self.userid:
            _dict['userid'] = self.userid.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesSharingShareeLookupAllOfExtra:
        """Create an instance of FilesSharingShareeLookupAllOfExtra from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesSharingShareeLookupAllOfExtra.parse_obj(obj)

        _obj = FilesSharingShareeLookupAllOfExtra.parse_obj({
            "federation_id": obj.get("federationId"),
            "name": FilesSharingLookup.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "email": FilesSharingLookup.from_dict(obj.get("email")) if obj.get("email") is not None else None,
            "address": FilesSharingLookup.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "website": FilesSharingLookup.from_dict(obj.get("website")) if obj.get("website") is not None else None,
            "twitter": FilesSharingLookup.from_dict(obj.get("twitter")) if obj.get("twitter") is not None else None,
            "phone": FilesSharingLookup.from_dict(obj.get("phone")) if obj.get("phone") is not None else None,
            "twitter_signature": FilesSharingLookup.from_dict(obj.get("twitter_signature")) if obj.get("twitter_signature") is not None else None,
            "website_signature": FilesSharingLookup.from_dict(obj.get("website_signature")) if obj.get("website_signature") is not None else None,
            "userid": FilesSharingLookup.from_dict(obj.get("userid")) if obj.get("userid") is not None else None
        })
        return _obj

