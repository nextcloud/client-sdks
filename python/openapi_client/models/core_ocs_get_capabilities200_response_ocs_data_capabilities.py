# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from openapi_client.models.core_ocs_get_capabilities200_response_ocs_data_capabilities_dav import CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav
from openapi_client.models.core_ocs_get_capabilities200_response_ocs_data_capabilities_files_sharing import CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
from openapi_client.models.core_ocs_get_capabilities200_response_ocs_data_capabilities_files_sharing_user_expire_date import CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate
from openapi_client.models.core_ocs_get_capabilities200_response_ocs_data_capabilities_ocm import CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm
from openapi_client.models.core_ocs_get_capabilities200_response_ocs_data_capabilities_provisioning_api import CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi
from openapi_client.models.core_ocs_get_capabilities200_response_ocs_data_capabilities_theming import CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
from openapi_client.models.core_ocs_get_capabilities200_response_ocs_data_capabilities_user_status import CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus

class CoreOcsGetCapabilities200ResponseOcsDataCapabilities(BaseModel):
    """
    CoreOcsGetCapabilities200ResponseOcsDataCapabilities
    """
    ocm: Optional[CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm] = None
    dav: Optional[CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav] = None
    files_sharing: Optional[CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing] = None
    provisioning_api: Optional[CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi] = None
    theming: Optional[CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming] = None
    user_status: Optional[CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus] = None
    weather_status: Optional[CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate] = None
    __properties = ["ocm", "dav", "files_sharing", "provisioning_api", "theming", "user_status", "weather_status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilities:
        """Create an instance of CoreOcsGetCapabilities200ResponseOcsDataCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ocm
        if self.ocm:
            _dict['ocm'] = self.ocm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dav
        if self.dav:
            _dict['dav'] = self.dav.to_dict()
        # override the default output from pydantic by calling `to_dict()` of files_sharing
        if self.files_sharing:
            _dict['files_sharing'] = self.files_sharing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provisioning_api
        if self.provisioning_api:
            _dict['provisioning_api'] = self.provisioning_api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of theming
        if self.theming:
            _dict['theming'] = self.theming.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_status
        if self.user_status:
            _dict['user_status'] = self.user_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weather_status
        if self.weather_status:
            _dict['weather_status'] = self.weather_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilities:
        """Create an instance of CoreOcsGetCapabilities200ResponseOcsDataCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CoreOcsGetCapabilities200ResponseOcsDataCapabilities.parse_obj(obj)

        _obj = CoreOcsGetCapabilities200ResponseOcsDataCapabilities.parse_obj({
            "ocm": CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm.from_dict(obj.get("ocm")) if obj.get("ocm") is not None else None,
            "dav": CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav.from_dict(obj.get("dav")) if obj.get("dav") is not None else None,
            "files_sharing": CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing.from_dict(obj.get("files_sharing")) if obj.get("files_sharing") is not None else None,
            "provisioning_api": CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi.from_dict(obj.get("provisioning_api")) if obj.get("provisioning_api") is not None else None,
            "theming": CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming.from_dict(obj.get("theming")) if obj.get("theming") is not None else None,
            "user_status": CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus.from_dict(obj.get("user_status")) if obj.get("user_status") is not None else None,
            "weather_status": CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate.from_dict(obj.get("weather_status")) if obj.get("weather_status") is not None else None
        })
        return _obj

