# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr

class CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming(BaseModel):
    """
    CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming
    """
    name: StrictStr = Field(...)
    url: StrictStr = Field(...)
    slogan: StrictStr = Field(...)
    color: StrictStr = Field(...)
    color_text: StrictStr = Field(..., alias="color-text")
    color_element: StrictStr = Field(..., alias="color-element")
    color_element_bright: StrictStr = Field(..., alias="color-element-bright")
    color_element_dark: StrictStr = Field(..., alias="color-element-dark")
    logo: StrictStr = Field(...)
    background: StrictStr = Field(...)
    background_plain: StrictBool = Field(..., alias="background-plain")
    background_default: StrictBool = Field(..., alias="background-default")
    logoheader: StrictStr = Field(...)
    favicon: StrictStr = Field(...)
    __properties = ["name", "url", "slogan", "color", "color-text", "color-element", "color-element-bright", "color-element-dark", "logo", "background", "background-plain", "background-default", "logoheader", "favicon"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming:
        """Create an instance of CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming:
        """Create an instance of CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming.parse_obj(obj)

        _obj = CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming.parse_obj({
            "name": obj.get("name"),
            "url": obj.get("url"),
            "slogan": obj.get("slogan"),
            "color": obj.get("color"),
            "color_text": obj.get("color-text"),
            "color_element": obj.get("color-element"),
            "color_element_bright": obj.get("color-element-bright"),
            "color_element_dark": obj.get("color-element-dark"),
            "logo": obj.get("logo"),
            "background": obj.get("background"),
            "background_plain": obj.get("background-plain"),
            "background_default": obj.get("background-default"),
            "logoheader": obj.get("logoheader"),
            "favicon": obj.get("favicon")
        })
        return _obj

