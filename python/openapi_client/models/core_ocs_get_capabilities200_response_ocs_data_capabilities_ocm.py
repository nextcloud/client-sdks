# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_client.models.core_ocs_get_capabilities200_response_ocs_data_capabilities_ocm_resource_types_inner import CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner

class CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm(BaseModel):
    """
    CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm
    """
    enabled: StrictBool = Field(...)
    api_version: StrictStr = Field(..., alias="apiVersion")
    end_point: StrictStr = Field(..., alias="endPoint")
    resource_types: conlist(CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner) = Field(..., alias="resourceTypes")
    __properties = ["enabled", "apiVersion", "endPoint", "resourceTypes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm:
        """Create an instance of CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in resource_types (list)
        _items = []
        if self.resource_types:
            for _item in self.resource_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resourceTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm:
        """Create an instance of CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm.parse_obj(obj)

        _obj = CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm.parse_obj({
            "enabled": obj.get("enabled"),
            "api_version": obj.get("apiVersion"),
            "end_point": obj.get("endPoint"),
            "resource_types": [CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcmResourceTypesInner.from_dict(_item) for _item in obj.get("resourceTypes")] if obj.get("resourceTypes") is not None else None
        })
        return _obj

