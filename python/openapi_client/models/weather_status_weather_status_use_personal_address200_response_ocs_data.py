# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData(BaseModel):
    """
    WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData
    """
    success: StrictBool = Field(...)
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(...)
    lon: Optional[Union[StrictFloat, StrictInt]] = Field(...)
    address: Optional[StrictStr] = Field(...)
    __properties = ["success", "lat", "lon", "address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData:
        """Create an instance of WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if lat (nullable) is None
        # and __fields_set__ contains the field
        if self.lat is None and "lat" in self.__fields_set__:
            _dict['lat'] = None

        # set to None if lon (nullable) is None
        # and __fields_set__ contains the field
        if self.lon is None and "lon" in self.__fields_set__:
            _dict['lon'] = None

        # set to None if address (nullable) is None
        # and __fields_set__ contains the field
        if self.address is None and "address" in self.__fields_set__:
            _dict['address'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData:
        """Create an instance of WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData.parse_obj(obj)

        _obj = WeatherStatusWeatherStatusUsePersonalAddress200ResponseOcsData.parse_obj({
            "success": obj.get("success"),
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "address": obj.get("address")
        })
        return _obj

