# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, conlist
from openapi_client.models.files_sharing_sharee import FilesSharingSharee
from openapi_client.models.files_sharing_sharee_circle import FilesSharingShareeCircle
from openapi_client.models.files_sharing_sharee_email import FilesSharingShareeEmail
from openapi_client.models.files_sharing_sharee_lookup import FilesSharingShareeLookup
from openapi_client.models.files_sharing_sharee_remote import FilesSharingShareeRemote
from openapi_client.models.files_sharing_sharee_remote_group import FilesSharingShareeRemoteGroup
from openapi_client.models.files_sharing_sharee_user import FilesSharingShareeUser
from openapi_client.models.files_sharing_sharees_search_result_exact import FilesSharingShareesSearchResultExact

class FilesSharingShareesSearchResult(BaseModel):
    """
    FilesSharingShareesSearchResult
    """
    exact: FilesSharingShareesSearchResultExact = Field(...)
    circles: conlist(FilesSharingShareeCircle) = Field(...)
    emails: conlist(FilesSharingShareeEmail) = Field(...)
    groups: conlist(FilesSharingSharee) = Field(...)
    lookup: conlist(FilesSharingShareeLookup) = Field(...)
    remote_groups: conlist(FilesSharingShareeRemoteGroup) = Field(...)
    remotes: conlist(FilesSharingShareeRemote) = Field(...)
    rooms: conlist(FilesSharingSharee) = Field(...)
    users: conlist(FilesSharingShareeUser) = Field(...)
    lookup_enabled: StrictBool = Field(..., alias="lookupEnabled")
    __properties = ["exact", "circles", "emails", "groups", "lookup", "remote_groups", "remotes", "rooms", "users", "lookupEnabled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FilesSharingShareesSearchResult:
        """Create an instance of FilesSharingShareesSearchResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of exact
        if self.exact:
            _dict['exact'] = self.exact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in circles (list)
        _items = []
        if self.circles:
            for _item in self.circles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['circles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item in self.emails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item in self.groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lookup (list)
        _items = []
        if self.lookup:
            for _item in self.lookup:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lookup'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remote_groups (list)
        _items = []
        if self.remote_groups:
            for _item in self.remote_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['remote_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remotes (list)
        _items = []
        if self.remotes:
            for _item in self.remotes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['remotes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rooms (list)
        _items = []
        if self.rooms:
            for _item in self.rooms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rooms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FilesSharingShareesSearchResult:
        """Create an instance of FilesSharingShareesSearchResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FilesSharingShareesSearchResult.parse_obj(obj)

        _obj = FilesSharingShareesSearchResult.parse_obj({
            "exact": FilesSharingShareesSearchResultExact.from_dict(obj.get("exact")) if obj.get("exact") is not None else None,
            "circles": [FilesSharingShareeCircle.from_dict(_item) for _item in obj.get("circles")] if obj.get("circles") is not None else None,
            "emails": [FilesSharingShareeEmail.from_dict(_item) for _item in obj.get("emails")] if obj.get("emails") is not None else None,
            "groups": [FilesSharingSharee.from_dict(_item) for _item in obj.get("groups")] if obj.get("groups") is not None else None,
            "lookup": [FilesSharingShareeLookup.from_dict(_item) for _item in obj.get("lookup")] if obj.get("lookup") is not None else None,
            "remote_groups": [FilesSharingShareeRemoteGroup.from_dict(_item) for _item in obj.get("remote_groups")] if obj.get("remote_groups") is not None else None,
            "remotes": [FilesSharingShareeRemote.from_dict(_item) for _item in obj.get("remotes")] if obj.get("remotes") is not None else None,
            "rooms": [FilesSharingSharee.from_dict(_item) for _item in obj.get("rooms")] if obj.get("rooms") is not None else None,
            "users": [FilesSharingShareeUser.from_dict(_item) for _item in obj.get("users")] if obj.get("users") is not None else None,
            "lookup_enabled": obj.get("lookupEnabled")
        })
        return _obj

