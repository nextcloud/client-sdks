# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.dashboard_widget_buttons_inner import DashboardWidgetButtonsInner

class DashboardWidget(BaseModel):
    """
    DashboardWidget
    """
    id: StrictStr = Field(...)
    title: StrictStr = Field(...)
    order: StrictInt = Field(...)
    icon_class: StrictStr = Field(...)
    icon_url: StrictStr = Field(...)
    widget_url: Optional[StrictStr] = Field(...)
    item_icons_round: StrictBool = Field(...)
    buttons: Optional[conlist(DashboardWidgetButtonsInner)] = None
    __properties = ["id", "title", "order", "icon_class", "icon_url", "widget_url", "item_icons_round", "buttons"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DashboardWidget:
        """Create an instance of DashboardWidget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in buttons (list)
        _items = []
        if self.buttons:
            for _item in self.buttons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['buttons'] = _items
        # set to None if widget_url (nullable) is None
        # and __fields_set__ contains the field
        if self.widget_url is None and "widget_url" in self.__fields_set__:
            _dict['widget_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DashboardWidget:
        """Create an instance of DashboardWidget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DashboardWidget.parse_obj(obj)

        _obj = DashboardWidget.parse_obj({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "order": obj.get("order"),
            "icon_class": obj.get("icon_class"),
            "icon_url": obj.get("icon_url"),
            "widget_url": obj.get("widget_url"),
            "item_icons_round": obj.get("item_icons_round"),
            "buttons": [DashboardWidgetButtonsInner.from_dict(_item) for _item in obj.get("buttons")] if obj.get("buttons") is not None else None
        })
        return _obj

