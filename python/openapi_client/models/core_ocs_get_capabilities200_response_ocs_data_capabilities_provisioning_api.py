# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi(BaseModel):
    """
    CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi
    """
    version: StrictStr = Field(...)
    account_property_scopes_version: StrictInt = Field(..., alias="AccountPropertyScopesVersion")
    account_property_scopes_federated_enabled: StrictBool = Field(..., alias="AccountPropertyScopesFederatedEnabled")
    account_property_scopes_published_enabled: StrictBool = Field(..., alias="AccountPropertyScopesPublishedEnabled")
    __properties = ["version", "AccountPropertyScopesVersion", "AccountPropertyScopesFederatedEnabled", "AccountPropertyScopesPublishedEnabled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi:
        """Create an instance of CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi:
        """Create an instance of CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi.parse_obj(obj)

        _obj = CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi.parse_obj({
            "version": obj.get("version"),
            "account_property_scopes_version": obj.get("AccountPropertyScopesVersion"),
            "account_property_scopes_federated_enabled": obj.get("AccountPropertyScopesFederatedEnabled"),
            "account_property_scopes_published_enabled": obj.get("AccountPropertyScopesPublishedEnabled")
        })
        return _obj

