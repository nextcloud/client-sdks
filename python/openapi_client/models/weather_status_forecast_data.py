# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from openapi_client.models.weather_status_forecast_data_instant import WeatherStatusForecastDataInstant
from openapi_client.models.weather_status_forecast_data_next12_hours import WeatherStatusForecastDataNext12Hours
from openapi_client.models.weather_status_forecast_data_next1_hours import WeatherStatusForecastDataNext1Hours
from openapi_client.models.weather_status_forecast_data_next6_hours import WeatherStatusForecastDataNext6Hours

class WeatherStatusForecastData(BaseModel):
    """
    WeatherStatusForecastData
    """
    instant: WeatherStatusForecastDataInstant = Field(...)
    next_12_hours: WeatherStatusForecastDataNext12Hours = Field(...)
    next_1_hours: WeatherStatusForecastDataNext1Hours = Field(...)
    next_6_hours: WeatherStatusForecastDataNext6Hours = Field(...)
    __properties = ["instant", "next_12_hours", "next_1_hours", "next_6_hours"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WeatherStatusForecastData:
        """Create an instance of WeatherStatusForecastData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of instant
        if self.instant:
            _dict['instant'] = self.instant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_12_hours
        if self.next_12_hours:
            _dict['next_12_hours'] = self.next_12_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_1_hours
        if self.next_1_hours:
            _dict['next_1_hours'] = self.next_1_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_6_hours
        if self.next_6_hours:
            _dict['next_6_hours'] = self.next_6_hours.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WeatherStatusForecastData:
        """Create an instance of WeatherStatusForecastData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WeatherStatusForecastData.parse_obj(obj)

        _obj = WeatherStatusForecastData.parse_obj({
            "instant": WeatherStatusForecastDataInstant.from_dict(obj.get("instant")) if obj.get("instant") is not None else None,
            "next_12_hours": WeatherStatusForecastDataNext12Hours.from_dict(obj.get("next_12_hours")) if obj.get("next_12_hours") is not None else None,
            "next_1_hours": WeatherStatusForecastDataNext1Hours.from_dict(obj.get("next_1_hours")) if obj.get("next_1_hours") is not None else None,
            "next_6_hours": WeatherStatusForecastDataNext6Hours.from_dict(obj.get("next_6_hours")) if obj.get("next_6_hours") is not None else None
        })
        return _obj

