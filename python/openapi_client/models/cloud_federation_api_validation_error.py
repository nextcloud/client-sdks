# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.cloud_federation_api_validation_error_all_of_validation_errors import CloudFederationApiValidationErrorAllOfValidationErrors

class CloudFederationApiValidationError(BaseModel):
    """
    CloudFederationApiValidationError
    """
    message: StrictStr = Field(...)
    validation_errors: conlist(CloudFederationApiValidationErrorAllOfValidationErrors) = Field(..., alias="validationErrors")
    __properties = ["message", "validationErrors"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CloudFederationApiValidationError:
        """Create an instance of CloudFederationApiValidationError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in validation_errors (list)
        _items = []
        if self.validation_errors:
            for _item in self.validation_errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['validationErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CloudFederationApiValidationError:
        """Create an instance of CloudFederationApiValidationError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CloudFederationApiValidationError.parse_obj(obj)

        _obj = CloudFederationApiValidationError.parse_obj({
            "message": obj.get("message"),
            "validation_errors": [CloudFederationApiValidationErrorAllOfValidationErrors.from_dict(_item) for _item in obj.get("validationErrors")] if obj.get("validationErrors") is not None else None
        })
        return _obj

