# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from openapi_client.models.core_whats_new_dismiss200_response import CoreWhatsNewDismiss200Response
from openapi_client.models.files_sharing_shareapi_create_share200_response import FilesSharingShareapiCreateShare200Response
from openapi_client.models.files_sharing_shareapi_get_shares200_response import FilesSharingShareapiGetShares200Response

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FilesSharingShareapiApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def files_sharing_shareapi_accept_share(self, id : Annotated[StrictStr, Field(..., description="ID of the share")], ocs_api_request : StrictStr, **kwargs) -> CoreWhatsNewDismiss200Response:  # noqa: E501
        """Accept a share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_accept_share(id, ocs_api_request, async_req=True)
        >>> result = thread.get()

        :param id: ID of the share (required)
        :type id: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CoreWhatsNewDismiss200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the files_sharing_shareapi_accept_share_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.files_sharing_shareapi_accept_share_with_http_info(id, ocs_api_request, **kwargs)  # noqa: E501

    @validate_arguments
    def files_sharing_shareapi_accept_share_with_http_info(self, id : Annotated[StrictStr, Field(..., description="ID of the share")], ocs_api_request : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Accept a share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_accept_share_with_http_info(id, ocs_api_request, async_req=True)
        >>> result = thread.get()

        :param id: ID of the share (required)
        :type id: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CoreWhatsNewDismiss200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'ocs_api_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_sharing_shareapi_accept_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['ocs_api_request']:
            _header_params['OCS-APIRequest'] = _params['ocs_api_request']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '200': "CoreWhatsNewDismiss200Response",
        }

        return self.api_client.call_api(
            '/ocs/v2.php/apps/files_sharing/api/v1/shares/pending/{id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def files_sharing_shareapi_create_share(self, ocs_api_request : StrictStr, path : Annotated[Optional[StrictStr], Field(description="Path of the share")] = None, permissions : Annotated[Optional[StrictInt], Field(description="Permissions for the share")] = None, share_type : Annotated[Optional[StrictInt], Field(description="Type of the share")] = None, share_with : Annotated[Optional[StrictStr], Field(description="The entity this should be shared with")] = None, public_upload : Annotated[Optional[StrictStr], Field(description="If public uploading is allowed")] = None, password : Annotated[Optional[StrictStr], Field(description="Password for the share")] = None, send_password_by_talk : Annotated[Optional[StrictStr], Field(description="Send the password for the share over Talk")] = None, expire_date : Annotated[Optional[StrictStr], Field(description="Expiry date of the share")] = None, note : Annotated[Optional[StrictStr], Field(description="Note for the share")] = None, label : Annotated[Optional[StrictStr], Field(description="Label for the share (only used in link and email)")] = None, attributes : Annotated[Optional[StrictStr], Field(description="Additional attributes for the share")] = None, **kwargs) -> FilesSharingShareapiCreateShare200Response:  # noqa: E501
        """Create a share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_create_share(ocs_api_request, path, permissions, share_type, share_with, public_upload, password, send_password_by_talk, expire_date, note, label, attributes, async_req=True)
        >>> result = thread.get()

        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param path: Path of the share
        :type path: str
        :param permissions: Permissions for the share
        :type permissions: int
        :param share_type: Type of the share
        :type share_type: int
        :param share_with: The entity this should be shared with
        :type share_with: str
        :param public_upload: If public uploading is allowed
        :type public_upload: str
        :param password: Password for the share
        :type password: str
        :param send_password_by_talk: Send the password for the share over Talk
        :type send_password_by_talk: str
        :param expire_date: Expiry date of the share
        :type expire_date: str
        :param note: Note for the share
        :type note: str
        :param label: Label for the share (only used in link and email)
        :type label: str
        :param attributes: Additional attributes for the share
        :type attributes: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FilesSharingShareapiCreateShare200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the files_sharing_shareapi_create_share_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.files_sharing_shareapi_create_share_with_http_info(ocs_api_request, path, permissions, share_type, share_with, public_upload, password, send_password_by_talk, expire_date, note, label, attributes, **kwargs)  # noqa: E501

    @validate_arguments
    def files_sharing_shareapi_create_share_with_http_info(self, ocs_api_request : StrictStr, path : Annotated[Optional[StrictStr], Field(description="Path of the share")] = None, permissions : Annotated[Optional[StrictInt], Field(description="Permissions for the share")] = None, share_type : Annotated[Optional[StrictInt], Field(description="Type of the share")] = None, share_with : Annotated[Optional[StrictStr], Field(description="The entity this should be shared with")] = None, public_upload : Annotated[Optional[StrictStr], Field(description="If public uploading is allowed")] = None, password : Annotated[Optional[StrictStr], Field(description="Password for the share")] = None, send_password_by_talk : Annotated[Optional[StrictStr], Field(description="Send the password for the share over Talk")] = None, expire_date : Annotated[Optional[StrictStr], Field(description="Expiry date of the share")] = None, note : Annotated[Optional[StrictStr], Field(description="Note for the share")] = None, label : Annotated[Optional[StrictStr], Field(description="Label for the share (only used in link and email)")] = None, attributes : Annotated[Optional[StrictStr], Field(description="Additional attributes for the share")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_create_share_with_http_info(ocs_api_request, path, permissions, share_type, share_with, public_upload, password, send_password_by_talk, expire_date, note, label, attributes, async_req=True)
        >>> result = thread.get()

        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param path: Path of the share
        :type path: str
        :param permissions: Permissions for the share
        :type permissions: int
        :param share_type: Type of the share
        :type share_type: int
        :param share_with: The entity this should be shared with
        :type share_with: str
        :param public_upload: If public uploading is allowed
        :type public_upload: str
        :param password: Password for the share
        :type password: str
        :param send_password_by_talk: Send the password for the share over Talk
        :type send_password_by_talk: str
        :param expire_date: Expiry date of the share
        :type expire_date: str
        :param note: Note for the share
        :type note: str
        :param label: Label for the share (only used in link and email)
        :type label: str
        :param attributes: Additional attributes for the share
        :type attributes: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FilesSharingShareapiCreateShare200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ocs_api_request',
            'path',
            'permissions',
            'share_type',
            'share_with',
            'public_upload',
            'password',
            'send_password_by_talk',
            'expire_date',
            'note',
            'label',
            'attributes'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_sharing_shareapi_create_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('path') is not None:  # noqa: E501
            _query_params.append(('path', _params['path']))

        if _params.get('permissions') is not None:  # noqa: E501
            _query_params.append(('permissions', _params['permissions']))

        if _params.get('share_type') is not None:  # noqa: E501
            _query_params.append(('shareType', _params['share_type']))

        if _params.get('share_with') is not None:  # noqa: E501
            _query_params.append(('shareWith', _params['share_with']))

        if _params.get('public_upload') is not None:  # noqa: E501
            _query_params.append(('publicUpload', _params['public_upload']))

        if _params.get('password') is not None:  # noqa: E501
            _query_params.append(('password', _params['password']))

        if _params.get('send_password_by_talk') is not None:  # noqa: E501
            _query_params.append(('sendPasswordByTalk', _params['send_password_by_talk']))

        if _params.get('expire_date') is not None:  # noqa: E501
            _query_params.append(('expireDate', _params['expire_date']))

        if _params.get('note') is not None:  # noqa: E501
            _query_params.append(('note', _params['note']))

        if _params.get('label') is not None:  # noqa: E501
            _query_params.append(('label', _params['label']))

        if _params.get('attributes') is not None:  # noqa: E501
            _query_params.append(('attributes', _params['attributes']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['ocs_api_request']:
            _header_params['OCS-APIRequest'] = _params['ocs_api_request']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '200': "FilesSharingShareapiCreateShare200Response",
        }

        return self.api_client.call_api(
            '/ocs/v2.php/apps/files_sharing/api/v1/shares', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def files_sharing_shareapi_delete_share(self, id : Annotated[StrictStr, Field(..., description="ID of the share")], ocs_api_request : StrictStr, **kwargs) -> CoreWhatsNewDismiss200Response:  # noqa: E501
        """Delete a share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_delete_share(id, ocs_api_request, async_req=True)
        >>> result = thread.get()

        :param id: ID of the share (required)
        :type id: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CoreWhatsNewDismiss200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the files_sharing_shareapi_delete_share_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.files_sharing_shareapi_delete_share_with_http_info(id, ocs_api_request, **kwargs)  # noqa: E501

    @validate_arguments
    def files_sharing_shareapi_delete_share_with_http_info(self, id : Annotated[StrictStr, Field(..., description="ID of the share")], ocs_api_request : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_delete_share_with_http_info(id, ocs_api_request, async_req=True)
        >>> result = thread.get()

        :param id: ID of the share (required)
        :type id: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CoreWhatsNewDismiss200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'ocs_api_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_sharing_shareapi_delete_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['ocs_api_request']:
            _header_params['OCS-APIRequest'] = _params['ocs_api_request']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '200': "CoreWhatsNewDismiss200Response",
        }

        return self.api_client.call_api(
            '/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def files_sharing_shareapi_get_inherited_shares(self, path : Annotated[StrictStr, Field(..., description="Path all shares will be relative to")], ocs_api_request : StrictStr, **kwargs) -> FilesSharingShareapiGetShares200Response:  # noqa: E501
        """Get all shares relative to a file, including parent folders shares rights  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_get_inherited_shares(path, ocs_api_request, async_req=True)
        >>> result = thread.get()

        :param path: Path all shares will be relative to (required)
        :type path: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FilesSharingShareapiGetShares200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the files_sharing_shareapi_get_inherited_shares_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.files_sharing_shareapi_get_inherited_shares_with_http_info(path, ocs_api_request, **kwargs)  # noqa: E501

    @validate_arguments
    def files_sharing_shareapi_get_inherited_shares_with_http_info(self, path : Annotated[StrictStr, Field(..., description="Path all shares will be relative to")], ocs_api_request : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get all shares relative to a file, including parent folders shares rights  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_get_inherited_shares_with_http_info(path, ocs_api_request, async_req=True)
        >>> result = thread.get()

        :param path: Path all shares will be relative to (required)
        :type path: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FilesSharingShareapiGetShares200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'path',
            'ocs_api_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_sharing_shareapi_get_inherited_shares" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('path') is not None:  # noqa: E501
            _query_params.append(('path', _params['path']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['ocs_api_request']:
            _header_params['OCS-APIRequest'] = _params['ocs_api_request']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '200': "FilesSharingShareapiGetShares200Response",
        }

        return self.api_client.call_api(
            '/ocs/v2.php/apps/files_sharing/api/v1/shares/inherited', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def files_sharing_shareapi_get_share(self, id : Annotated[StrictStr, Field(..., description="ID of the share")], ocs_api_request : StrictStr, include_tags : Annotated[Optional[StrictInt], Field(description="Include tags in the share")] = None, **kwargs) -> FilesSharingShareapiCreateShare200Response:  # noqa: E501
        """Get a specific share by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_get_share(id, ocs_api_request, include_tags, async_req=True)
        >>> result = thread.get()

        :param id: ID of the share (required)
        :type id: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param include_tags: Include tags in the share
        :type include_tags: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FilesSharingShareapiCreateShare200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the files_sharing_shareapi_get_share_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.files_sharing_shareapi_get_share_with_http_info(id, ocs_api_request, include_tags, **kwargs)  # noqa: E501

    @validate_arguments
    def files_sharing_shareapi_get_share_with_http_info(self, id : Annotated[StrictStr, Field(..., description="ID of the share")], ocs_api_request : StrictStr, include_tags : Annotated[Optional[StrictInt], Field(description="Include tags in the share")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get a specific share by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_get_share_with_http_info(id, ocs_api_request, include_tags, async_req=True)
        >>> result = thread.get()

        :param id: ID of the share (required)
        :type id: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param include_tags: Include tags in the share
        :type include_tags: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FilesSharingShareapiCreateShare200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'ocs_api_request',
            'include_tags'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_sharing_shareapi_get_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('include_tags') is not None:  # noqa: E501
            _query_params.append(('include_tags', _params['include_tags']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['ocs_api_request']:
            _header_params['OCS-APIRequest'] = _params['ocs_api_request']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '200': "FilesSharingShareapiCreateShare200Response",
        }

        return self.api_client.call_api(
            '/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def files_sharing_shareapi_get_shares(self, ocs_api_request : StrictStr, shared_with_me : Annotated[Optional[StrictStr], Field(description="Only get shares with the current user")] = None, reshares : Annotated[Optional[StrictStr], Field(description="Only get shares by the current user and reshares")] = None, subfiles : Annotated[Optional[StrictStr], Field(description="Only get all shares in a folder")] = None, path : Annotated[Optional[StrictStr], Field(description="Get shares for a specific path")] = None, include_tags : Annotated[Optional[StrictStr], Field(description="Include tags in the share")] = None, **kwargs) -> FilesSharingShareapiGetShares200Response:  # noqa: E501
        """Get shares of the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_get_shares(ocs_api_request, shared_with_me, reshares, subfiles, path, include_tags, async_req=True)
        >>> result = thread.get()

        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param shared_with_me: Only get shares with the current user
        :type shared_with_me: str
        :param reshares: Only get shares by the current user and reshares
        :type reshares: str
        :param subfiles: Only get all shares in a folder
        :type subfiles: str
        :param path: Get shares for a specific path
        :type path: str
        :param include_tags: Include tags in the share
        :type include_tags: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FilesSharingShareapiGetShares200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the files_sharing_shareapi_get_shares_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.files_sharing_shareapi_get_shares_with_http_info(ocs_api_request, shared_with_me, reshares, subfiles, path, include_tags, **kwargs)  # noqa: E501

    @validate_arguments
    def files_sharing_shareapi_get_shares_with_http_info(self, ocs_api_request : StrictStr, shared_with_me : Annotated[Optional[StrictStr], Field(description="Only get shares with the current user")] = None, reshares : Annotated[Optional[StrictStr], Field(description="Only get shares by the current user and reshares")] = None, subfiles : Annotated[Optional[StrictStr], Field(description="Only get all shares in a folder")] = None, path : Annotated[Optional[StrictStr], Field(description="Get shares for a specific path")] = None, include_tags : Annotated[Optional[StrictStr], Field(description="Include tags in the share")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get shares of the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_get_shares_with_http_info(ocs_api_request, shared_with_me, reshares, subfiles, path, include_tags, async_req=True)
        >>> result = thread.get()

        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param shared_with_me: Only get shares with the current user
        :type shared_with_me: str
        :param reshares: Only get shares by the current user and reshares
        :type reshares: str
        :param subfiles: Only get all shares in a folder
        :type subfiles: str
        :param path: Get shares for a specific path
        :type path: str
        :param include_tags: Include tags in the share
        :type include_tags: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FilesSharingShareapiGetShares200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ocs_api_request',
            'shared_with_me',
            'reshares',
            'subfiles',
            'path',
            'include_tags'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_sharing_shareapi_get_shares" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('shared_with_me') is not None:  # noqa: E501
            _query_params.append(('shared_with_me', _params['shared_with_me']))

        if _params.get('reshares') is not None:  # noqa: E501
            _query_params.append(('reshares', _params['reshares']))

        if _params.get('subfiles') is not None:  # noqa: E501
            _query_params.append(('subfiles', _params['subfiles']))

        if _params.get('path') is not None:  # noqa: E501
            _query_params.append(('path', _params['path']))

        if _params.get('include_tags') is not None:  # noqa: E501
            _query_params.append(('include_tags', _params['include_tags']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['ocs_api_request']:
            _header_params['OCS-APIRequest'] = _params['ocs_api_request']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '200': "FilesSharingShareapiGetShares200Response",
        }

        return self.api_client.call_api(
            '/ocs/v2.php/apps/files_sharing/api/v1/shares', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def files_sharing_shareapi_pending_shares(self, ocs_api_request : StrictStr, **kwargs) -> FilesSharingShareapiGetShares200Response:  # noqa: E501
        """Get all shares that are still pending  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_pending_shares(ocs_api_request, async_req=True)
        >>> result = thread.get()

        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FilesSharingShareapiGetShares200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the files_sharing_shareapi_pending_shares_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.files_sharing_shareapi_pending_shares_with_http_info(ocs_api_request, **kwargs)  # noqa: E501

    @validate_arguments
    def files_sharing_shareapi_pending_shares_with_http_info(self, ocs_api_request : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get all shares that are still pending  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_pending_shares_with_http_info(ocs_api_request, async_req=True)
        >>> result = thread.get()

        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FilesSharingShareapiGetShares200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ocs_api_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_sharing_shareapi_pending_shares" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['ocs_api_request']:
            _header_params['OCS-APIRequest'] = _params['ocs_api_request']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '200': "FilesSharingShareapiGetShares200Response",
        }

        return self.api_client.call_api(
            '/ocs/v2.php/apps/files_sharing/api/v1/shares/pending', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def files_sharing_shareapi_update_share(self, id : Annotated[StrictStr, Field(..., description="ID of the share")], ocs_api_request : StrictStr, permissions : Annotated[Optional[StrictInt], Field(description="New permissions")] = None, password : Annotated[Optional[StrictStr], Field(description="New password")] = None, send_password_by_talk : Annotated[Optional[StrictStr], Field(description="New condition if the password should be send over Talk")] = None, public_upload : Annotated[Optional[StrictStr], Field(description="New condition if public uploading is allowed")] = None, expire_date : Annotated[Optional[StrictStr], Field(description="New expiry date")] = None, note : Annotated[Optional[StrictStr], Field(description="New note")] = None, label : Annotated[Optional[StrictStr], Field(description="New label")] = None, hide_download : Annotated[Optional[StrictStr], Field(description="New condition if the download should be hidden")] = None, attributes : Annotated[Optional[StrictStr], Field(description="New additional attributes")] = None, **kwargs) -> FilesSharingShareapiCreateShare200Response:  # noqa: E501
        """Update a share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_update_share(id, ocs_api_request, permissions, password, send_password_by_talk, public_upload, expire_date, note, label, hide_download, attributes, async_req=True)
        >>> result = thread.get()

        :param id: ID of the share (required)
        :type id: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param permissions: New permissions
        :type permissions: int
        :param password: New password
        :type password: str
        :param send_password_by_talk: New condition if the password should be send over Talk
        :type send_password_by_talk: str
        :param public_upload: New condition if public uploading is allowed
        :type public_upload: str
        :param expire_date: New expiry date
        :type expire_date: str
        :param note: New note
        :type note: str
        :param label: New label
        :type label: str
        :param hide_download: New condition if the download should be hidden
        :type hide_download: str
        :param attributes: New additional attributes
        :type attributes: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FilesSharingShareapiCreateShare200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the files_sharing_shareapi_update_share_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.files_sharing_shareapi_update_share_with_http_info(id, ocs_api_request, permissions, password, send_password_by_talk, public_upload, expire_date, note, label, hide_download, attributes, **kwargs)  # noqa: E501

    @validate_arguments
    def files_sharing_shareapi_update_share_with_http_info(self, id : Annotated[StrictStr, Field(..., description="ID of the share")], ocs_api_request : StrictStr, permissions : Annotated[Optional[StrictInt], Field(description="New permissions")] = None, password : Annotated[Optional[StrictStr], Field(description="New password")] = None, send_password_by_talk : Annotated[Optional[StrictStr], Field(description="New condition if the password should be send over Talk")] = None, public_upload : Annotated[Optional[StrictStr], Field(description="New condition if public uploading is allowed")] = None, expire_date : Annotated[Optional[StrictStr], Field(description="New expiry date")] = None, note : Annotated[Optional[StrictStr], Field(description="New note")] = None, label : Annotated[Optional[StrictStr], Field(description="New label")] = None, hide_download : Annotated[Optional[StrictStr], Field(description="New condition if the download should be hidden")] = None, attributes : Annotated[Optional[StrictStr], Field(description="New additional attributes")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.files_sharing_shareapi_update_share_with_http_info(id, ocs_api_request, permissions, password, send_password_by_talk, public_upload, expire_date, note, label, hide_download, attributes, async_req=True)
        >>> result = thread.get()

        :param id: ID of the share (required)
        :type id: str
        :param ocs_api_request: (required)
        :type ocs_api_request: str
        :param permissions: New permissions
        :type permissions: int
        :param password: New password
        :type password: str
        :param send_password_by_talk: New condition if the password should be send over Talk
        :type send_password_by_talk: str
        :param public_upload: New condition if public uploading is allowed
        :type public_upload: str
        :param expire_date: New expiry date
        :type expire_date: str
        :param note: New note
        :type note: str
        :param label: New label
        :type label: str
        :param hide_download: New condition if the download should be hidden
        :type hide_download: str
        :param attributes: New additional attributes
        :type attributes: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FilesSharingShareapiCreateShare200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'ocs_api_request',
            'permissions',
            'password',
            'send_password_by_talk',
            'public_upload',
            'expire_date',
            'note',
            'label',
            'hide_download',
            'attributes'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_sharing_shareapi_update_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('permissions') is not None:  # noqa: E501
            _query_params.append(('permissions', _params['permissions']))

        if _params.get('password') is not None:  # noqa: E501
            _query_params.append(('password', _params['password']))

        if _params.get('send_password_by_talk') is not None:  # noqa: E501
            _query_params.append(('sendPasswordByTalk', _params['send_password_by_talk']))

        if _params.get('public_upload') is not None:  # noqa: E501
            _query_params.append(('publicUpload', _params['public_upload']))

        if _params.get('expire_date') is not None:  # noqa: E501
            _query_params.append(('expireDate', _params['expire_date']))

        if _params.get('note') is not None:  # noqa: E501
            _query_params.append(('note', _params['note']))

        if _params.get('label') is not None:  # noqa: E501
            _query_params.append(('label', _params['label']))

        if _params.get('hide_download') is not None:  # noqa: E501
            _query_params.append(('hideDownload', _params['hide_download']))

        if _params.get('attributes') is not None:  # noqa: E501
            _query_params.append(('attributes', _params['attributes']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['ocs_api_request']:
            _header_params['OCS-APIRequest'] = _params['ocs_api_request']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '200': "FilesSharingShareapiCreateShare200Response",
        }

        return self.api_client.call_api(
            '/ocs/v2.php/apps/files_sharing/api/v1/shares/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
