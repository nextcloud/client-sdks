# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr

from typing import Any, Dict, List, Optional

from openapi_client.models.cloud_federation_api_add_share import CloudFederationApiAddShare

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CloudFederationApiRequestHandlerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def cloud_federation_api_request_handler_add_share(self, share_with : Annotated[StrictStr, Field(..., description="The user who the share will be shared with")], name : Annotated[StrictStr, Field(..., description="The resource name (e.g. document.odt)")], provider_id : Annotated[StrictStr, Field(..., description="Resource UID on the provider side")], owner : Annotated[StrictStr, Field(..., description="Provider specific UID of the user who owns the resource")], protocol : Annotated[StrictStr, Field(..., description="e,.g. ['name' => 'webdav', 'options' => ['username' => 'john', 'permissions' => 31]]")], share_type : Annotated[StrictStr, Field(..., description="'group' or 'user' share")], resource_type : Annotated[StrictStr, Field(..., description="'file', 'calendar',...")], description : Annotated[Optional[StrictStr], Field(description="Share description")] = None, owner_display_name : Annotated[Optional[StrictStr], Field(description="Display name of the user who shared the item")] = None, shared_by : Annotated[Optional[StrictStr], Field(description="Provider specific UID of the user who shared the resource")] = None, shared_by_display_name : Annotated[Optional[StrictStr], Field(description="Display name of the user who shared the resource")] = None, **kwargs) -> CloudFederationApiAddShare:  # noqa: E501
        """Add share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloud_federation_api_request_handler_add_share(share_with, name, provider_id, owner, protocol, share_type, resource_type, description, owner_display_name, shared_by, shared_by_display_name, async_req=True)
        >>> result = thread.get()

        :param share_with: The user who the share will be shared with (required)
        :type share_with: str
        :param name: The resource name (e.g. document.odt) (required)
        :type name: str
        :param provider_id: Resource UID on the provider side (required)
        :type provider_id: str
        :param owner: Provider specific UID of the user who owns the resource (required)
        :type owner: str
        :param protocol: e,.g. ['name' => 'webdav', 'options' => ['username' => 'john', 'permissions' => 31]] (required)
        :type protocol: str
        :param share_type: 'group' or 'user' share (required)
        :type share_type: str
        :param resource_type: 'file', 'calendar',... (required)
        :type resource_type: str
        :param description: Share description
        :type description: str
        :param owner_display_name: Display name of the user who shared the item
        :type owner_display_name: str
        :param shared_by: Provider specific UID of the user who shared the resource
        :type shared_by: str
        :param shared_by_display_name: Display name of the user who shared the resource
        :type shared_by_display_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CloudFederationApiAddShare
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cloud_federation_api_request_handler_add_share_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cloud_federation_api_request_handler_add_share_with_http_info(share_with, name, provider_id, owner, protocol, share_type, resource_type, description, owner_display_name, shared_by, shared_by_display_name, **kwargs)  # noqa: E501

    @validate_arguments
    def cloud_federation_api_request_handler_add_share_with_http_info(self, share_with : Annotated[StrictStr, Field(..., description="The user who the share will be shared with")], name : Annotated[StrictStr, Field(..., description="The resource name (e.g. document.odt)")], provider_id : Annotated[StrictStr, Field(..., description="Resource UID on the provider side")], owner : Annotated[StrictStr, Field(..., description="Provider specific UID of the user who owns the resource")], protocol : Annotated[StrictStr, Field(..., description="e,.g. ['name' => 'webdav', 'options' => ['username' => 'john', 'permissions' => 31]]")], share_type : Annotated[StrictStr, Field(..., description="'group' or 'user' share")], resource_type : Annotated[StrictStr, Field(..., description="'file', 'calendar',...")], description : Annotated[Optional[StrictStr], Field(description="Share description")] = None, owner_display_name : Annotated[Optional[StrictStr], Field(description="Display name of the user who shared the item")] = None, shared_by : Annotated[Optional[StrictStr], Field(description="Provider specific UID of the user who shared the resource")] = None, shared_by_display_name : Annotated[Optional[StrictStr], Field(description="Display name of the user who shared the resource")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloud_federation_api_request_handler_add_share_with_http_info(share_with, name, provider_id, owner, protocol, share_type, resource_type, description, owner_display_name, shared_by, shared_by_display_name, async_req=True)
        >>> result = thread.get()

        :param share_with: The user who the share will be shared with (required)
        :type share_with: str
        :param name: The resource name (e.g. document.odt) (required)
        :type name: str
        :param provider_id: Resource UID on the provider side (required)
        :type provider_id: str
        :param owner: Provider specific UID of the user who owns the resource (required)
        :type owner: str
        :param protocol: e,.g. ['name' => 'webdav', 'options' => ['username' => 'john', 'permissions' => 31]] (required)
        :type protocol: str
        :param share_type: 'group' or 'user' share (required)
        :type share_type: str
        :param resource_type: 'file', 'calendar',... (required)
        :type resource_type: str
        :param description: Share description
        :type description: str
        :param owner_display_name: Display name of the user who shared the item
        :type owner_display_name: str
        :param shared_by: Provider specific UID of the user who shared the resource
        :type shared_by: str
        :param shared_by_display_name: Display name of the user who shared the resource
        :type shared_by_display_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CloudFederationApiAddShare, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'share_with',
            'name',
            'provider_id',
            'owner',
            'protocol',
            'share_type',
            'resource_type',
            'description',
            'owner_display_name',
            'shared_by',
            'shared_by_display_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloud_federation_api_request_handler_add_share" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('share_with') is not None:  # noqa: E501
            _query_params.append(('shareWith', _params['share_with']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('description') is not None:  # noqa: E501
            _query_params.append(('description', _params['description']))

        if _params.get('provider_id') is not None:  # noqa: E501
            _query_params.append(('providerId', _params['provider_id']))

        if _params.get('owner') is not None:  # noqa: E501
            _query_params.append(('owner', _params['owner']))

        if _params.get('owner_display_name') is not None:  # noqa: E501
            _query_params.append(('ownerDisplayName', _params['owner_display_name']))

        if _params.get('shared_by') is not None:  # noqa: E501
            _query_params.append(('sharedBy', _params['shared_by']))

        if _params.get('shared_by_display_name') is not None:  # noqa: E501
            _query_params.append(('sharedByDisplayName', _params['shared_by_display_name']))

        if _params.get('protocol') is not None:  # noqa: E501
            _query_params.append(('protocol', _params['protocol']))

        if _params.get('share_type') is not None:  # noqa: E501
            _query_params.append(('shareType', _params['share_type']))

        if _params.get('resource_type') is not None:  # noqa: E501
            _query_params.append(('resourceType', _params['resource_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '201': "CloudFederationApiAddShare",
        }

        return self.api_client.call_api(
            '/index.php/ocm/shares', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def cloud_federation_api_request_handler_receive_notification(self, notification_type : Annotated[StrictStr, Field(..., description="Notification type, e.g. SHARE_ACCEPTED")], resource_type : Annotated[StrictStr, Field(..., description="calendar, file, contact,...")], provider_id : Annotated[Optional[StrictStr], Field(description="ID of the share")] = None, notification : Annotated[Optional[StrictStr], Field(description="The actual payload of the notification")] = None, **kwargs) -> List[object]:  # noqa: E501
        """Send a notification about an existing share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloud_federation_api_request_handler_receive_notification(notification_type, resource_type, provider_id, notification, async_req=True)
        >>> result = thread.get()

        :param notification_type: Notification type, e.g. SHARE_ACCEPTED (required)
        :type notification_type: str
        :param resource_type: calendar, file, contact,... (required)
        :type resource_type: str
        :param provider_id: ID of the share
        :type provider_id: str
        :param notification: The actual payload of the notification
        :type notification: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[object]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cloud_federation_api_request_handler_receive_notification_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cloud_federation_api_request_handler_receive_notification_with_http_info(notification_type, resource_type, provider_id, notification, **kwargs)  # noqa: E501

    @validate_arguments
    def cloud_federation_api_request_handler_receive_notification_with_http_info(self, notification_type : Annotated[StrictStr, Field(..., description="Notification type, e.g. SHARE_ACCEPTED")], resource_type : Annotated[StrictStr, Field(..., description="calendar, file, contact,...")], provider_id : Annotated[Optional[StrictStr], Field(description="ID of the share")] = None, notification : Annotated[Optional[StrictStr], Field(description="The actual payload of the notification")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send a notification about an existing share  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cloud_federation_api_request_handler_receive_notification_with_http_info(notification_type, resource_type, provider_id, notification, async_req=True)
        >>> result = thread.get()

        :param notification_type: Notification type, e.g. SHARE_ACCEPTED (required)
        :type notification_type: str
        :param resource_type: calendar, file, contact,... (required)
        :type resource_type: str
        :param provider_id: ID of the share
        :type provider_id: str
        :param notification: The actual payload of the notification
        :type notification: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[object], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'notification_type',
            'resource_type',
            'provider_id',
            'notification'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloud_federation_api_request_handler_receive_notification" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('notification_type') is not None:  # noqa: E501
            _query_params.append(('notificationType', _params['notification_type']))

        if _params.get('resource_type') is not None:  # noqa: E501
            _query_params.append(('resourceType', _params['resource_type']))

        if _params.get('provider_id') is not None:  # noqa: E501
            _query_params.append(('providerId', _params['provider_id']))

        if _params.get('notification') is not None:  # noqa: E501
            _query_params.append(('notification', _params['notification']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basic_auth', 'bearer_auth']  # noqa: E501

        _response_types_map = {
            '201': "List[object]",
        }

        return self.api_client.call_api(
            '/index.php/ocm/notifications', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
