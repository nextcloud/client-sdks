# coding: utf-8

"""
    nextcloud

    Nextcloud APIs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import openapi_client
from openapi_client.models.provisioning_api_apps_get_app_info200_response import ProvisioningApiAppsGetAppInfo200Response  # noqa: E501
from openapi_client.rest import ApiException

class TestProvisioningApiAppsGetAppInfo200Response(unittest.TestCase):
    """ProvisioningApiAppsGetAppInfo200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ProvisioningApiAppsGetAppInfo200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProvisioningApiAppsGetAppInfo200Response`
        """
        model = openapi_client.models.provisioning_api_apps_get_app_info200_response.ProvisioningApiAppsGetAppInfo200Response()  # noqa: E501
        if include_optional :
            return ProvisioningApiAppsGetAppInfo200Response(
                ocs = openapi_client.models.provisioning_api_apps_get_app_info_200_response_ocs.provisioning_api_apps_get_app_info_200_response_ocs(
                    meta = openapi_client.models.ocs_meta.OCSMeta(
                        status = '', 
                        statuscode = 56, 
                        message = '', 
                        totalitems = '', 
                        itemsperpage = '', ), 
                    data = openapi_client.models.provisioning_api_app_info.ProvisioningApiAppInfo(
                        active = True, 
                        activity = openapi_client.models.activity.activity(), 
                        author = openapi_client.models.author.author(), 
                        background_jobs = openapi_client.models.background_jobs.background-jobs(), 
                        bugs = openapi_client.models.bugs.bugs(), 
                        category = openapi_client.models.category.category(), 
                        collaboration = openapi_client.models.collaboration.collaboration(), 
                        commands = openapi_client.models.commands.commands(), 
                        default_enable = openapi_client.models.default_enable.default_enable(), 
                        dependencies = openapi_client.models.dependencies.dependencies(), 
                        description = '', 
                        discussion = openapi_client.models.discussion.discussion(), 
                        documentation = openapi_client.models.documentation.documentation(), 
                        groups = openapi_client.models.groups.groups(), 
                        id = '', 
                        info = openapi_client.models.info.info(), 
                        internal = True, 
                        level = 56, 
                        licence = openapi_client.models.licence.licence(), 
                        name = '', 
                        namespace = openapi_client.models.namespace.namespace(), 
                        navigations = openapi_client.models.navigations.navigations(), 
                        preview = openapi_client.models.preview.preview(), 
                        preview_as_icon = True, 
                        public = openapi_client.models.public.public(), 
                        remote = openapi_client.models.remote.remote(), 
                        removable = True, 
                        repair_steps = openapi_client.models.repair_steps.repair-steps(), 
                        repository = openapi_client.models.repository.repository(), 
                        sabre = openapi_client.models.sabre.sabre(), 
                        screenshot = openapi_client.models.screenshot.screenshot(), 
                        settings = openapi_client.models.settings.settings(), 
                        summary = '', 
                        trash = openapi_client.models.trash.trash(), 
                        two_factor_providers = openapi_client.models.two_factor_providers.two-factor-providers(), 
                        types = openapi_client.models.types.types(), 
                        version = '', 
                        versions = openapi_client.models.versions.versions(), 
                        website = openapi_client.models.website.website(), ), )
            )
        else :
            return ProvisioningApiAppsGetAppInfo200Response(
                ocs = openapi_client.models.provisioning_api_apps_get_app_info_200_response_ocs.provisioning_api_apps_get_app_info_200_response_ocs(
                    meta = openapi_client.models.ocs_meta.OCSMeta(
                        status = '', 
                        statuscode = 56, 
                        message = '', 
                        totalitems = '', 
                        itemsperpage = '', ), 
                    data = openapi_client.models.provisioning_api_app_info.ProvisioningApiAppInfo(
                        active = True, 
                        activity = openapi_client.models.activity.activity(), 
                        author = openapi_client.models.author.author(), 
                        background_jobs = openapi_client.models.background_jobs.background-jobs(), 
                        bugs = openapi_client.models.bugs.bugs(), 
                        category = openapi_client.models.category.category(), 
                        collaboration = openapi_client.models.collaboration.collaboration(), 
                        commands = openapi_client.models.commands.commands(), 
                        default_enable = openapi_client.models.default_enable.default_enable(), 
                        dependencies = openapi_client.models.dependencies.dependencies(), 
                        description = '', 
                        discussion = openapi_client.models.discussion.discussion(), 
                        documentation = openapi_client.models.documentation.documentation(), 
                        groups = openapi_client.models.groups.groups(), 
                        id = '', 
                        info = openapi_client.models.info.info(), 
                        internal = True, 
                        level = 56, 
                        licence = openapi_client.models.licence.licence(), 
                        name = '', 
                        namespace = openapi_client.models.namespace.namespace(), 
                        navigations = openapi_client.models.navigations.navigations(), 
                        preview = openapi_client.models.preview.preview(), 
                        preview_as_icon = True, 
                        public = openapi_client.models.public.public(), 
                        remote = openapi_client.models.remote.remote(), 
                        removable = True, 
                        repair_steps = openapi_client.models.repair_steps.repair-steps(), 
                        repository = openapi_client.models.repository.repository(), 
                        sabre = openapi_client.models.sabre.sabre(), 
                        screenshot = openapi_client.models.screenshot.screenshot(), 
                        settings = openapi_client.models.settings.settings(), 
                        summary = '', 
                        trash = openapi_client.models.trash.trash(), 
                        two_factor_providers = openapi_client.models.two_factor_providers.two-factor-providers(), 
                        types = openapi_client.models.types.types(), 
                        version = '', 
                        versions = openapi_client.models.versions.versions(), 
                        website = openapi_client.models.website.website(), ), ),
        )
        """

    def testProvisioningApiAppsGetAppInfo200Response(self):
        """Test ProvisioningApiAppsGetAppInfo200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
