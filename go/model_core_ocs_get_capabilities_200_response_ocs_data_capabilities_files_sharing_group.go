/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup{}

// CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup struct for CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup
type CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup struct {
	Enabled bool `json:"enabled"`
	ExpireDate *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate `json:"expire_date,omitempty"`
}

// NewCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup instantiates a new CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup(enabled bool) *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup {
	this := CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup{}
	this.Enabled = enabled
	return &this
}

// NewCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroupWithDefaults instantiates a new CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroupWithDefaults() *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup {
	this := CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) SetEnabled(v bool) {
	o.Enabled = v
}

// GetExpireDate returns the ExpireDate field value if set, zero value otherwise.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) GetExpireDate() CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate {
	if o == nil || IsNil(o.ExpireDate) {
		var ret CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate
		return ret
	}
	return *o.ExpireDate
}

// GetExpireDateOk returns a tuple with the ExpireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) GetExpireDateOk() (*CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate, bool) {
	if o == nil || IsNil(o.ExpireDate) {
		return nil, false
	}
	return o.ExpireDate, true
}

// HasExpireDate returns a boolean if a field has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) HasExpireDate() bool {
	if o != nil && !IsNil(o.ExpireDate) {
		return true
	}

	return false
}

// SetExpireDate gets a reference to the given CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate and assigns it to the ExpireDate field.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) SetExpireDate(v CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate) {
	o.ExpireDate = &v
}

func (o CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.ExpireDate) {
		toSerialize["expire_date"] = o.ExpireDate
	}
	return toSerialize, nil
}

type NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup struct {
	value *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup
	isSet bool
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) Get() *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup {
	return v.value
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) Set(val *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup(val *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup {
	return &NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup{value: val, isSet: true}
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


