/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// Oauth2OauthApiApiService Oauth2OauthApiApi service
type Oauth2OauthApiApiService service

type ApiOauth2OauthApiGetTokenRequest struct {
	ctx context.Context
	ApiService *Oauth2OauthApiApiService
	grantType *string
	code *string
	refreshToken *string
	clientId *string
	clientSecret *string
}

// Token type that should be granted
func (r ApiOauth2OauthApiGetTokenRequest) GrantType(grantType string) ApiOauth2OauthApiGetTokenRequest {
	r.grantType = &grantType
	return r
}

// Code of the flow
func (r ApiOauth2OauthApiGetTokenRequest) Code(code string) ApiOauth2OauthApiGetTokenRequest {
	r.code = &code
	return r
}

// Refresh token
func (r ApiOauth2OauthApiGetTokenRequest) RefreshToken(refreshToken string) ApiOauth2OauthApiGetTokenRequest {
	r.refreshToken = &refreshToken
	return r
}

// Client ID
func (r ApiOauth2OauthApiGetTokenRequest) ClientId(clientId string) ApiOauth2OauthApiGetTokenRequest {
	r.clientId = &clientId
	return r
}

// Client secret
func (r ApiOauth2OauthApiGetTokenRequest) ClientSecret(clientSecret string) ApiOauth2OauthApiGetTokenRequest {
	r.clientSecret = &clientSecret
	return r
}

func (r ApiOauth2OauthApiGetTokenRequest) Execute() (*Oauth2OauthApiGetToken200Response, *http.Response, error) {
	return r.ApiService.Oauth2OauthApiGetTokenExecute(r)
}

/*
Oauth2OauthApiGetToken Get a token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOauth2OauthApiGetTokenRequest
*/
func (a *Oauth2OauthApiApiService) Oauth2OauthApiGetToken(ctx context.Context) ApiOauth2OauthApiGetTokenRequest {
	return ApiOauth2OauthApiGetTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Oauth2OauthApiGetToken200Response
func (a *Oauth2OauthApiApiService) Oauth2OauthApiGetTokenExecute(r ApiOauth2OauthApiGetTokenRequest) (*Oauth2OauthApiGetToken200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Oauth2OauthApiGetToken200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2OauthApiApiService.Oauth2OauthApiGetToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/oauth2/api/v1/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.grantType == nil {
		return localVarReturnValue, nil, reportError("grantType is required and must be specified")
	}
	if r.code == nil {
		return localVarReturnValue, nil, reportError("code is required and must be specified")
	}
	if r.refreshToken == nil {
		return localVarReturnValue, nil, reportError("refreshToken is required and must be specified")
	}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.clientSecret == nil {
		return localVarReturnValue, nil, reportError("clientSecret is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "grant_type", r.grantType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "refresh_token", r.refreshToken, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "client_id", r.clientId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "client_secret", r.clientSecret, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
