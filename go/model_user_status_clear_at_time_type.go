/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserStatusClearAtTimeType the model 'UserStatusClearAtTimeType'
type UserStatusClearAtTimeType string

// List of UserStatusClearAtTimeType
const (
	DAY UserStatusClearAtTimeType = "day"
	WEEK UserStatusClearAtTimeType = "week"
)

// All allowed values of UserStatusClearAtTimeType enum
var AllowedUserStatusClearAtTimeTypeEnumValues = []UserStatusClearAtTimeType{
	"day",
	"week",
}

func (v *UserStatusClearAtTimeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserStatusClearAtTimeType(value)
	for _, existing := range AllowedUserStatusClearAtTimeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserStatusClearAtTimeType", value)
}

// NewUserStatusClearAtTimeTypeFromValue returns a pointer to a valid UserStatusClearAtTimeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserStatusClearAtTimeTypeFromValue(v string) (*UserStatusClearAtTimeType, error) {
	ev := UserStatusClearAtTimeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserStatusClearAtTimeType: valid values are %v", v, AllowedUserStatusClearAtTimeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserStatusClearAtTimeType) IsValid() bool {
	for _, existing := range AllowedUserStatusClearAtTimeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserStatusClearAtTimeType value
func (v UserStatusClearAtTimeType) Ptr() *UserStatusClearAtTimeType {
	return &v
}

type NullableUserStatusClearAtTimeType struct {
	value *UserStatusClearAtTimeType
	isSet bool
}

func (v NullableUserStatusClearAtTimeType) Get() *UserStatusClearAtTimeType {
	return v.value
}

func (v *NullableUserStatusClearAtTimeType) Set(val *UserStatusClearAtTimeType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStatusClearAtTimeType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStatusClearAtTimeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStatusClearAtTimeType(val *UserStatusClearAtTimeType) *NullableUserStatusClearAtTimeType {
	return &NullableUserStatusClearAtTimeType{value: val, isSet: true}
}

func (v NullableUserStatusClearAtTimeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStatusClearAtTimeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

