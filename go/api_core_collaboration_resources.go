/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CoreCollaborationResourcesApiService CoreCollaborationResourcesApi service
type CoreCollaborationResourcesApiService service

type ApiCoreCollaborationResourcesAddResourceRequest struct {
	ctx context.Context
	ApiService *CoreCollaborationResourcesApiService
	resourceType *string
	resourceId *string
	collectionId int64
	oCSAPIRequest *string
}

// Name of the resource
func (r ApiCoreCollaborationResourcesAddResourceRequest) ResourceType(resourceType string) ApiCoreCollaborationResourcesAddResourceRequest {
	r.resourceType = &resourceType
	return r
}

// ID of the resource
func (r ApiCoreCollaborationResourcesAddResourceRequest) ResourceId(resourceId string) ApiCoreCollaborationResourcesAddResourceRequest {
	r.resourceId = &resourceId
	return r
}

func (r ApiCoreCollaborationResourcesAddResourceRequest) OCSAPIRequest(oCSAPIRequest string) ApiCoreCollaborationResourcesAddResourceRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiCoreCollaborationResourcesAddResourceRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesAddResourceExecute(r)
}

/*
CoreCollaborationResourcesAddResource Add a resource to a collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param collectionId ID of the collection
 @return ApiCoreCollaborationResourcesAddResourceRequest
*/
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesAddResource(ctx context.Context, collectionId int64) ApiCoreCollaborationResourcesAddResourceRequest {
	return ApiCoreCollaborationResourcesAddResourceRequest{
		ApiService: a,
		ctx: ctx,
		collectionId: collectionId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesAddResourceExecute(r ApiCoreCollaborationResourcesAddResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesApiService.CoreCollaborationResourcesAddResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/{collectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"collectionId"+"}", url.PathEscape(parameterValueToString(r.collectionId, "collectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceId == nil {
		return localVarReturnValue, nil, reportError("resourceId is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType", r.resourceType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceId", r.resourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest struct {
	ctx context.Context
	ApiService *CoreCollaborationResourcesApiService
	name *string
	baseResourceType string
	baseResourceId string
	oCSAPIRequest *string
}

// Name of the collection
func (r ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest) Name(name string) ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest {
	r.name = &name
	return r
}

func (r ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest) OCSAPIRequest(oCSAPIRequest string) ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesCreateCollectionOnResourceExecute(r)
}

/*
CoreCollaborationResourcesCreateCollectionOnResource Create a collection for a resource

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param baseResourceType Type of the base resource
 @param baseResourceId ID of the base resource
 @return ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest
*/
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesCreateCollectionOnResource(ctx context.Context, baseResourceType string, baseResourceId string) ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest {
	return ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest{
		ApiService: a,
		ctx: ctx,
		baseResourceType: baseResourceType,
		baseResourceId: baseResourceId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesCreateCollectionOnResourceExecute(r ApiCoreCollaborationResourcesCreateCollectionOnResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesApiService.CoreCollaborationResourcesCreateCollectionOnResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"baseResourceType"+"}", url.PathEscape(parameterValueToString(r.baseResourceType, "baseResourceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"baseResourceId"+"}", url.PathEscape(parameterValueToString(r.baseResourceId, "baseResourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreCollaborationResourcesGetCollectionsByResourceRequest struct {
	ctx context.Context
	ApiService *CoreCollaborationResourcesApiService
	resourceType string
	resourceId string
	oCSAPIRequest *string
}

func (r ApiCoreCollaborationResourcesGetCollectionsByResourceRequest) OCSAPIRequest(oCSAPIRequest string) ApiCoreCollaborationResourcesGetCollectionsByResourceRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiCoreCollaborationResourcesGetCollectionsByResourceRequest) Execute() (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesGetCollectionsByResourceExecute(r)
}

/*
CoreCollaborationResourcesGetCollectionsByResource Get collections by resource

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourceType Type of the resource
 @param resourceId ID of the resource
 @return ApiCoreCollaborationResourcesGetCollectionsByResourceRequest
*/
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesGetCollectionsByResource(ctx context.Context, resourceType string, resourceId string) ApiCoreCollaborationResourcesGetCollectionsByResourceRequest {
	return ApiCoreCollaborationResourcesGetCollectionsByResourceRequest{
		ApiService: a,
		ctx: ctx,
		resourceType: resourceType,
		resourceId: resourceId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesSearchCollections200Response
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesGetCollectionsByResourceExecute(r ApiCoreCollaborationResourcesGetCollectionsByResourceRequest) (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesSearchCollections200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesApiService.CoreCollaborationResourcesGetCollectionsByResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/{resourceType}/{resourceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourceType"+"}", url.PathEscape(parameterValueToString(r.resourceType, "resourceType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceId"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreCollaborationResourcesListCollectionRequest struct {
	ctx context.Context
	ApiService *CoreCollaborationResourcesApiService
	collectionId int64
	oCSAPIRequest *string
}

func (r ApiCoreCollaborationResourcesListCollectionRequest) OCSAPIRequest(oCSAPIRequest string) ApiCoreCollaborationResourcesListCollectionRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiCoreCollaborationResourcesListCollectionRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesListCollectionExecute(r)
}

/*
CoreCollaborationResourcesListCollection Get a collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param collectionId ID of the collection
 @return ApiCoreCollaborationResourcesListCollectionRequest
*/
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesListCollection(ctx context.Context, collectionId int64) ApiCoreCollaborationResourcesListCollectionRequest {
	return ApiCoreCollaborationResourcesListCollectionRequest{
		ApiService: a,
		ctx: ctx,
		collectionId: collectionId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesListCollectionExecute(r ApiCoreCollaborationResourcesListCollectionRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesApiService.CoreCollaborationResourcesListCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/{collectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"collectionId"+"}", url.PathEscape(parameterValueToString(r.collectionId, "collectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreCollaborationResourcesRemoveResourceRequest struct {
	ctx context.Context
	ApiService *CoreCollaborationResourcesApiService
	resourceType *string
	resourceId *string
	collectionId int64
	oCSAPIRequest *string
}

// Name of the resource
func (r ApiCoreCollaborationResourcesRemoveResourceRequest) ResourceType(resourceType string) ApiCoreCollaborationResourcesRemoveResourceRequest {
	r.resourceType = &resourceType
	return r
}

// ID of the resource
func (r ApiCoreCollaborationResourcesRemoveResourceRequest) ResourceId(resourceId string) ApiCoreCollaborationResourcesRemoveResourceRequest {
	r.resourceId = &resourceId
	return r
}

func (r ApiCoreCollaborationResourcesRemoveResourceRequest) OCSAPIRequest(oCSAPIRequest string) ApiCoreCollaborationResourcesRemoveResourceRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiCoreCollaborationResourcesRemoveResourceRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesRemoveResourceExecute(r)
}

/*
CoreCollaborationResourcesRemoveResource Remove a resource from a collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param collectionId ID of the collection
 @return ApiCoreCollaborationResourcesRemoveResourceRequest
*/
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesRemoveResource(ctx context.Context, collectionId int64) ApiCoreCollaborationResourcesRemoveResourceRequest {
	return ApiCoreCollaborationResourcesRemoveResourceRequest{
		ApiService: a,
		ctx: ctx,
		collectionId: collectionId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesRemoveResourceExecute(r ApiCoreCollaborationResourcesRemoveResourceRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesApiService.CoreCollaborationResourcesRemoveResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/{collectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"collectionId"+"}", url.PathEscape(parameterValueToString(r.collectionId, "collectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceId == nil {
		return localVarReturnValue, nil, reportError("resourceId is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType", r.resourceType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceId", r.resourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreCollaborationResourcesRenameCollectionRequest struct {
	ctx context.Context
	ApiService *CoreCollaborationResourcesApiService
	collectionName *string
	collectionId int64
	oCSAPIRequest *string
}

// New name
func (r ApiCoreCollaborationResourcesRenameCollectionRequest) CollectionName(collectionName string) ApiCoreCollaborationResourcesRenameCollectionRequest {
	r.collectionName = &collectionName
	return r
}

func (r ApiCoreCollaborationResourcesRenameCollectionRequest) OCSAPIRequest(oCSAPIRequest string) ApiCoreCollaborationResourcesRenameCollectionRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiCoreCollaborationResourcesRenameCollectionRequest) Execute() (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesRenameCollectionExecute(r)
}

/*
CoreCollaborationResourcesRenameCollection Rename a collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param collectionId ID of the collection
 @return ApiCoreCollaborationResourcesRenameCollectionRequest
*/
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesRenameCollection(ctx context.Context, collectionId int64) ApiCoreCollaborationResourcesRenameCollectionRequest {
	return ApiCoreCollaborationResourcesRenameCollectionRequest{
		ApiService: a,
		ctx: ctx,
		collectionId: collectionId,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesListCollection200Response
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesRenameCollectionExecute(r ApiCoreCollaborationResourcesRenameCollectionRequest) (*CoreCollaborationResourcesListCollection200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesListCollection200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesApiService.CoreCollaborationResourcesRenameCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/{collectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"collectionId"+"}", url.PathEscape(parameterValueToString(r.collectionId, "collectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.collectionName == nil {
		return localVarReturnValue, nil, reportError("collectionName is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "collectionName", r.collectionName, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreCollaborationResourcesSearchCollectionsRequest struct {
	ctx context.Context
	ApiService *CoreCollaborationResourcesApiService
	filter string
	oCSAPIRequest *string
}

func (r ApiCoreCollaborationResourcesSearchCollectionsRequest) OCSAPIRequest(oCSAPIRequest string) ApiCoreCollaborationResourcesSearchCollectionsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiCoreCollaborationResourcesSearchCollectionsRequest) Execute() (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error) {
	return r.ApiService.CoreCollaborationResourcesSearchCollectionsExecute(r)
}

/*
CoreCollaborationResourcesSearchCollections Search for collections

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param filter Filter collections
 @return ApiCoreCollaborationResourcesSearchCollectionsRequest
*/
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesSearchCollections(ctx context.Context, filter string) ApiCoreCollaborationResourcesSearchCollectionsRequest {
	return ApiCoreCollaborationResourcesSearchCollectionsRequest{
		ApiService: a,
		ctx: ctx,
		filter: filter,
	}
}

// Execute executes the request
//  @return CoreCollaborationResourcesSearchCollections200Response
func (a *CoreCollaborationResourcesApiService) CoreCollaborationResourcesSearchCollectionsExecute(r ApiCoreCollaborationResourcesSearchCollectionsRequest) (*CoreCollaborationResourcesSearchCollections200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreCollaborationResourcesSearchCollections200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreCollaborationResourcesApiService.CoreCollaborationResourcesSearchCollections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/collaboration/resources/collections/search/{filter}"
	localVarPath = strings.Replace(localVarPath, "{"+"filter"+"}", url.PathEscape(parameterValueToString(r.filter, "filter")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
