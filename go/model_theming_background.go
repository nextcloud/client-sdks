/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ThemingBackground type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThemingBackground{}

// ThemingBackground struct for ThemingBackground
type ThemingBackground struct {
	BackgroundImage NullableString `json:"backgroundImage"`
	BackgroundColor string `json:"backgroundColor"`
	Version int64 `json:"version"`
}

// NewThemingBackground instantiates a new ThemingBackground object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThemingBackground(backgroundImage NullableString, backgroundColor string, version int64) *ThemingBackground {
	this := ThemingBackground{}
	this.BackgroundImage = backgroundImage
	this.BackgroundColor = backgroundColor
	this.Version = version
	return &this
}

// NewThemingBackgroundWithDefaults instantiates a new ThemingBackground object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThemingBackgroundWithDefaults() *ThemingBackground {
	this := ThemingBackground{}
	return &this
}

// GetBackgroundImage returns the BackgroundImage field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ThemingBackground) GetBackgroundImage() string {
	if o == nil || o.BackgroundImage.Get() == nil {
		var ret string
		return ret
	}

	return *o.BackgroundImage.Get()
}

// GetBackgroundImageOk returns a tuple with the BackgroundImage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThemingBackground) GetBackgroundImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackgroundImage.Get(), o.BackgroundImage.IsSet()
}

// SetBackgroundImage sets field value
func (o *ThemingBackground) SetBackgroundImage(v string) {
	o.BackgroundImage.Set(&v)
}

// GetBackgroundColor returns the BackgroundColor field value
func (o *ThemingBackground) GetBackgroundColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackgroundColor
}

// GetBackgroundColorOk returns a tuple with the BackgroundColor field value
// and a boolean to check if the value has been set.
func (o *ThemingBackground) GetBackgroundColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackgroundColor, true
}

// SetBackgroundColor sets field value
func (o *ThemingBackground) SetBackgroundColor(v string) {
	o.BackgroundColor = v
}

// GetVersion returns the Version field value
func (o *ThemingBackground) GetVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ThemingBackground) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ThemingBackground) SetVersion(v int64) {
	o.Version = v
}

func (o ThemingBackground) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThemingBackground) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backgroundImage"] = o.BackgroundImage.Get()
	toSerialize["backgroundColor"] = o.BackgroundColor
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableThemingBackground struct {
	value *ThemingBackground
	isSet bool
}

func (v NullableThemingBackground) Get() *ThemingBackground {
	return v.value
}

func (v *NullableThemingBackground) Set(val *ThemingBackground) {
	v.value = val
	v.isSet = true
}

func (v NullableThemingBackground) IsSet() bool {
	return v.isSet
}

func (v *NullableThemingBackground) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThemingBackground(val *ThemingBackground) *NullableThemingBackground {
	return &NullableThemingBackground{value: val, isSet: true}
}

func (v NullableThemingBackground) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThemingBackground) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


