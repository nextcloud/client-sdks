/*
nextcloud

Testing ProvisioningApiAppConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nextcloud/api-sdk"
)

func Test_openapi_ProvisioningApiAppConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProvisioningApiAppConfigApiService ProvisioningApiAppConfigDeleteKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string
		var key string

		resp, httpRes, err := apiClient.ProvisioningApiAppConfigApi.ProvisioningApiAppConfigDeleteKey(context.Background(), app, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiAppConfigApiService ProvisioningApiAppConfigGetApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiAppConfigApi.ProvisioningApiAppConfigGetApps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiAppConfigApiService ProvisioningApiAppConfigGetKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string

		resp, httpRes, err := apiClient.ProvisioningApiAppConfigApi.ProvisioningApiAppConfigGetKeys(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiAppConfigApiService ProvisioningApiAppConfigGetValue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string
		var key string

		resp, httpRes, err := apiClient.ProvisioningApiAppConfigApi.ProvisioningApiAppConfigGetValue(context.Background(), app, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiAppConfigApiService ProvisioningApiAppConfigSetValue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string
		var key string

		resp, httpRes, err := apiClient.ProvisioningApiAppConfigApi.ProvisioningApiAppConfigSetValue(context.Background(), app, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
