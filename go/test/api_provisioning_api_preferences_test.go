/*
nextcloud

Testing ProvisioningApiPreferencesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nextcloud/api-sdk"
)

func Test_openapi_ProvisioningApiPreferencesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProvisioningApiPreferencesApiService ProvisioningApiPreferencesDeleteMultiplePreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ProvisioningApiPreferencesApi.ProvisioningApiPreferencesDeleteMultiplePreference(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiPreferencesApiService ProvisioningApiPreferencesDeletePreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var configKey string

		resp, httpRes, err := apiClient.ProvisioningApiPreferencesApi.ProvisioningApiPreferencesDeletePreference(context.Background(), appId, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiPreferencesApiService ProvisioningApiPreferencesSetMultiplePreferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.ProvisioningApiPreferencesApi.ProvisioningApiPreferencesSetMultiplePreferences(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiPreferencesApiService ProvisioningApiPreferencesSetPreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var configKey string

		resp, httpRes, err := apiClient.ProvisioningApiPreferencesApi.ProvisioningApiPreferencesSetPreference(context.Background(), appId, configKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
