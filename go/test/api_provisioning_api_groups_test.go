/*
nextcloud

Testing ProvisioningApiGroupsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nextcloud/api-sdk"
)

func Test_openapi_ProvisioningApiGroupsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsAddGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsAddGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsDeleteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsDeleteGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsGetGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsGetGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsGetGroupUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsGetGroupUsers(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsGetGroupUsersDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsGetGroupUsersDetails(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsGetGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsGetGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsGetGroupsDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsGetGroupsDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsGetSubAdminsOfGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsGetSubAdminsOfGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiGroupsApiService ProvisioningApiGroupsUpdateGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.ProvisioningApiGroupsApi.ProvisioningApiGroupsUpdateGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
