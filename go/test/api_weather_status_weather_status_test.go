/*
nextcloud

Testing WeatherStatusWeatherStatusApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nextcloud/api-sdk"
)

func Test_openapi_WeatherStatusWeatherStatusApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WeatherStatusWeatherStatusApiService WeatherStatusWeatherStatusGetFavorites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WeatherStatusWeatherStatusApi.WeatherStatusWeatherStatusGetFavorites(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WeatherStatusWeatherStatusApiService WeatherStatusWeatherStatusGetForecast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WeatherStatusWeatherStatusApi.WeatherStatusWeatherStatusGetForecast(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WeatherStatusWeatherStatusApiService WeatherStatusWeatherStatusGetLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WeatherStatusWeatherStatusApi.WeatherStatusWeatherStatusGetLocation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WeatherStatusWeatherStatusApiService WeatherStatusWeatherStatusSetFavorites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WeatherStatusWeatherStatusApi.WeatherStatusWeatherStatusSetFavorites(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WeatherStatusWeatherStatusApiService WeatherStatusWeatherStatusSetLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WeatherStatusWeatherStatusApi.WeatherStatusWeatherStatusSetLocation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WeatherStatusWeatherStatusApiService WeatherStatusWeatherStatusSetMode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WeatherStatusWeatherStatusApi.WeatherStatusWeatherStatusSetMode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WeatherStatusWeatherStatusApiService WeatherStatusWeatherStatusUsePersonalAddress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WeatherStatusWeatherStatusApi.WeatherStatusWeatherStatusUsePersonalAddress(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
