/*
nextcloud

Testing CoreCollaborationResourcesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nextcloud/api-sdk"
)

func Test_openapi_CoreCollaborationResourcesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CoreCollaborationResourcesApiService CoreCollaborationResourcesAddResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.CoreCollaborationResourcesApi.CoreCollaborationResourcesAddResource(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreCollaborationResourcesApiService CoreCollaborationResourcesCreateCollectionOnResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var baseResourceType string
		var baseResourceId string

		resp, httpRes, err := apiClient.CoreCollaborationResourcesApi.CoreCollaborationResourcesCreateCollectionOnResource(context.Background(), baseResourceType, baseResourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreCollaborationResourcesApiService CoreCollaborationResourcesGetCollectionsByResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceType string
		var resourceId string

		resp, httpRes, err := apiClient.CoreCollaborationResourcesApi.CoreCollaborationResourcesGetCollectionsByResource(context.Background(), resourceType, resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreCollaborationResourcesApiService CoreCollaborationResourcesListCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.CoreCollaborationResourcesApi.CoreCollaborationResourcesListCollection(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreCollaborationResourcesApiService CoreCollaborationResourcesRemoveResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.CoreCollaborationResourcesApi.CoreCollaborationResourcesRemoveResource(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreCollaborationResourcesApiService CoreCollaborationResourcesRenameCollection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var collectionId int64

		resp, httpRes, err := apiClient.CoreCollaborationResourcesApi.CoreCollaborationResourcesRenameCollection(context.Background(), collectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreCollaborationResourcesApiService CoreCollaborationResourcesSearchCollections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filter string

		resp, httpRes, err := apiClient.CoreCollaborationResourcesApi.CoreCollaborationResourcesSearchCollections(context.Background(), filter).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
