/*
nextcloud

Testing ProvisioningApiUsersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/nextcloud/api-sdk"
)

func Test_openapi_ProvisioningApiUsersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersAddSubAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersAddSubAdmin(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersAddToGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersAddToGroup(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersAddUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersAddUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersDeleteUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersDeleteUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersDisableUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersDisableUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersEditUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersEditUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersEditUserMultiValue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var collectionName string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersEditUserMultiValue(context.Background(), userId, collectionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersEnableUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersEnableUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersGetCurrentUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersGetCurrentUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersGetEditableFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersGetEditableFields(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersGetEditableFieldsForUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersGetEditableFieldsForUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersGetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersGetUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersGetUserSubAdminGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersGetUserSubAdminGroups(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersGetUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersGetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersGetUsersDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersGetUsersDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersGetUsersGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersGetUsersGroups(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersRemoveFromGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersRemoveFromGroup(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersRemoveSubAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersRemoveSubAdmin(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersResendWelcomeMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersResendWelcomeMessage(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersSearchByPhoneNumbers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersSearchByPhoneNumbers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisioningApiUsersApiService ProvisioningApiUsersWipeUserDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.ProvisioningApiUsersApi.ProvisioningApiUsersWipeUserDevices(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
