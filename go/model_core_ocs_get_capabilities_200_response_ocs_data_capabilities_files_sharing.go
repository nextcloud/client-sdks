/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing{}

// CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing struct for CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
type CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing struct {
	ApiEnabled bool `json:"api_enabled"`
	Public CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic `json:"public"`
	User CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser `json:"user"`
	Resharing bool `json:"resharing"`
	GroupSharing *bool `json:"group_sharing,omitempty"`
	Group *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup `json:"group,omitempty"`
	DefaultPermissions *int64 `json:"default_permissions,omitempty"`
	Federation CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation `json:"federation"`
	Sharee CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee `json:"sharee"`
}

// NewCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing instantiates a new CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing(apiEnabled bool, public CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic, user CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser, resharing bool, federation CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation, sharee CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee) *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing {
	this := CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing{}
	this.ApiEnabled = apiEnabled
	this.Public = public
	this.User = user
	this.Resharing = resharing
	this.Federation = federation
	this.Sharee = sharee
	return &this
}

// NewCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingWithDefaults instantiates a new CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingWithDefaults() *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing {
	this := CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing{}
	return &this
}

// GetApiEnabled returns the ApiEnabled field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetApiEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApiEnabled
}

// GetApiEnabledOk returns a tuple with the ApiEnabled field value
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetApiEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiEnabled, true
}

// SetApiEnabled sets field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetApiEnabled(v bool) {
	o.ApiEnabled = v
}

// GetPublic returns the Public field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetPublic() CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic {
	if o == nil {
		var ret CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetPublicOk() (*CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetPublic(v CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingPublic) {
	o.Public = v
}

// GetUser returns the User field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetUser() CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser {
	if o == nil {
		var ret CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetUserOk() (*CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetUser(v CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUser) {
	o.User = v
}

// GetResharing returns the Resharing field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetResharing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Resharing
}

// GetResharingOk returns a tuple with the Resharing field value
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetResharingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resharing, true
}

// SetResharing sets field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetResharing(v bool) {
	o.Resharing = v
}

// GetGroupSharing returns the GroupSharing field value if set, zero value otherwise.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetGroupSharing() bool {
	if o == nil || IsNil(o.GroupSharing) {
		var ret bool
		return ret
	}
	return *o.GroupSharing
}

// GetGroupSharingOk returns a tuple with the GroupSharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetGroupSharingOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupSharing) {
		return nil, false
	}
	return o.GroupSharing, true
}

// HasGroupSharing returns a boolean if a field has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) HasGroupSharing() bool {
	if o != nil && !IsNil(o.GroupSharing) {
		return true
	}

	return false
}

// SetGroupSharing gets a reference to the given bool and assigns it to the GroupSharing field.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetGroupSharing(v bool) {
	o.GroupSharing = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetGroup() CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup {
	if o == nil || IsNil(o.Group) {
		var ret CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetGroupOk() (*CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup and assigns it to the Group field.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetGroup(v CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingGroup) {
	o.Group = &v
}

// GetDefaultPermissions returns the DefaultPermissions field value if set, zero value otherwise.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetDefaultPermissions() int64 {
	if o == nil || IsNil(o.DefaultPermissions) {
		var ret int64
		return ret
	}
	return *o.DefaultPermissions
}

// GetDefaultPermissionsOk returns a tuple with the DefaultPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetDefaultPermissionsOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultPermissions) {
		return nil, false
	}
	return o.DefaultPermissions, true
}

// HasDefaultPermissions returns a boolean if a field has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) HasDefaultPermissions() bool {
	if o != nil && !IsNil(o.DefaultPermissions) {
		return true
	}

	return false
}

// SetDefaultPermissions gets a reference to the given int64 and assigns it to the DefaultPermissions field.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetDefaultPermissions(v int64) {
	o.DefaultPermissions = &v
}

// GetFederation returns the Federation field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetFederation() CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation {
	if o == nil {
		var ret CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation
		return ret
	}

	return o.Federation
}

// GetFederationOk returns a tuple with the Federation field value
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetFederationOk() (*CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Federation, true
}

// SetFederation sets field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetFederation(v CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingFederation) {
	o.Federation = v
}

// GetSharee returns the Sharee field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetSharee() CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee {
	if o == nil {
		var ret CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee
		return ret
	}

	return o.Sharee
}

// GetShareeOk returns a tuple with the Sharee field value
// and a boolean to check if the value has been set.
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) GetShareeOk() (*CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sharee, true
}

// SetSharee sets field value
func (o *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) SetSharee(v CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingSharee) {
	o.Sharee = v
}

func (o CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_enabled"] = o.ApiEnabled
	toSerialize["public"] = o.Public
	toSerialize["user"] = o.User
	toSerialize["resharing"] = o.Resharing
	if !IsNil(o.GroupSharing) {
		toSerialize["group_sharing"] = o.GroupSharing
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.DefaultPermissions) {
		toSerialize["default_permissions"] = o.DefaultPermissions
	}
	toSerialize["federation"] = o.Federation
	toSerialize["sharee"] = o.Sharee
	return toSerialize, nil
}

type NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing struct {
	value *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing
	isSet bool
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) Get() *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing {
	return v.value
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) Set(val *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing(val *CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing {
	return &NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing{value: val, isSet: true}
}

func (v NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


