/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProvisioningApiGroupsApiService ProvisioningApiGroupsApi service
type ProvisioningApiGroupsApiService service

type ApiProvisioningApiGroupsAddGroupRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	groupid *string
	oCSAPIRequest *string
	displayname *string
}

// ID of the group
func (r ApiProvisioningApiGroupsAddGroupRequest) Groupid(groupid string) ApiProvisioningApiGroupsAddGroupRequest {
	r.groupid = &groupid
	return r
}

func (r ApiProvisioningApiGroupsAddGroupRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsAddGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Display name of the group
func (r ApiProvisioningApiGroupsAddGroupRequest) Displayname(displayname string) ApiProvisioningApiGroupsAddGroupRequest {
	r.displayname = &displayname
	return r
}

func (r ApiProvisioningApiGroupsAddGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsAddGroupExecute(r)
}

/*
ProvisioningApiGroupsAddGroup Create a new group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiGroupsAddGroupRequest
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsAddGroup(ctx context.Context) ApiProvisioningApiGroupsAddGroupRequest {
	return ApiProvisioningApiGroupsAddGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsAddGroupExecute(r ApiProvisioningApiGroupsAddGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsAddGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupid == nil {
		return localVarReturnValue, nil, reportError("groupid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	if r.displayname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayname", r.displayname, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiGroupsDeleteGroupRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	groupId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiGroupsDeleteGroupRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsDeleteGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiGroupsDeleteGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsDeleteGroupExecute(r)
}

/*
ProvisioningApiGroupsDeleteGroup Delete a group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ApiProvisioningApiGroupsDeleteGroupRequest
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsDeleteGroup(ctx context.Context, groupId string) ApiProvisioningApiGroupsDeleteGroupRequest {
	return ApiProvisioningApiGroupsDeleteGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsDeleteGroupExecute(r ApiProvisioningApiGroupsDeleteGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsDeleteGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiGroupsGetGroupRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	groupId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiGroupsGetGroupRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsGetGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiGroupsGetGroupRequest) Execute() (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupExecute(r)
}

/*
ProvisioningApiGroupsGetGroup Get a list of users in the specified group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ApiProvisioningApiGroupsGetGroupRequest

Deprecated
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroup(ctx context.Context, groupId string) ApiProvisioningApiGroupsGetGroupRequest {
	return ApiProvisioningApiGroupsGetGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsers200Response
// Deprecated
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroupExecute(r ApiProvisioningApiGroupsGetGroupRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsGetGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiGroupsGetGroupUsersRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	groupId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiGroupsGetGroupUsersRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsGetGroupUsersRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiGroupsGetGroupUsersRequest) Execute() (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupUsersExecute(r)
}

/*
ProvisioningApiGroupsGetGroupUsers Get a list of users in the specified group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ApiProvisioningApiGroupsGetGroupUsersRequest
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroupUsers(ctx context.Context, groupId string) ApiProvisioningApiGroupsGetGroupUsersRequest {
	return ApiProvisioningApiGroupsGetGroupUsersRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsers200Response
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroupUsersExecute(r ApiProvisioningApiGroupsGetGroupUsersRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsGetGroupUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiGroupsGetGroupUsersDetailsRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	groupId string
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ApiProvisioningApiGroupsGetGroupUsersDetailsRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsGetGroupUsersDetailsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ApiProvisioningApiGroupsGetGroupUsersDetailsRequest) Search(search string) ApiProvisioningApiGroupsGetGroupUsersDetailsRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ApiProvisioningApiGroupsGetGroupUsersDetailsRequest) Limit(limit int64) ApiProvisioningApiGroupsGetGroupUsersDetailsRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ApiProvisioningApiGroupsGetGroupUsersDetailsRequest) Offset(offset int64) ApiProvisioningApiGroupsGetGroupUsersDetailsRequest {
	r.offset = &offset
	return r
}

func (r ApiProvisioningApiGroupsGetGroupUsersDetailsRequest) Execute() (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupUsersDetailsExecute(r)
}

/*
ProvisioningApiGroupsGetGroupUsersDetails Get a list of users details in the specified group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ApiProvisioningApiGroupsGetGroupUsersDetailsRequest
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroupUsersDetails(ctx context.Context, groupId string) ApiProvisioningApiGroupsGetGroupUsersDetailsRequest {
	return ApiProvisioningApiGroupsGetGroupUsersDetailsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsersDetails200Response
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroupUsersDetailsExecute(r ApiProvisioningApiGroupsGetGroupUsersDetailsRequest) (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsersDetails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsGetGroupUsersDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}/users/details"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiGroupsGetGroupsRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ApiProvisioningApiGroupsGetGroupsRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsGetGroupsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ApiProvisioningApiGroupsGetGroupsRequest) Search(search string) ApiProvisioningApiGroupsGetGroupsRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ApiProvisioningApiGroupsGetGroupsRequest) Limit(limit int64) ApiProvisioningApiGroupsGetGroupsRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ApiProvisioningApiGroupsGetGroupsRequest) Offset(offset int64) ApiProvisioningApiGroupsGetGroupsRequest {
	r.offset = &offset
	return r
}

func (r ApiProvisioningApiGroupsGetGroupsRequest) Execute() (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupsExecute(r)
}

/*
ProvisioningApiGroupsGetGroups Get a list of groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiGroupsGetGroupsRequest
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroups(ctx context.Context) ApiProvisioningApiGroupsGetGroupsRequest {
	return ApiProvisioningApiGroupsGetGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroups200Response
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroupsExecute(r ApiProvisioningApiGroupsGetGroupsRequest) (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsGetGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiGroupsGetGroupsDetailsRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ApiProvisioningApiGroupsGetGroupsDetailsRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsGetGroupsDetailsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ApiProvisioningApiGroupsGetGroupsDetailsRequest) Search(search string) ApiProvisioningApiGroupsGetGroupsDetailsRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ApiProvisioningApiGroupsGetGroupsDetailsRequest) Limit(limit int64) ApiProvisioningApiGroupsGetGroupsDetailsRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ApiProvisioningApiGroupsGetGroupsDetailsRequest) Offset(offset int64) ApiProvisioningApiGroupsGetGroupsDetailsRequest {
	r.offset = &offset
	return r
}

func (r ApiProvisioningApiGroupsGetGroupsDetailsRequest) Execute() (*ProvisioningApiGroupsGetGroupsDetails200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetGroupsDetailsExecute(r)
}

/*
ProvisioningApiGroupsGetGroupsDetails Get a list of groups details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiGroupsGetGroupsDetailsRequest
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroupsDetails(ctx context.Context) ApiProvisioningApiGroupsGetGroupsDetailsRequest {
	return ApiProvisioningApiGroupsGetGroupsDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupsDetails200Response
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetGroupsDetailsExecute(r ApiProvisioningApiGroupsGetGroupsDetailsRequest) (*ProvisioningApiGroupsGetGroupsDetails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupsDetails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsGetGroupsDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiGroupsGetSubAdminsOfGroupRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	groupId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiGroupsGetSubAdminsOfGroupRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsGetSubAdminsOfGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiGroupsGetSubAdminsOfGroupRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsGetSubAdminsOfGroupExecute(r)
}

/*
ProvisioningApiGroupsGetSubAdminsOfGroup Get the list of user IDs that are a subadmin of the group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ApiProvisioningApiGroupsGetSubAdminsOfGroupRequest
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetSubAdminsOfGroup(ctx context.Context, groupId string) ApiProvisioningApiGroupsGetSubAdminsOfGroupRequest {
	return ApiProvisioningApiGroupsGetSubAdminsOfGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsGetSubAdminsOfGroupExecute(r ApiProvisioningApiGroupsGetSubAdminsOfGroupRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsGetSubAdminsOfGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}/subadmins"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiGroupsUpdateGroupRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiGroupsApiService
	key *string
	value *string
	groupId string
	oCSAPIRequest *string
}

// Key to update, only &#39;displayname&#39;
func (r ApiProvisioningApiGroupsUpdateGroupRequest) Key(key string) ApiProvisioningApiGroupsUpdateGroupRequest {
	r.key = &key
	return r
}

// New value for the key
func (r ApiProvisioningApiGroupsUpdateGroupRequest) Value(value string) ApiProvisioningApiGroupsUpdateGroupRequest {
	r.value = &value
	return r
}

func (r ApiProvisioningApiGroupsUpdateGroupRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiGroupsUpdateGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiGroupsUpdateGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiGroupsUpdateGroupExecute(r)
}

/*
ProvisioningApiGroupsUpdateGroup Update a group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId ID of the group
 @return ApiProvisioningApiGroupsUpdateGroupRequest
*/
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsUpdateGroup(ctx context.Context, groupId string) ApiProvisioningApiGroupsUpdateGroupRequest {
	return ApiProvisioningApiGroupsUpdateGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiGroupsApiService) ProvisioningApiGroupsUpdateGroupExecute(r ApiProvisioningApiGroupsUpdateGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiGroupsApiService.ProvisioningApiGroupsUpdateGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.key == nil {
		return localVarReturnValue, nil, reportError("key is required and must be specified")
	}
	if r.value == nil {
		return localVarReturnValue, nil, reportError("value is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
