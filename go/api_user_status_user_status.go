/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserStatusUserStatusApiService UserStatusUserStatusApi service
type UserStatusUserStatusApiService service

type ApiUserStatusUserStatusClearMessageRequest struct {
	ctx context.Context
	ApiService *UserStatusUserStatusApiService
	oCSAPIRequest *string
}

func (r ApiUserStatusUserStatusClearMessageRequest) OCSAPIRequest(oCSAPIRequest string) ApiUserStatusUserStatusClearMessageRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiUserStatusUserStatusClearMessageRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusClearMessageExecute(r)
}

/*
UserStatusUserStatusClearMessage Clear the message of the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUserStatusUserStatusClearMessageRequest
*/
func (a *UserStatusUserStatusApiService) UserStatusUserStatusClearMessage(ctx context.Context) ApiUserStatusUserStatusClearMessageRequest {
	return ApiUserStatusUserStatusClearMessageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *UserStatusUserStatusApiService) UserStatusUserStatusClearMessageExecute(r ApiUserStatusUserStatusClearMessageRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusApiService.UserStatusUserStatusClearMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/message"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserStatusUserStatusGetStatusRequest struct {
	ctx context.Context
	ApiService *UserStatusUserStatusApiService
	oCSAPIRequest *string
}

func (r ApiUserStatusUserStatusGetStatusRequest) OCSAPIRequest(oCSAPIRequest string) ApiUserStatusUserStatusGetStatusRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiUserStatusUserStatusGetStatusRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusGetStatusExecute(r)
}

/*
UserStatusUserStatusGetStatus Get the status of the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUserStatusUserStatusGetStatusRequest
*/
func (a *UserStatusUserStatusApiService) UserStatusUserStatusGetStatus(ctx context.Context) ApiUserStatusUserStatusGetStatusRequest {
	return ApiUserStatusUserStatusGetStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusApiService) UserStatusUserStatusGetStatusExecute(r ApiUserStatusUserStatusGetStatusRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusApiService.UserStatusUserStatusGetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserStatusUserStatusRevertStatusRequest struct {
	ctx context.Context
	ApiService *UserStatusUserStatusApiService
	messageId string
	oCSAPIRequest *string
}

func (r ApiUserStatusUserStatusRevertStatusRequest) OCSAPIRequest(oCSAPIRequest string) ApiUserStatusUserStatusRevertStatusRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiUserStatusUserStatusRevertStatusRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusRevertStatusExecute(r)
}

/*
UserStatusUserStatusRevertStatus Revert the status to the previous status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param messageId ID of the message to delete
 @return ApiUserStatusUserStatusRevertStatusRequest
*/
func (a *UserStatusUserStatusApiService) UserStatusUserStatusRevertStatus(ctx context.Context, messageId string) ApiUserStatusUserStatusRevertStatusRequest {
	return ApiUserStatusUserStatusRevertStatusRequest{
		ApiService: a,
		ctx: ctx,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusApiService) UserStatusUserStatusRevertStatusExecute(r ApiUserStatusUserStatusRevertStatusRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusApiService.UserStatusUserStatusRevertStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/revert/{messageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"messageId"+"}", url.PathEscape(parameterValueToString(r.messageId, "messageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserStatusUserStatusSetCustomMessageRequest struct {
	ctx context.Context
	ApiService *UserStatusUserStatusApiService
	oCSAPIRequest *string
	statusIcon *string
	message *string
	clearAt *int64
}

func (r ApiUserStatusUserStatusSetCustomMessageRequest) OCSAPIRequest(oCSAPIRequest string) ApiUserStatusUserStatusSetCustomMessageRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Icon of the status
func (r ApiUserStatusUserStatusSetCustomMessageRequest) StatusIcon(statusIcon string) ApiUserStatusUserStatusSetCustomMessageRequest {
	r.statusIcon = &statusIcon
	return r
}

// Message of the status
func (r ApiUserStatusUserStatusSetCustomMessageRequest) Message(message string) ApiUserStatusUserStatusSetCustomMessageRequest {
	r.message = &message
	return r
}

// When the message should be cleared
func (r ApiUserStatusUserStatusSetCustomMessageRequest) ClearAt(clearAt int64) ApiUserStatusUserStatusSetCustomMessageRequest {
	r.clearAt = &clearAt
	return r
}

func (r ApiUserStatusUserStatusSetCustomMessageRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusSetCustomMessageExecute(r)
}

/*
UserStatusUserStatusSetCustomMessage Set the message to a custom message for the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUserStatusUserStatusSetCustomMessageRequest
*/
func (a *UserStatusUserStatusApiService) UserStatusUserStatusSetCustomMessage(ctx context.Context) ApiUserStatusUserStatusSetCustomMessageRequest {
	return ApiUserStatusUserStatusSetCustomMessageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusApiService) UserStatusUserStatusSetCustomMessageExecute(r ApiUserStatusUserStatusSetCustomMessageRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusApiService.UserStatusUserStatusSetCustomMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/message/custom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.statusIcon != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statusIcon", r.statusIcon, "")
	}
	if r.message != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message", r.message, "")
	}
	if r.clearAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clearAt", r.clearAt, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserStatusUserStatusSetPredefinedMessageRequest struct {
	ctx context.Context
	ApiService *UserStatusUserStatusApiService
	messageId *string
	oCSAPIRequest *string
	clearAt *int64
}

// ID of the predefined message
func (r ApiUserStatusUserStatusSetPredefinedMessageRequest) MessageId(messageId string) ApiUserStatusUserStatusSetPredefinedMessageRequest {
	r.messageId = &messageId
	return r
}

func (r ApiUserStatusUserStatusSetPredefinedMessageRequest) OCSAPIRequest(oCSAPIRequest string) ApiUserStatusUserStatusSetPredefinedMessageRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// When the message should be cleared
func (r ApiUserStatusUserStatusSetPredefinedMessageRequest) ClearAt(clearAt int64) ApiUserStatusUserStatusSetPredefinedMessageRequest {
	r.clearAt = &clearAt
	return r
}

func (r ApiUserStatusUserStatusSetPredefinedMessageRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusSetPredefinedMessageExecute(r)
}

/*
UserStatusUserStatusSetPredefinedMessage Set the message to a predefined message for the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUserStatusUserStatusSetPredefinedMessageRequest
*/
func (a *UserStatusUserStatusApiService) UserStatusUserStatusSetPredefinedMessage(ctx context.Context) ApiUserStatusUserStatusSetPredefinedMessageRequest {
	return ApiUserStatusUserStatusSetPredefinedMessageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusApiService) UserStatusUserStatusSetPredefinedMessageExecute(r ApiUserStatusUserStatusSetPredefinedMessageRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusApiService.UserStatusUserStatusSetPredefinedMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/message/predefined"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.messageId == nil {
		return localVarReturnValue, nil, reportError("messageId is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "messageId", r.messageId, "")
	if r.clearAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clearAt", r.clearAt, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserStatusUserStatusSetStatusRequest struct {
	ctx context.Context
	ApiService *UserStatusUserStatusApiService
	statusType *string
	oCSAPIRequest *string
}

// The new status type
func (r ApiUserStatusUserStatusSetStatusRequest) StatusType(statusType string) ApiUserStatusUserStatusSetStatusRequest {
	r.statusType = &statusType
	return r
}

func (r ApiUserStatusUserStatusSetStatusRequest) OCSAPIRequest(oCSAPIRequest string) ApiUserStatusUserStatusSetStatusRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiUserStatusUserStatusSetStatusRequest) Execute() (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	return r.ApiService.UserStatusUserStatusSetStatusExecute(r)
}

/*
UserStatusUserStatusSetStatus Update the status type of the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUserStatusUserStatusSetStatusRequest
*/
func (a *UserStatusUserStatusApiService) UserStatusUserStatusSetStatus(ctx context.Context) ApiUserStatusUserStatusSetStatusRequest {
	return ApiUserStatusUserStatusSetStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserStatusUserStatusGetStatus200Response
func (a *UserStatusUserStatusApiService) UserStatusUserStatusSetStatusExecute(r ApiUserStatusUserStatusSetStatusRequest) (*UserStatusUserStatusGetStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserStatusUserStatusGetStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserStatusUserStatusApiService.UserStatusUserStatusSetStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/user_status/api/v1/user_status/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.statusType == nil {
		return localVarReturnValue, nil, reportError("statusType is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "statusType", r.statusType, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
