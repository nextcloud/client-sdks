/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilesSharingRemoteShare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesSharingRemoteShare{}

// FilesSharingRemoteShare struct for FilesSharingRemoteShare
type FilesSharingRemoteShare struct {
	Accepted bool `json:"accepted"`
	FileId NullableInt64 `json:"file_id"`
	Id int64 `json:"id"`
	Mimetype NullableString `json:"mimetype"`
	Mountpoint string `json:"mountpoint"`
	Mtime NullableInt64 `json:"mtime"`
	Name string `json:"name"`
	Owner string `json:"owner"`
	Parent NullableInt64 `json:"parent"`
	Permissions NullableInt64 `json:"permissions"`
	Remote string `json:"remote"`
	RemoteId string `json:"remote_id"`
	ShareToken string `json:"share_token"`
	ShareType int64 `json:"share_type"`
	Type NullableString `json:"type"`
	User string `json:"user"`
}

// NewFilesSharingRemoteShare instantiates a new FilesSharingRemoteShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesSharingRemoteShare(accepted bool, fileId NullableInt64, id int64, mimetype NullableString, mountpoint string, mtime NullableInt64, name string, owner string, parent NullableInt64, permissions NullableInt64, remote string, remoteId string, shareToken string, shareType int64, type_ NullableString, user string) *FilesSharingRemoteShare {
	this := FilesSharingRemoteShare{}
	this.Accepted = accepted
	this.FileId = fileId
	this.Id = id
	this.Mimetype = mimetype
	this.Mountpoint = mountpoint
	this.Mtime = mtime
	this.Name = name
	this.Owner = owner
	this.Parent = parent
	this.Permissions = permissions
	this.Remote = remote
	this.RemoteId = remoteId
	this.ShareToken = shareToken
	this.ShareType = shareType
	this.Type = type_
	this.User = user
	return &this
}

// NewFilesSharingRemoteShareWithDefaults instantiates a new FilesSharingRemoteShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesSharingRemoteShareWithDefaults() *FilesSharingRemoteShare {
	this := FilesSharingRemoteShare{}
	return &this
}

// GetAccepted returns the Accepted field value
func (o *FilesSharingRemoteShare) GetAccepted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetAcceptedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Accepted, true
}

// SetAccepted sets field value
func (o *FilesSharingRemoteShare) SetAccepted(v bool) {
	o.Accepted = v
}

// GetFileId returns the FileId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FilesSharingRemoteShare) GetFileId() int64 {
	if o == nil || o.FileId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.FileId.Get()
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingRemoteShare) GetFileIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileId.Get(), o.FileId.IsSet()
}

// SetFileId sets field value
func (o *FilesSharingRemoteShare) SetFileId(v int64) {
	o.FileId.Set(&v)
}

// GetId returns the Id field value
func (o *FilesSharingRemoteShare) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FilesSharingRemoteShare) SetId(v int64) {
	o.Id = v
}

// GetMimetype returns the Mimetype field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilesSharingRemoteShare) GetMimetype() string {
	if o == nil || o.Mimetype.Get() == nil {
		var ret string
		return ret
	}

	return *o.Mimetype.Get()
}

// GetMimetypeOk returns a tuple with the Mimetype field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingRemoteShare) GetMimetypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mimetype.Get(), o.Mimetype.IsSet()
}

// SetMimetype sets field value
func (o *FilesSharingRemoteShare) SetMimetype(v string) {
	o.Mimetype.Set(&v)
}

// GetMountpoint returns the Mountpoint field value
func (o *FilesSharingRemoteShare) GetMountpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mountpoint
}

// GetMountpointOk returns a tuple with the Mountpoint field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetMountpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mountpoint, true
}

// SetMountpoint sets field value
func (o *FilesSharingRemoteShare) SetMountpoint(v string) {
	o.Mountpoint = v
}

// GetMtime returns the Mtime field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FilesSharingRemoteShare) GetMtime() int64 {
	if o == nil || o.Mtime.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Mtime.Get()
}

// GetMtimeOk returns a tuple with the Mtime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingRemoteShare) GetMtimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mtime.Get(), o.Mtime.IsSet()
}

// SetMtime sets field value
func (o *FilesSharingRemoteShare) SetMtime(v int64) {
	o.Mtime.Set(&v)
}

// GetName returns the Name field value
func (o *FilesSharingRemoteShare) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FilesSharingRemoteShare) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *FilesSharingRemoteShare) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *FilesSharingRemoteShare) SetOwner(v string) {
	o.Owner = v
}

// GetParent returns the Parent field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FilesSharingRemoteShare) GetParent() int64 {
	if o == nil || o.Parent.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Parent.Get()
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingRemoteShare) GetParentOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent.Get(), o.Parent.IsSet()
}

// SetParent sets field value
func (o *FilesSharingRemoteShare) SetParent(v int64) {
	o.Parent.Set(&v)
}

// GetPermissions returns the Permissions field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FilesSharingRemoteShare) GetPermissions() int64 {
	if o == nil || o.Permissions.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Permissions.Get()
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingRemoteShare) GetPermissionsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions.Get(), o.Permissions.IsSet()
}

// SetPermissions sets field value
func (o *FilesSharingRemoteShare) SetPermissions(v int64) {
	o.Permissions.Set(&v)
}

// GetRemote returns the Remote field value
func (o *FilesSharingRemoteShare) GetRemote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Remote
}

// GetRemoteOk returns a tuple with the Remote field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetRemoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remote, true
}

// SetRemote sets field value
func (o *FilesSharingRemoteShare) SetRemote(v string) {
	o.Remote = v
}

// GetRemoteId returns the RemoteId field value
func (o *FilesSharingRemoteShare) GetRemoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteId, true
}

// SetRemoteId sets field value
func (o *FilesSharingRemoteShare) SetRemoteId(v string) {
	o.RemoteId = v
}

// GetShareToken returns the ShareToken field value
func (o *FilesSharingRemoteShare) GetShareToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareToken
}

// GetShareTokenOk returns a tuple with the ShareToken field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetShareTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareToken, true
}

// SetShareToken sets field value
func (o *FilesSharingRemoteShare) SetShareToken(v string) {
	o.ShareToken = v
}

// GetShareType returns the ShareType field value
func (o *FilesSharingRemoteShare) GetShareType() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ShareType
}

// GetShareTypeOk returns a tuple with the ShareType field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetShareTypeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareType, true
}

// SetShareType sets field value
func (o *FilesSharingRemoteShare) SetShareType(v int64) {
	o.ShareType = v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilesSharingRemoteShare) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesSharingRemoteShare) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *FilesSharingRemoteShare) SetType(v string) {
	o.Type.Set(&v)
}

// GetUser returns the User field value
func (o *FilesSharingRemoteShare) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *FilesSharingRemoteShare) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *FilesSharingRemoteShare) SetUser(v string) {
	o.User = v
}

func (o FilesSharingRemoteShare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesSharingRemoteShare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accepted"] = o.Accepted
	toSerialize["file_id"] = o.FileId.Get()
	toSerialize["id"] = o.Id
	toSerialize["mimetype"] = o.Mimetype.Get()
	toSerialize["mountpoint"] = o.Mountpoint
	toSerialize["mtime"] = o.Mtime.Get()
	toSerialize["name"] = o.Name
	toSerialize["owner"] = o.Owner
	toSerialize["parent"] = o.Parent.Get()
	toSerialize["permissions"] = o.Permissions.Get()
	toSerialize["remote"] = o.Remote
	toSerialize["remote_id"] = o.RemoteId
	toSerialize["share_token"] = o.ShareToken
	toSerialize["share_type"] = o.ShareType
	toSerialize["type"] = o.Type.Get()
	toSerialize["user"] = o.User
	return toSerialize, nil
}

type NullableFilesSharingRemoteShare struct {
	value *FilesSharingRemoteShare
	isSet bool
}

func (v NullableFilesSharingRemoteShare) Get() *FilesSharingRemoteShare {
	return v.value
}

func (v *NullableFilesSharingRemoteShare) Set(val *FilesSharingRemoteShare) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingRemoteShare) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingRemoteShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingRemoteShare(val *FilesSharingRemoteShare) *NullableFilesSharingRemoteShare {
	return &NullableFilesSharingRemoteShare{value: val, isSet: true}
}

func (v NullableFilesSharingRemoteShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingRemoteShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


