/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DashboardDashboardApiApiService DashboardDashboardApiApi service
type DashboardDashboardApiApiService service

type ApiDashboardDashboardApiGetWidgetItemsRequest struct {
	ctx context.Context
	ApiService *DashboardDashboardApiApiService
	oCSAPIRequest *string
	sinceIds *string
	limit *int64
	widgets *string
}

func (r ApiDashboardDashboardApiGetWidgetItemsRequest) OCSAPIRequest(oCSAPIRequest string) ApiDashboardDashboardApiGetWidgetItemsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Array indexed by widget Ids, contains date/id from which we want the new items
func (r ApiDashboardDashboardApiGetWidgetItemsRequest) SinceIds(sinceIds string) ApiDashboardDashboardApiGetWidgetItemsRequest {
	r.sinceIds = &sinceIds
	return r
}

// Limit number of result items per widget
func (r ApiDashboardDashboardApiGetWidgetItemsRequest) Limit(limit int64) ApiDashboardDashboardApiGetWidgetItemsRequest {
	r.limit = &limit
	return r
}

// Limit results to specific widgets
func (r ApiDashboardDashboardApiGetWidgetItemsRequest) Widgets(widgets string) ApiDashboardDashboardApiGetWidgetItemsRequest {
	r.widgets = &widgets
	return r
}

func (r ApiDashboardDashboardApiGetWidgetItemsRequest) Execute() (*DashboardDashboardApiGetWidgetItems200Response, *http.Response, error) {
	return r.ApiService.DashboardDashboardApiGetWidgetItemsExecute(r)
}

/*
DashboardDashboardApiGetWidgetItems Get the items for the widgets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDashboardDashboardApiGetWidgetItemsRequest
*/
func (a *DashboardDashboardApiApiService) DashboardDashboardApiGetWidgetItems(ctx context.Context) ApiDashboardDashboardApiGetWidgetItemsRequest {
	return ApiDashboardDashboardApiGetWidgetItemsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DashboardDashboardApiGetWidgetItems200Response
func (a *DashboardDashboardApiApiService) DashboardDashboardApiGetWidgetItemsExecute(r ApiDashboardDashboardApiGetWidgetItemsRequest) (*DashboardDashboardApiGetWidgetItems200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DashboardDashboardApiGetWidgetItems200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardDashboardApiApiService.DashboardDashboardApiGetWidgetItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/dashboard/api/v1/widget-items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.sinceIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sinceIds", r.sinceIds, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.widgets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "widgets", r.widgets, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDashboardDashboardApiGetWidgetsRequest struct {
	ctx context.Context
	ApiService *DashboardDashboardApiApiService
	oCSAPIRequest *string
}

func (r ApiDashboardDashboardApiGetWidgetsRequest) OCSAPIRequest(oCSAPIRequest string) ApiDashboardDashboardApiGetWidgetsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiDashboardDashboardApiGetWidgetsRequest) Execute() (*DashboardDashboardApiGetWidgets200Response, *http.Response, error) {
	return r.ApiService.DashboardDashboardApiGetWidgetsExecute(r)
}

/*
DashboardDashboardApiGetWidgets Get the widgets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDashboardDashboardApiGetWidgetsRequest
*/
func (a *DashboardDashboardApiApiService) DashboardDashboardApiGetWidgets(ctx context.Context) ApiDashboardDashboardApiGetWidgetsRequest {
	return ApiDashboardDashboardApiGetWidgetsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DashboardDashboardApiGetWidgets200Response
func (a *DashboardDashboardApiApiService) DashboardDashboardApiGetWidgetsExecute(r ApiDashboardDashboardApiGetWidgetsRequest) (*DashboardDashboardApiGetWidgets200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DashboardDashboardApiGetWidgets200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DashboardDashboardApiApiService.DashboardDashboardApiGetWidgets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/apps/dashboard/api/v1/widgets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
