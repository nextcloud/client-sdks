/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CloudFederationApiRequestHandlerApiService CloudFederationApiRequestHandlerApi service
type CloudFederationApiRequestHandlerApiService service

type ApiCloudFederationApiRequestHandlerAddShareRequest struct {
	ctx context.Context
	ApiService *CloudFederationApiRequestHandlerApiService
	shareWith *string
	name *string
	providerId *string
	owner *string
	protocol *string
	shareType *string
	resourceType *string
	description *string
	ownerDisplayName *string
	sharedBy *string
	sharedByDisplayName *string
}

// The user who the share will be shared with
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) ShareWith(shareWith string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.shareWith = &shareWith
	return r
}

// The resource name (e.g. document.odt)
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) Name(name string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.name = &name
	return r
}

// Resource UID on the provider side
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) ProviderId(providerId string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.providerId = &providerId
	return r
}

// Provider specific UID of the user who owns the resource
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) Owner(owner string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.owner = &owner
	return r
}

// e,.g. [&#39;name&#39; &#x3D;&gt; &#39;webdav&#39;, &#39;options&#39; &#x3D;&gt; [&#39;username&#39; &#x3D;&gt; &#39;john&#39;, &#39;permissions&#39; &#x3D;&gt; 31]]
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) Protocol(protocol string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.protocol = &protocol
	return r
}

// &#39;group&#39; or &#39;user&#39; share
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) ShareType(shareType string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.shareType = &shareType
	return r
}

// &#39;file&#39;, &#39;calendar&#39;,...
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) ResourceType(resourceType string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.resourceType = &resourceType
	return r
}

// Share description
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) Description(description string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.description = &description
	return r
}

// Display name of the user who shared the item
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) OwnerDisplayName(ownerDisplayName string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.ownerDisplayName = &ownerDisplayName
	return r
}

// Provider specific UID of the user who shared the resource
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) SharedBy(sharedBy string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.sharedBy = &sharedBy
	return r
}

// Display name of the user who shared the resource
func (r ApiCloudFederationApiRequestHandlerAddShareRequest) SharedByDisplayName(sharedByDisplayName string) ApiCloudFederationApiRequestHandlerAddShareRequest {
	r.sharedByDisplayName = &sharedByDisplayName
	return r
}

func (r ApiCloudFederationApiRequestHandlerAddShareRequest) Execute() (*CloudFederationApiAddShare, *http.Response, error) {
	return r.ApiService.CloudFederationApiRequestHandlerAddShareExecute(r)
}

/*
CloudFederationApiRequestHandlerAddShare Add share

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudFederationApiRequestHandlerAddShareRequest
*/
func (a *CloudFederationApiRequestHandlerApiService) CloudFederationApiRequestHandlerAddShare(ctx context.Context) ApiCloudFederationApiRequestHandlerAddShareRequest {
	return ApiCloudFederationApiRequestHandlerAddShareRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudFederationApiAddShare
func (a *CloudFederationApiRequestHandlerApiService) CloudFederationApiRequestHandlerAddShareExecute(r ApiCloudFederationApiRequestHandlerAddShareRequest) (*CloudFederationApiAddShare, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudFederationApiAddShare
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudFederationApiRequestHandlerApiService.CloudFederationApiRequestHandlerAddShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/ocm/shares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shareWith == nil {
		return localVarReturnValue, nil, reportError("shareWith is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.providerId == nil {
		return localVarReturnValue, nil, reportError("providerId is required and must be specified")
	}
	if r.owner == nil {
		return localVarReturnValue, nil, reportError("owner is required and must be specified")
	}
	if r.protocol == nil {
		return localVarReturnValue, nil, reportError("protocol is required and must be specified")
	}
	if r.shareType == nil {
		return localVarReturnValue, nil, reportError("shareType is required and must be specified")
	}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "shareWith", r.shareWith, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "providerId", r.providerId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
	if r.ownerDisplayName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ownerDisplayName", r.ownerDisplayName, "")
	}
	if r.sharedBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sharedBy", r.sharedBy, "")
	}
	if r.sharedByDisplayName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sharedByDisplayName", r.sharedByDisplayName, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "shareType", r.shareType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType", r.resourceType, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudFederationApiRequestHandlerReceiveNotificationRequest struct {
	ctx context.Context
	ApiService *CloudFederationApiRequestHandlerApiService
	notificationType *string
	resourceType *string
	providerId *string
	notification *string
}

// Notification type, e.g. SHARE_ACCEPTED
func (r ApiCloudFederationApiRequestHandlerReceiveNotificationRequest) NotificationType(notificationType string) ApiCloudFederationApiRequestHandlerReceiveNotificationRequest {
	r.notificationType = &notificationType
	return r
}

// calendar, file, contact,...
func (r ApiCloudFederationApiRequestHandlerReceiveNotificationRequest) ResourceType(resourceType string) ApiCloudFederationApiRequestHandlerReceiveNotificationRequest {
	r.resourceType = &resourceType
	return r
}

// ID of the share
func (r ApiCloudFederationApiRequestHandlerReceiveNotificationRequest) ProviderId(providerId string) ApiCloudFederationApiRequestHandlerReceiveNotificationRequest {
	r.providerId = &providerId
	return r
}

// The actual payload of the notification
func (r ApiCloudFederationApiRequestHandlerReceiveNotificationRequest) Notification(notification string) ApiCloudFederationApiRequestHandlerReceiveNotificationRequest {
	r.notification = &notification
	return r
}

func (r ApiCloudFederationApiRequestHandlerReceiveNotificationRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CloudFederationApiRequestHandlerReceiveNotificationExecute(r)
}

/*
CloudFederationApiRequestHandlerReceiveNotification Send a notification about an existing share

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudFederationApiRequestHandlerReceiveNotificationRequest
*/
func (a *CloudFederationApiRequestHandlerApiService) CloudFederationApiRequestHandlerReceiveNotification(ctx context.Context) ApiCloudFederationApiRequestHandlerReceiveNotificationRequest {
	return ApiCloudFederationApiRequestHandlerReceiveNotificationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *CloudFederationApiRequestHandlerApiService) CloudFederationApiRequestHandlerReceiveNotificationExecute(r ApiCloudFederationApiRequestHandlerReceiveNotificationRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudFederationApiRequestHandlerApiService.CloudFederationApiRequestHandlerReceiveNotification")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/ocm/notifications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notificationType == nil {
		return localVarReturnValue, nil, reportError("notificationType is required and must be specified")
	}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "notificationType", r.notificationType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resourceType", r.resourceType, "")
	if r.providerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "providerId", r.providerId, "")
	}
	if r.notification != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "notification", r.notification, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
