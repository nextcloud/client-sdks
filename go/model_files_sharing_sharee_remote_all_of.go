/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilesSharingShareeRemoteAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesSharingShareeRemoteAllOf{}

// FilesSharingShareeRemoteAllOf struct for FilesSharingShareeRemoteAllOf
type FilesSharingShareeRemoteAllOf struct {
	Uuid string `json:"uuid"`
	Name string `json:"name"`
	Type string `json:"type"`
	Value FilesSharingShareeRemoteAllOfValue `json:"value"`
}

// NewFilesSharingShareeRemoteAllOf instantiates a new FilesSharingShareeRemoteAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesSharingShareeRemoteAllOf(uuid string, name string, type_ string, value FilesSharingShareeRemoteAllOfValue) *FilesSharingShareeRemoteAllOf {
	this := FilesSharingShareeRemoteAllOf{}
	this.Uuid = uuid
	this.Name = name
	this.Type = type_
	this.Value = value
	return &this
}

// NewFilesSharingShareeRemoteAllOfWithDefaults instantiates a new FilesSharingShareeRemoteAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesSharingShareeRemoteAllOfWithDefaults() *FilesSharingShareeRemoteAllOf {
	this := FilesSharingShareeRemoteAllOf{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *FilesSharingShareeRemoteAllOf) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShareeRemoteAllOf) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *FilesSharingShareeRemoteAllOf) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *FilesSharingShareeRemoteAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShareeRemoteAllOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FilesSharingShareeRemoteAllOf) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *FilesSharingShareeRemoteAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShareeRemoteAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilesSharingShareeRemoteAllOf) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *FilesSharingShareeRemoteAllOf) GetValue() FilesSharingShareeRemoteAllOfValue {
	if o == nil {
		var ret FilesSharingShareeRemoteAllOfValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *FilesSharingShareeRemoteAllOf) GetValueOk() (*FilesSharingShareeRemoteAllOfValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *FilesSharingShareeRemoteAllOf) SetValue(v FilesSharingShareeRemoteAllOfValue) {
	o.Value = v
}

func (o FilesSharingShareeRemoteAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesSharingShareeRemoteAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableFilesSharingShareeRemoteAllOf struct {
	value *FilesSharingShareeRemoteAllOf
	isSet bool
}

func (v NullableFilesSharingShareeRemoteAllOf) Get() *FilesSharingShareeRemoteAllOf {
	return v.value
}

func (v *NullableFilesSharingShareeRemoteAllOf) Set(val *FilesSharingShareeRemoteAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingShareeRemoteAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingShareeRemoteAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingShareeRemoteAllOf(val *FilesSharingShareeRemoteAllOf) *NullableFilesSharingShareeRemoteAllOf {
	return &NullableFilesSharingShareeRemoteAllOf{value: val, isSet: true}
}

func (v NullableFilesSharingShareeRemoteAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingShareeRemoteAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


