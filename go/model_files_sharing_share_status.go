/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FilesSharingShareStatus - struct for FilesSharingShareStatus
type FilesSharingShareStatus struct {
	FilesSharingShareStatusOneOf *FilesSharingShareStatusOneOf
	Int64 *int64
}

// FilesSharingShareStatusOneOfAsFilesSharingShareStatus is a convenience function that returns FilesSharingShareStatusOneOf wrapped in FilesSharingShareStatus
func FilesSharingShareStatusOneOfAsFilesSharingShareStatus(v *FilesSharingShareStatusOneOf) FilesSharingShareStatus {
	return FilesSharingShareStatus{
		FilesSharingShareStatusOneOf: v,
	}
}

// int64AsFilesSharingShareStatus is a convenience function that returns int64 wrapped in FilesSharingShareStatus
func Int64AsFilesSharingShareStatus(v *int64) FilesSharingShareStatus {
	return FilesSharingShareStatus{
		Int64: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilesSharingShareStatus) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into FilesSharingShareStatusOneOf
	err = newStrictDecoder(data).Decode(&dst.FilesSharingShareStatusOneOf)
	if err == nil {
		jsonFilesSharingShareStatusOneOf, _ := json.Marshal(dst.FilesSharingShareStatusOneOf)
		if string(jsonFilesSharingShareStatusOneOf) == "{}" { // empty struct
			dst.FilesSharingShareStatusOneOf = nil
		} else {
			match++
		}
	} else {
		dst.FilesSharingShareStatusOneOf = nil
	}

	// try to unmarshal data into Int64
	err = newStrictDecoder(data).Decode(&dst.Int64)
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			match++
		}
	} else {
		dst.Int64 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FilesSharingShareStatusOneOf = nil
		dst.Int64 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilesSharingShareStatus)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilesSharingShareStatus)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilesSharingShareStatus) MarshalJSON() ([]byte, error) {
	if src.FilesSharingShareStatusOneOf != nil {
		return json.Marshal(&src.FilesSharingShareStatusOneOf)
	}

	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilesSharingShareStatus) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FilesSharingShareStatusOneOf != nil {
		return obj.FilesSharingShareStatusOneOf
	}

	if obj.Int64 != nil {
		return obj.Int64
	}

	// all schemas are nil
	return nil
}

type NullableFilesSharingShareStatus struct {
	value *FilesSharingShareStatus
	isSet bool
}

func (v NullableFilesSharingShareStatus) Get() *FilesSharingShareStatus {
	return v.value
}

func (v *NullableFilesSharingShareStatus) Set(val *FilesSharingShareStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesSharingShareStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesSharingShareStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesSharingShareStatus(val *FilesSharingShareStatus) *NullableFilesSharingShareStatus {
	return &NullableFilesSharingShareStatus{value: val, isSet: true}
}

func (v NullableFilesSharingShareStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesSharingShareStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


