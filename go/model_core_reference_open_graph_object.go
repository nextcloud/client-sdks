/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CoreReferenceOpenGraphObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreReferenceOpenGraphObject{}

// CoreReferenceOpenGraphObject struct for CoreReferenceOpenGraphObject
type CoreReferenceOpenGraphObject struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description NullableString `json:"description"`
	Thumb NullableString `json:"thumb"`
	Link string `json:"link"`
}

// NewCoreReferenceOpenGraphObject instantiates a new CoreReferenceOpenGraphObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreReferenceOpenGraphObject(id string, name string, description NullableString, thumb NullableString, link string) *CoreReferenceOpenGraphObject {
	this := CoreReferenceOpenGraphObject{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Thumb = thumb
	this.Link = link
	return &this
}

// NewCoreReferenceOpenGraphObjectWithDefaults instantiates a new CoreReferenceOpenGraphObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreReferenceOpenGraphObjectWithDefaults() *CoreReferenceOpenGraphObject {
	this := CoreReferenceOpenGraphObject{}
	return &this
}

// GetId returns the Id field value
func (o *CoreReferenceOpenGraphObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CoreReferenceOpenGraphObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CoreReferenceOpenGraphObject) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CoreReferenceOpenGraphObject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CoreReferenceOpenGraphObject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CoreReferenceOpenGraphObject) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CoreReferenceOpenGraphObject) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoreReferenceOpenGraphObject) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *CoreReferenceOpenGraphObject) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetThumb returns the Thumb field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CoreReferenceOpenGraphObject) GetThumb() string {
	if o == nil || o.Thumb.Get() == nil {
		var ret string
		return ret
	}

	return *o.Thumb.Get()
}

// GetThumbOk returns a tuple with the Thumb field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoreReferenceOpenGraphObject) GetThumbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Thumb.Get(), o.Thumb.IsSet()
}

// SetThumb sets field value
func (o *CoreReferenceOpenGraphObject) SetThumb(v string) {
	o.Thumb.Set(&v)
}

// GetLink returns the Link field value
func (o *CoreReferenceOpenGraphObject) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *CoreReferenceOpenGraphObject) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *CoreReferenceOpenGraphObject) SetLink(v string) {
	o.Link = v
}

func (o CoreReferenceOpenGraphObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreReferenceOpenGraphObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description.Get()
	toSerialize["thumb"] = o.Thumb.Get()
	toSerialize["link"] = o.Link
	return toSerialize, nil
}

type NullableCoreReferenceOpenGraphObject struct {
	value *CoreReferenceOpenGraphObject
	isSet bool
}

func (v NullableCoreReferenceOpenGraphObject) Get() *CoreReferenceOpenGraphObject {
	return v.value
}

func (v *NullableCoreReferenceOpenGraphObject) Set(val *CoreReferenceOpenGraphObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreReferenceOpenGraphObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreReferenceOpenGraphObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreReferenceOpenGraphObject(val *CoreReferenceOpenGraphObject) *NullableCoreReferenceOpenGraphObject {
	return &NullableCoreReferenceOpenGraphObject{value: val, isSet: true}
}

func (v NullableCoreReferenceOpenGraphObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreReferenceOpenGraphObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


