/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProvisioningApiUsersApiService ProvisioningApiUsersApi service
type ProvisioningApiUsersApiService service

type ApiProvisioningApiUsersAddSubAdminRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	groupid *string
	userId string
	oCSAPIRequest *string
}

// ID of the group
func (r ApiProvisioningApiUsersAddSubAdminRequest) Groupid(groupid string) ApiProvisioningApiUsersAddSubAdminRequest {
	r.groupid = &groupid
	return r
}

func (r ApiProvisioningApiUsersAddSubAdminRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersAddSubAdminRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersAddSubAdminRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersAddSubAdminExecute(r)
}

/*
ProvisioningApiUsersAddSubAdmin Make a user a subadmin of a group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersAddSubAdminRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersAddSubAdmin(ctx context.Context, userId string) ApiProvisioningApiUsersAddSubAdminRequest {
	return ApiProvisioningApiUsersAddSubAdminRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersAddSubAdminExecute(r ApiProvisioningApiUsersAddSubAdminRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersAddSubAdmin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/subadmins"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupid == nil {
		return localVarReturnValue, nil, reportError("groupid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersAddToGroupRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
	groupid *string
}

func (r ApiProvisioningApiUsersAddToGroupRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersAddToGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// ID of the group
func (r ApiProvisioningApiUsersAddToGroupRequest) Groupid(groupid string) ApiProvisioningApiUsersAddToGroupRequest {
	r.groupid = &groupid
	return r
}

func (r ApiProvisioningApiUsersAddToGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersAddToGroupExecute(r)
}

/*
ProvisioningApiUsersAddToGroup Add a user to a group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersAddToGroupRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersAddToGroup(ctx context.Context, userId string) ApiProvisioningApiUsersAddToGroupRequest {
	return ApiProvisioningApiUsersAddToGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersAddToGroupExecute(r ApiProvisioningApiUsersAddToGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersAddToGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.groupid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersAddUserRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userid *string
	oCSAPIRequest *string
	password *string
	displayName *string
	email *string
	groups *string
	subadmin *string
	quota *string
	language *string
	manager *string
}

// ID of the user
func (r ApiProvisioningApiUsersAddUserRequest) Userid(userid string) ApiProvisioningApiUsersAddUserRequest {
	r.userid = &userid
	return r
}

func (r ApiProvisioningApiUsersAddUserRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersAddUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Password of the user
func (r ApiProvisioningApiUsersAddUserRequest) Password(password string) ApiProvisioningApiUsersAddUserRequest {
	r.password = &password
	return r
}

// Display name of the user
func (r ApiProvisioningApiUsersAddUserRequest) DisplayName(displayName string) ApiProvisioningApiUsersAddUserRequest {
	r.displayName = &displayName
	return r
}

// Email of the user
func (r ApiProvisioningApiUsersAddUserRequest) Email(email string) ApiProvisioningApiUsersAddUserRequest {
	r.email = &email
	return r
}

// Groups of the user
func (r ApiProvisioningApiUsersAddUserRequest) Groups(groups string) ApiProvisioningApiUsersAddUserRequest {
	r.groups = &groups
	return r
}

// Groups where the user is subadmin
func (r ApiProvisioningApiUsersAddUserRequest) Subadmin(subadmin string) ApiProvisioningApiUsersAddUserRequest {
	r.subadmin = &subadmin
	return r
}

// Quota of the user
func (r ApiProvisioningApiUsersAddUserRequest) Quota(quota string) ApiProvisioningApiUsersAddUserRequest {
	r.quota = &quota
	return r
}

// Language of the user
func (r ApiProvisioningApiUsersAddUserRequest) Language(language string) ApiProvisioningApiUsersAddUserRequest {
	r.language = &language
	return r
}

// Manager of the user
func (r ApiProvisioningApiUsersAddUserRequest) Manager(manager string) ApiProvisioningApiUsersAddUserRequest {
	r.manager = &manager
	return r
}

func (r ApiProvisioningApiUsersAddUserRequest) Execute() (*ProvisioningApiUsersAddUser200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersAddUserExecute(r)
}

/*
ProvisioningApiUsersAddUser Create a new user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiUsersAddUserRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersAddUser(ctx context.Context) ApiProvisioningApiUsersAddUserRequest {
	return ApiProvisioningApiUsersAddUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiUsersAddUser200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersAddUserExecute(r ApiProvisioningApiUsersAddUserRequest) (*ProvisioningApiUsersAddUser200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiUsersAddUser200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersAddUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userid == nil {
		return localVarReturnValue, nil, reportError("userid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "userid", r.userid, "")
	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password", r.password, "")
	}
	if r.displayName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayName", r.displayName, "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.groups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groups", r.groups, "")
	}
	if r.subadmin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subadmin", r.subadmin, "")
	}
	if r.quota != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quota", r.quota, "")
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	if r.manager != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "manager", r.manager, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersDeleteUserRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersDeleteUserRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersDeleteUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersDeleteUserRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersDeleteUserExecute(r)
}

/*
ProvisioningApiUsersDeleteUser Delete a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersDeleteUserRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersDeleteUser(ctx context.Context, userId string) ApiProvisioningApiUsersDeleteUserRequest {
	return ApiProvisioningApiUsersDeleteUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersDeleteUserExecute(r ApiProvisioningApiUsersDeleteUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersDeleteUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersDisableUserRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersDisableUserRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersDisableUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersDisableUserRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersDisableUserExecute(r)
}

/*
ProvisioningApiUsersDisableUser Disable a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersDisableUserRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersDisableUser(ctx context.Context, userId string) ApiProvisioningApiUsersDisableUserRequest {
	return ApiProvisioningApiUsersDisableUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersDisableUserExecute(r ApiProvisioningApiUsersDisableUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersDisableUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/disable"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersEditUserRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	key *string
	value *string
	userId string
	oCSAPIRequest *string
}

// Key that will be updated
func (r ApiProvisioningApiUsersEditUserRequest) Key(key string) ApiProvisioningApiUsersEditUserRequest {
	r.key = &key
	return r
}

// New value for the key
func (r ApiProvisioningApiUsersEditUserRequest) Value(value string) ApiProvisioningApiUsersEditUserRequest {
	r.value = &value
	return r
}

func (r ApiProvisioningApiUsersEditUserRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersEditUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersEditUserRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersEditUserExecute(r)
}

/*
ProvisioningApiUsersEditUser Update a value of the user's details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersEditUserRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersEditUser(ctx context.Context, userId string) ApiProvisioningApiUsersEditUserRequest {
	return ApiProvisioningApiUsersEditUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersEditUserExecute(r ApiProvisioningApiUsersEditUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersEditUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.key == nil {
		return localVarReturnValue, nil, reportError("key is required and must be specified")
	}
	if r.value == nil {
		return localVarReturnValue, nil, reportError("value is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersEditUserMultiValueRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	key *string
	value *string
	userId string
	collectionName string
	oCSAPIRequest *string
}

// Key that will be updated
func (r ApiProvisioningApiUsersEditUserMultiValueRequest) Key(key string) ApiProvisioningApiUsersEditUserMultiValueRequest {
	r.key = &key
	return r
}

// New value for the key
func (r ApiProvisioningApiUsersEditUserMultiValueRequest) Value(value string) ApiProvisioningApiUsersEditUserMultiValueRequest {
	r.value = &value
	return r
}

func (r ApiProvisioningApiUsersEditUserMultiValueRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersEditUserMultiValueRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersEditUserMultiValueRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersEditUserMultiValueExecute(r)
}

/*
ProvisioningApiUsersEditUserMultiValue Update multiple values of the user's details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @param collectionName Collection to update
 @return ApiProvisioningApiUsersEditUserMultiValueRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersEditUserMultiValue(ctx context.Context, userId string, collectionName string) ApiProvisioningApiUsersEditUserMultiValueRequest {
	return ApiProvisioningApiUsersEditUserMultiValueRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		collectionName: collectionName,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersEditUserMultiValueExecute(r ApiProvisioningApiUsersEditUserMultiValueRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersEditUserMultiValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/{collectionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"collectionName"+"}", url.PathEscape(parameterValueToString(r.collectionName, "collectionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.key == nil {
		return localVarReturnValue, nil, reportError("key is required and must be specified")
	}
	if r.value == nil {
		return localVarReturnValue, nil, reportError("value is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "key", r.key, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "value", r.value, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersEnableUserRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersEnableUserRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersEnableUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersEnableUserRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersEnableUserExecute(r)
}

/*
ProvisioningApiUsersEnableUser Enable a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersEnableUserRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersEnableUser(ctx context.Context, userId string) ApiProvisioningApiUsersEnableUserRequest {
	return ApiProvisioningApiUsersEnableUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersEnableUserExecute(r ApiProvisioningApiUsersEnableUserRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersEnableUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/enable"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersGetCurrentUserRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersGetCurrentUserRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersGetCurrentUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersGetCurrentUserRequest) Execute() (*ProvisioningApiUsersGetUser200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetCurrentUserExecute(r)
}

/*
ProvisioningApiUsersGetCurrentUser Get the details of the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiUsersGetCurrentUserRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetCurrentUser(ctx context.Context) ApiProvisioningApiUsersGetCurrentUserRequest {
	return ApiProvisioningApiUsersGetCurrentUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiUsersGetUser200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetCurrentUserExecute(r ApiProvisioningApiUsersGetCurrentUserRequest) (*ProvisioningApiUsersGetUser200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiUsersGetUser200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersGetCurrentUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersGetEditableFieldsRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersGetEditableFieldsRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersGetEditableFieldsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersGetEditableFieldsRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetEditableFieldsExecute(r)
}

/*
ProvisioningApiUsersGetEditableFields Get a list of fields that are editable for the current user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiUsersGetEditableFieldsRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetEditableFields(ctx context.Context) ApiProvisioningApiUsersGetEditableFieldsRequest {
	return ApiProvisioningApiUsersGetEditableFieldsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetEditableFieldsExecute(r ApiProvisioningApiUsersGetEditableFieldsRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersGetEditableFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/user/fields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersGetEditableFieldsForUserRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersGetEditableFieldsForUserRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersGetEditableFieldsForUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersGetEditableFieldsForUserRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetEditableFieldsForUserExecute(r)
}

/*
ProvisioningApiUsersGetEditableFieldsForUser Get a list of fields that are editable for a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersGetEditableFieldsForUserRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetEditableFieldsForUser(ctx context.Context, userId string) ApiProvisioningApiUsersGetEditableFieldsForUserRequest {
	return ApiProvisioningApiUsersGetEditableFieldsForUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetEditableFieldsForUserExecute(r ApiProvisioningApiUsersGetEditableFieldsForUserRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersGetEditableFieldsForUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/user/fields/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersGetUserRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersGetUserRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersGetUserRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersGetUserRequest) Execute() (*ProvisioningApiUsersGetUser200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUserExecute(r)
}

/*
ProvisioningApiUsersGetUser Get the details of a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersGetUserRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUser(ctx context.Context, userId string) ApiProvisioningApiUsersGetUserRequest {
	return ApiProvisioningApiUsersGetUserRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProvisioningApiUsersGetUser200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUserExecute(r ApiProvisioningApiUsersGetUserRequest) (*ProvisioningApiUsersGetUser200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiUsersGetUser200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersGetUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersGetUserSubAdminGroupsRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersGetUserSubAdminGroupsRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersGetUserSubAdminGroupsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersGetUserSubAdminGroupsRequest) Execute() (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUserSubAdminGroupsExecute(r)
}

/*
ProvisioningApiUsersGetUserSubAdminGroups Get the groups a user is a subadmin of

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID if the user
 @return ApiProvisioningApiUsersGetUserSubAdminGroupsRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUserSubAdminGroups(ctx context.Context, userId string) ApiProvisioningApiUsersGetUserSubAdminGroupsRequest {
	return ApiProvisioningApiUsersGetUserSubAdminGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetSubAdminsOfGroup200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUserSubAdminGroupsExecute(r ApiProvisioningApiUsersGetUserSubAdminGroupsRequest) (*ProvisioningApiGroupsGetSubAdminsOfGroup200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetSubAdminsOfGroup200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersGetUserSubAdminGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/subadmins"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersGetUsersRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ApiProvisioningApiUsersGetUsersRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersGetUsersRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ApiProvisioningApiUsersGetUsersRequest) Search(search string) ApiProvisioningApiUsersGetUsersRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ApiProvisioningApiUsersGetUsersRequest) Limit(limit int64) ApiProvisioningApiUsersGetUsersRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ApiProvisioningApiUsersGetUsersRequest) Offset(offset int64) ApiProvisioningApiUsersGetUsersRequest {
	r.offset = &offset
	return r
}

func (r ApiProvisioningApiUsersGetUsersRequest) Execute() (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUsersExecute(r)
}

/*
ProvisioningApiUsersGetUsers Get a list of users

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiUsersGetUsersRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUsers(ctx context.Context) ApiProvisioningApiUsersGetUsersRequest {
	return ApiProvisioningApiUsersGetUsersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsers200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUsersExecute(r ApiProvisioningApiUsersGetUsersRequest) (*ProvisioningApiGroupsGetGroupUsers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersGetUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersGetUsersDetailsRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	oCSAPIRequest *string
	search *string
	limit *int64
	offset *int64
}

func (r ApiProvisioningApiUsersGetUsersDetailsRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersGetUsersDetailsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

// Text to search for
func (r ApiProvisioningApiUsersGetUsersDetailsRequest) Search(search string) ApiProvisioningApiUsersGetUsersDetailsRequest {
	r.search = &search
	return r
}

// Limit the amount of groups returned
func (r ApiProvisioningApiUsersGetUsersDetailsRequest) Limit(limit int64) ApiProvisioningApiUsersGetUsersDetailsRequest {
	r.limit = &limit
	return r
}

// Offset for searching for groups
func (r ApiProvisioningApiUsersGetUsersDetailsRequest) Offset(offset int64) ApiProvisioningApiUsersGetUsersDetailsRequest {
	r.offset = &offset
	return r
}

func (r ApiProvisioningApiUsersGetUsersDetailsRequest) Execute() (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUsersDetailsExecute(r)
}

/*
ProvisioningApiUsersGetUsersDetails Get a list of users and their details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiUsersGetUsersDetailsRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUsersDetails(ctx context.Context) ApiProvisioningApiUsersGetUsersDetailsRequest {
	return ApiProvisioningApiUsersGetUsersDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroupUsersDetails200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUsersDetailsExecute(r ApiProvisioningApiUsersGetUsersDetailsRequest) (*ProvisioningApiGroupsGetGroupUsersDetails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroupUsersDetails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersGetUsersDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersGetUsersGroupsRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersGetUsersGroupsRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersGetUsersGroupsRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersGetUsersGroupsRequest) Execute() (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersGetUsersGroupsExecute(r)
}

/*
ProvisioningApiUsersGetUsersGroups Get a list of groups the user belongs to

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersGetUsersGroupsRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUsersGroups(ctx context.Context, userId string) ApiProvisioningApiUsersGetUsersGroupsRequest {
	return ApiProvisioningApiUsersGetUsersGroupsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ProvisioningApiGroupsGetGroups200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersGetUsersGroupsExecute(r ApiProvisioningApiUsersGetUsersGroupsRequest) (*ProvisioningApiGroupsGetGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiGroupsGetGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersGetUsersGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersRemoveFromGroupRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	groupid *string
	userId string
	oCSAPIRequest *string
}

// ID of the group
func (r ApiProvisioningApiUsersRemoveFromGroupRequest) Groupid(groupid string) ApiProvisioningApiUsersRemoveFromGroupRequest {
	r.groupid = &groupid
	return r
}

func (r ApiProvisioningApiUsersRemoveFromGroupRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersRemoveFromGroupRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersRemoveFromGroupRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersRemoveFromGroupExecute(r)
}

/*
ProvisioningApiUsersRemoveFromGroup Remove a user from a group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersRemoveFromGroupRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersRemoveFromGroup(ctx context.Context, userId string) ApiProvisioningApiUsersRemoveFromGroupRequest {
	return ApiProvisioningApiUsersRemoveFromGroupRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersRemoveFromGroupExecute(r ApiProvisioningApiUsersRemoveFromGroupRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersRemoveFromGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupid == nil {
		return localVarReturnValue, nil, reportError("groupid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersRemoveSubAdminRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	groupid *string
	userId string
	oCSAPIRequest *string
}

// ID of the group
func (r ApiProvisioningApiUsersRemoveSubAdminRequest) Groupid(groupid string) ApiProvisioningApiUsersRemoveSubAdminRequest {
	r.groupid = &groupid
	return r
}

func (r ApiProvisioningApiUsersRemoveSubAdminRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersRemoveSubAdminRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersRemoveSubAdminRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersRemoveSubAdminExecute(r)
}

/*
ProvisioningApiUsersRemoveSubAdmin Remove a user from the subadmins of a group

This endpoint requires admin access

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersRemoveSubAdminRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersRemoveSubAdmin(ctx context.Context, userId string) ApiProvisioningApiUsersRemoveSubAdminRequest {
	return ApiProvisioningApiUsersRemoveSubAdminRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersRemoveSubAdminExecute(r ApiProvisioningApiUsersRemoveSubAdminRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersRemoveSubAdmin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/subadmins"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.groupid == nil {
		return localVarReturnValue, nil, reportError("groupid is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "groupid", r.groupid, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersResendWelcomeMessageRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersResendWelcomeMessageRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersResendWelcomeMessageRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersResendWelcomeMessageRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersResendWelcomeMessageExecute(r)
}

/*
ProvisioningApiUsersResendWelcomeMessage Resend the welcome message

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID if the user
 @return ApiProvisioningApiUsersResendWelcomeMessageRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersResendWelcomeMessage(ctx context.Context, userId string) ApiProvisioningApiUsersResendWelcomeMessageRequest {
	return ApiProvisioningApiUsersResendWelcomeMessageRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersResendWelcomeMessageExecute(r ApiProvisioningApiUsersResendWelcomeMessageRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersResendWelcomeMessage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/welcome"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersSearchByPhoneNumbersRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	location *string
	search *string
	oCSAPIRequest *string
}

// Location of the phone number (for country code)
func (r ApiProvisioningApiUsersSearchByPhoneNumbersRequest) Location(location string) ApiProvisioningApiUsersSearchByPhoneNumbersRequest {
	r.location = &location
	return r
}

// Phone numbers to search for
func (r ApiProvisioningApiUsersSearchByPhoneNumbersRequest) Search(search string) ApiProvisioningApiUsersSearchByPhoneNumbersRequest {
	r.search = &search
	return r
}

func (r ApiProvisioningApiUsersSearchByPhoneNumbersRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersSearchByPhoneNumbersRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersSearchByPhoneNumbersRequest) Execute() (*ProvisioningApiUsersSearchByPhoneNumbers200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersSearchByPhoneNumbersExecute(r)
}

/*
ProvisioningApiUsersSearchByPhoneNumbers Search users by their phone numbers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProvisioningApiUsersSearchByPhoneNumbersRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersSearchByPhoneNumbers(ctx context.Context) ApiProvisioningApiUsersSearchByPhoneNumbersRequest {
	return ApiProvisioningApiUsersSearchByPhoneNumbersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvisioningApiUsersSearchByPhoneNumbers200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersSearchByPhoneNumbersExecute(r ApiProvisioningApiUsersSearchByPhoneNumbersRequest) (*ProvisioningApiUsersSearchByPhoneNumbers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvisioningApiUsersSearchByPhoneNumbers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersSearchByPhoneNumbers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/search/by-phone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.location == nil {
		return localVarReturnValue, nil, reportError("location is required and must be specified")
	}
	if r.search == nil {
		return localVarReturnValue, nil, reportError("search is required and must be specified")
	}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisioningApiUsersWipeUserDevicesRequest struct {
	ctx context.Context
	ApiService *ProvisioningApiUsersApiService
	userId string
	oCSAPIRequest *string
}

func (r ApiProvisioningApiUsersWipeUserDevicesRequest) OCSAPIRequest(oCSAPIRequest string) ApiProvisioningApiUsersWipeUserDevicesRequest {
	r.oCSAPIRequest = &oCSAPIRequest
	return r
}

func (r ApiProvisioningApiUsersWipeUserDevicesRequest) Execute() (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	return r.ApiService.ProvisioningApiUsersWipeUserDevicesExecute(r)
}

/*
ProvisioningApiUsersWipeUserDevices Wipe all devices of a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId ID of the user
 @return ApiProvisioningApiUsersWipeUserDevicesRequest
*/
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersWipeUserDevices(ctx context.Context, userId string) ApiProvisioningApiUsersWipeUserDevicesRequest {
	return ApiProvisioningApiUsersWipeUserDevicesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CoreWhatsNewDismiss200Response
func (a *ProvisioningApiUsersApiService) ProvisioningApiUsersWipeUserDevicesExecute(r ApiProvisioningApiUsersWipeUserDevicesRequest) (*CoreWhatsNewDismiss200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CoreWhatsNewDismiss200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisioningApiUsersApiService.ProvisioningApiUsersWipeUserDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ocs/v2.php/cloud/users/{userId}/wipe"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oCSAPIRequest == nil {
		return localVarReturnValue, nil, reportError("oCSAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "OCS-APIRequest", r.oCSAPIRequest, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
