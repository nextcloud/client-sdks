/*
nextcloud

Nextcloud APIs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// ThemingThemingApiService ThemingThemingApi service
type ThemingThemingApiService service

type ApiThemingThemingGetImageRequest struct {
	ctx context.Context
	ApiService *ThemingThemingApiService
	key string
	useSvg *int32
}

// Return image as SVG
func (r ApiThemingThemingGetImageRequest) UseSvg(useSvg int32) ApiThemingThemingGetImageRequest {
	r.useSvg = &useSvg
	return r
}

func (r ApiThemingThemingGetImageRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.ThemingThemingGetImageExecute(r)
}

/*
ThemingThemingGetImage Get an image

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param key Key of the image
 @return ApiThemingThemingGetImageRequest
*/
func (a *ThemingThemingApiService) ThemingThemingGetImage(ctx context.Context, key string) ApiThemingThemingGetImageRequest {
	return ApiThemingThemingGetImageRequest{
		ApiService: a,
		ctx: ctx,
		key: key,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ThemingThemingApiService) ThemingThemingGetImageExecute(r ApiThemingThemingGetImageRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingThemingApiService.ThemingThemingGetImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/image/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.useSvg != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "useSvg", r.useSvg, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThemingThemingGetManifestRequest struct {
	ctx context.Context
	ApiService *ThemingThemingApiService
	app string
}

func (r ApiThemingThemingGetManifestRequest) Execute() (*ThemingThemingGetManifest200Response, *http.Response, error) {
	return r.ApiService.ThemingThemingGetManifestExecute(r)
}

/*
ThemingThemingGetManifest Get the manifest for an app

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param app ID of the app
 @return ApiThemingThemingGetManifestRequest
*/
func (a *ThemingThemingApiService) ThemingThemingGetManifest(ctx context.Context, app string) ApiThemingThemingGetManifestRequest {
	return ApiThemingThemingGetManifestRequest{
		ApiService: a,
		ctx: ctx,
		app: app,
	}
}

// Execute executes the request
//  @return ThemingThemingGetManifest200Response
func (a *ThemingThemingApiService) ThemingThemingGetManifestExecute(r ApiThemingThemingGetManifestRequest) (*ThemingThemingGetManifest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ThemingThemingGetManifest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingThemingApiService.ThemingThemingGetManifest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/manifest/{app}"
	localVarPath = strings.Replace(localVarPath, "{"+"app"+"}", url.PathEscape(parameterValueToString(r.app, "app")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThemingThemingGetThemeStylesheetRequest struct {
	ctx context.Context
	ApiService *ThemingThemingApiService
	themeId string
	plain *int32
	withCustomCss *int32
}

// Let the browser decide the CSS priority
func (r ApiThemingThemingGetThemeStylesheetRequest) Plain(plain int32) ApiThemingThemingGetThemeStylesheetRequest {
	r.plain = &plain
	return r
}

// Include custom CSS
func (r ApiThemingThemingGetThemeStylesheetRequest) WithCustomCss(withCustomCss int32) ApiThemingThemingGetThemeStylesheetRequest {
	r.withCustomCss = &withCustomCss
	return r
}

func (r ApiThemingThemingGetThemeStylesheetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.ThemingThemingGetThemeStylesheetExecute(r)
}

/*
ThemingThemingGetThemeStylesheet Get the CSS stylesheet for a theme

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param themeId ID of the theme
 @return ApiThemingThemingGetThemeStylesheetRequest
*/
func (a *ThemingThemingApiService) ThemingThemingGetThemeStylesheet(ctx context.Context, themeId string) ApiThemingThemingGetThemeStylesheetRequest {
	return ApiThemingThemingGetThemeStylesheetRequest{
		ApiService: a,
		ctx: ctx,
		themeId: themeId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ThemingThemingApiService) ThemingThemingGetThemeStylesheetExecute(r ApiThemingThemingGetThemeStylesheetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThemingThemingApiService.ThemingThemingGetThemeStylesheet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/index.php/apps/theming/theme/{themeId}.css"
	localVarPath = strings.Replace(localVarPath, "{"+"themeId"+"}", url.PathEscape(parameterValueToString(r.themeId, "themeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.plain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "plain", r.plain, "")
	}
	if r.withCustomCss != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withCustomCss", r.withCustomCss, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/css"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
