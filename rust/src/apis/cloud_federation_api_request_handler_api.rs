/*
 * nextcloud
 *
 * Nextcloud APIs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed successes of method [`cloud_federation_api_request_handler_add_share`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CloudFederationApiRequestHandlerAddShareSuccess {
    Status201(crate::models::CloudFederationApiAddShare),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`cloud_federation_api_request_handler_receive_notification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CloudFederationApiRequestHandlerReceiveNotificationSuccess {
    Status201(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cloud_federation_api_request_handler_add_share`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CloudFederationApiRequestHandlerAddShareError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cloud_federation_api_request_handler_receive_notification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CloudFederationApiRequestHandlerReceiveNotificationError {
    UnknownValue(serde_json::Value),
}


pub async fn cloud_federation_api_request_handler_add_share(configuration: &configuration::Configuration, share_with: &str, name: &str, provider_id: &str, owner: &str, protocol: &str, share_type: &str, resource_type: &str, description: Option<&str>, owner_display_name: Option<&str>, shared_by: Option<&str>, shared_by_display_name: Option<&str>) -> Result<ResponseContent<CloudFederationApiRequestHandlerAddShareSuccess>, Error<CloudFederationApiRequestHandlerAddShareError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index.php/ocm/shares", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("shareWith", &share_with.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("providerId", &provider_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("owner", &owner.to_string())]);
    if let Some(ref local_var_str) = owner_display_name {
        local_var_req_builder = local_var_req_builder.query(&[("ownerDisplayName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shared_by {
        local_var_req_builder = local_var_req_builder.query(&[("sharedBy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shared_by_display_name {
        local_var_req_builder = local_var_req_builder.query(&[("sharedByDisplayName", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("protocol", &protocol.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("shareType", &share_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("resourceType", &resource_type.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CloudFederationApiRequestHandlerAddShareSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CloudFederationApiRequestHandlerAddShareError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn cloud_federation_api_request_handler_receive_notification(configuration: &configuration::Configuration, notification_type: &str, resource_type: &str, provider_id: Option<&str>, notification: Option<&str>) -> Result<ResponseContent<CloudFederationApiRequestHandlerReceiveNotificationSuccess>, Error<CloudFederationApiRequestHandlerReceiveNotificationError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/index.php/ocm/notifications", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("notificationType", &notification_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("resourceType", &resource_type.to_string())]);
    if let Some(ref local_var_str) = provider_id {
        local_var_req_builder = local_var_req_builder.query(&[("providerId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = notification {
        local_var_req_builder = local_var_req_builder.query(&[("notification", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CloudFederationApiRequestHandlerReceiveNotificationSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CloudFederationApiRequestHandlerReceiveNotificationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

