/*
 * nextcloud
 *
 * Nextcloud APIs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CoreOcsGetCapabilities200ResponseOcsDataCapabilities {
    #[serde(rename = "ocm", skip_serializing_if = "Option::is_none")]
    pub ocm: Option<Box<crate::models::CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesOcm>>,
    #[serde(rename = "dav", skip_serializing_if = "Option::is_none")]
    pub dav: Option<Box<crate::models::CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesDav>>,
    #[serde(rename = "files_sharing", skip_serializing_if = "Option::is_none")]
    pub files_sharing: Option<Box<crate::models::CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharing>>,
    #[serde(rename = "provisioning_api", skip_serializing_if = "Option::is_none")]
    pub provisioning_api: Option<Box<crate::models::CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesProvisioningApi>>,
    #[serde(rename = "theming", skip_serializing_if = "Option::is_none")]
    pub theming: Option<Box<crate::models::CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesTheming>>,
    #[serde(rename = "user_status", skip_serializing_if = "Option::is_none")]
    pub user_status: Option<Box<crate::models::CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesUserStatus>>,
    #[serde(rename = "weather_status", skip_serializing_if = "Option::is_none")]
    pub weather_status: Option<Box<crate::models::CoreOcsGetCapabilities200ResponseOcsDataCapabilitiesFilesSharingUserExpireDate>>,
}

impl CoreOcsGetCapabilities200ResponseOcsDataCapabilities {
    pub fn new() -> CoreOcsGetCapabilities200ResponseOcsDataCapabilities {
        CoreOcsGetCapabilities200ResponseOcsDataCapabilities {
            ocm: None,
            dav: None,
            files_sharing: None,
            provisioning_api: None,
            theming: None,
            user_status: None,
            weather_status: None,
        }
    }
}


